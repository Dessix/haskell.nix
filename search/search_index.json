{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"haskell.nix \u00b6 haskell.nix is an alternative Haskell infrastructure for Nix 1 . Features \u00b6 Drop-in support for Cabal projects Drop-in support for Stack projects Build any package of specific version in Stackage or Hackage Overridable configuration Cross compile Haskell packages See Nixpkgs current Users' Guide to Haskell Infrastructure for comparison. \u21a9","title":"Introduction"},{"location":"index.html#haskellnix","text":"haskell.nix is an alternative Haskell infrastructure for Nix 1 .","title":"haskell.nix"},{"location":"index.html#features","text":"Drop-in support for Cabal projects Drop-in support for Stack projects Build any package of specific version in Stackage or Hackage Overridable configuration Cross compile Haskell packages See Nixpkgs current Users' Guide to Haskell Infrastructure for comparison. \u21a9","title":"Features"},{"location":"architecture.html","text":"Architecture \u00b6 There are multiple components that play a part in the haskell.nix infrastructure. These are nix-tools , haskell.nix , hackage.nix , and stackage.nix . .-------------. .-------------. .- nix-tools ------. | haskell.nix | .- | hackage.nix | | .--------------. | .----------------. '-------------' | '-------------' | | stack-to-nix |---> | stack-pkgs.nix |-. | | | | '--------------' | '----------------' | v | v | .-------------. | .----------. '--> .----------. <-' .--------------. | | plan-to-nix |----> | plan.nix |------.---> | pkgs.nix | <--- | stackage.nix | | '-------------' | '----------' | '----------' '--------------' | .--------------. | .--------------. | | | | cabal-to-nix |---> | $package.nix |--' v | '--------------' | '--------------' .-------------. '------------------' | default.nix | '-------------' | v .-------------. | release.nix | '-------------' haskell.nix diagram nix-tools \u00b6 nix-tools is a Haskell package that provides the following tools: cabal-to-nix : a .cabal to .nix transformer that retains conditional expressions. stack-to-nix : a stack.yaml to .nix transformer that will read in a stack.yaml expression an generate a pkgs.nix file suited for use with haskell.nix . plan-to-nix : a plan.json to .nix transformer that will read in a plan.json file and generate a pkgs.nix file suited for use with haskell.nix . as well as a few other tools used to generate hackage.nix and stackage.nix . haskell.nix \u00b6 Haskell.nix is the runtime system for this Haskell infrastructure. It contains the component builder, as well as the system package and license mapping. Without haskell.nix the expressions generated by either of the nix-tools tools make little sense on their own. hackage.nix \u00b6 hackage.nix provides all cabal expressions from hackage as nix expressions. It is periodically updated to keep in sync with the set of packages available on hackage. stackage.nix \u00b6 stackage.nix is similar to hackage.nix but provides all stackage snapshots (lts, and nightly) as nix expressions. It naturally depends on hackage.nix to resolve package names, versions and revisions to the respective packages from hackage.nix.","title":"Architecture"},{"location":"architecture.html#architecture","text":"There are multiple components that play a part in the haskell.nix infrastructure. These are nix-tools , haskell.nix , hackage.nix , and stackage.nix . .-------------. .-------------. .- nix-tools ------. | haskell.nix | .- | hackage.nix | | .--------------. | .----------------. '-------------' | '-------------' | | stack-to-nix |---> | stack-pkgs.nix |-. | | | | '--------------' | '----------------' | v | v | .-------------. | .----------. '--> .----------. <-' .--------------. | | plan-to-nix |----> | plan.nix |------.---> | pkgs.nix | <--- | stackage.nix | | '-------------' | '----------' | '----------' '--------------' | .--------------. | .--------------. | | | | cabal-to-nix |---> | $package.nix |--' v | '--------------' | '--------------' .-------------. '------------------' | default.nix | '-------------' | v .-------------. | release.nix | '-------------' haskell.nix diagram","title":"Architecture"},{"location":"architecture.html#nix-tools","text":"nix-tools is a Haskell package that provides the following tools: cabal-to-nix : a .cabal to .nix transformer that retains conditional expressions. stack-to-nix : a stack.yaml to .nix transformer that will read in a stack.yaml expression an generate a pkgs.nix file suited for use with haskell.nix . plan-to-nix : a plan.json to .nix transformer that will read in a plan.json file and generate a pkgs.nix file suited for use with haskell.nix . as well as a few other tools used to generate hackage.nix and stackage.nix .","title":"nix-tools"},{"location":"architecture.html#haskellnix","text":"Haskell.nix is the runtime system for this Haskell infrastructure. It contains the component builder, as well as the system package and license mapping. Without haskell.nix the expressions generated by either of the nix-tools tools make little sense on their own.","title":"haskell.nix"},{"location":"architecture.html#hackagenix","text":"hackage.nix provides all cabal expressions from hackage as nix expressions. It is periodically updated to keep in sync with the set of packages available on hackage.","title":"hackage.nix"},{"location":"architecture.html#stackagenix","text":"stackage.nix is similar to hackage.nix but provides all stackage snapshots (lts, and nightly) as nix expressions. It naturally depends on hackage.nix to resolve package names, versions and revisions to the respective packages from hackage.nix.","title":"stackage.nix"},{"location":"changelog.html","text":"This file contains a summary of changes to Haskell.nix and nix-tools that will impact users. Jul 27, 2022 \u00b6 Removed reliance on builtins.currentSystem . It was used it to provide pkgs.evalPackages via an overlay that it used to run derivations used in imports from derivation (IFDs). These derivations are now run on buildPackages by default. Passsing evalPackages to a project function will change where all the derivations used in IFDs are run for that project (including shell tools): evalPackages = import nixpkgs haskellNix.nixpkgsArgs; Passing evalSystem instead will use create a suitable nixpkgs using pkgs.path and pkgs.overlay : evalSystem = \"x86_64-linux\"; or evalSystem = builtins.currentSystem; The haskellLib.cleanGit function is also affected by this change. If you are cross compiling and using cleanGit you should probably do something like: pkgs = import nixpkgs haskellNix.nixpkgsArgs; evalPackages = import nixpkgs (haskellNix.nixpkgsArgs // { system = evalSystem; }); p = pkgs.pkgsCross.mingwW64.haskell-nix.cabalProject { inherit evalPackages; src = evalPackages.haskell-nix.haskellLib.cleanGit { src = ./.; }; }; Feb 16, 2022 \u00b6 Removed lookupSha256 argument from project functions. Pass a sha256map instead. Added better support for repository in cabal.project . These blocks should now work without the need for passing extra-hackages and extra-hackage-tarballs . Aug 6, 2021 \u00b6 Included dependencies of haskell.nix that were tracked in nix/sources.json as flake inputs ( flake.lock replaces nix/sources.json ). Uses flake-compat to continue to provide a compatible interface for non flake projects. Jul 23, 2021 \u00b6 source-repository-package references in cabal.project files are now left as a source-repository-package when calculating the the plan-nix for cabalProject based functions. This makes haskell.nix match the behaviour of cabal better. Materialized files for projects that use source-repository-package references will need to be updated. Only planned components are included in a haskell.nix cabal project. If cabal solver does not include the component in the plan.json file it will not be present in hsPkgs.pkg.components . When the same package occurs more than once in a plan.json file the latest version is picked by haskell.nix. Apr 8, 2021 \u00b6 Project arguments are now validated with the Nix module system. If unexpected argments are passed to a project function this may now result in an error. Feb 22, 2021 \u00b6 Add .dwarf to build any component with DWARF dubug info on linux (ghc >=8.10.2). Pass enableDWARF to shellFor for to get a shell where all the components are the .dwarf ones. Feb 18, 2021 \u00b6 ghcOptions has been moved from package and is now a list of strings. old: packages.x.package.ghcOptions = \"someGHCoption\"; new: packages.x.ghcOptions = [\"someGHCoption\"]; To specify ghcOptions for all packages: ghcOptions = [\"someGHCoption\"]; For a single component: packages.x.compoents.library.ghcOptions = [\"someGHCoption\"]; Feb 8, 2021 \u00b6 Removed older versions of haskell-language-server from custom-tools (0.8.0 is in hackage so we can still get that version). Jan 14, 2021 \u00b6 Added support for cross package refs (with a project). Relative directory references between packages within a project should now work. Added includeSiblings to cleanSourceWith . When true it prevents the subDir arg from causing filtering of other directories. Added keepGitDir to cleanGit to allow .git directory to be kept (useful for components that use the githash package). Nov 26, 2020 \u00b6 Renamed otherShells arg for shellFor to `inputsFrom Nov 25, 2020 \u00b6 The shellFor makeConfigFiles ghcWithHoogle and ghcWithPackages functions have been removed from project.hsPkgs . Instead access them from project itself (e.g. change p.hsPkgs.shellFor to p.shellFor ). The reflex-platform like project.shells.ghc has been removed. If needed, add something like p // { shells.ghc = p.shellFor {} } to shell.nix . Nov 24, 2020 \u00b6 Added ${targetPrefix}cabal wrapper script for running cross compilers in shellFor . otherShells arg added to shellFor . Oct 31, 2020 \u00b6 Passing tools.hoogle to shellFor with a value suitable for haskel-nix.tool will use the specified hoogle inside shellFor . This allows for materialization of hoogle . Oct 28, 2020 \u00b6 Passing compiler-nix-name to project functions for stack.yaml based projects now overrides the compiler used (was ignored before). Sep 8, 2020 \u00b6 Added the ability to generate coverage reports for packages and projects. Added the doCoverage module option that allows users to choose packages to enable coverage for. Added a doCoverage flag to the component builder that outputs HPC information when coverage is enabled. Added test for coverage. July 21, 2020 \u00b6 Removed components.all , use symlinkJoin on components.exes or shellFor if you need a shell. Added components argument to shellFor . July 21, 2020 \u00b6 Added GHC 8.8.4 and replaced 8.8.3 in tests and as the ghc used to build nix-tools for stack projects. July 20, 2020 \u00b6 Changed haskell-nix.roots and p.roots to single derivations. July 8, 2020 \u00b6 Removed sources.nixpkgs-default , use sources.nixpkgs instead. Removed ./nixpkgs directory, use (import ./. {}).sources or ./nix/sources.nix instead. Removes V1 interface for details on how to fix old code see: https://github.com/input-output-hk/haskell.nix/issues/709 Removed defaultCompilerNixName. cabalProject, cabalProject', hackage-project and hackage-package now require a compiler-nix-name argument. haskell-nix.tool and .tools now require a compiler-nix-name argument. New functions p.tool and p.tools (where p is a project) do not. Like shellFor { tools = ... } they will use the compiler nix name from the project (including stack projects where it is derived from the resolver). haskell-nix.alex and haskell-nix.happy have been removed. Use p.tool \"alex\" \"3.2.5\" or shellFor { tools = { alex = \"3.2.5\"; } } . haskell-nix.nix-tools -> haskell-nix.nix-tools.ghc883 (it includes the hpack exe now). haskell-nix.cabal-install -> p.tool \"cabal\" \"3.2.0.0\" or shellFor { tools = { cabal = \"3.2.0.0\"; } } haskell-nix.haskellNixRoots -> haskell-nix.roots ghc883 or p.roots June 25, 2020 \u00b6 Haddock docs are now built in their own derivation when needed (not as part of the component build). They should build automatically when something (such as shellFor ) attempts to accesses the .doc attribute of component. December 27, 2019 \u00b6 Fix overlays/bootstrap.nix to provide LLVM 6, not LLVM 5, to ghc-8.6.X compilers. November 18, 2019 \u00b6 Changed the cleanSourceHaskell to accept an attrset of src and (optional) name parameters. This allows you to keep the source derivation name constant, so that your builds are always cached. Usage of cleanSourceHaskell will need to be updated. October 12, 2019 \u00b6 shellFor no longer sets CABAL_CONFIG by default. This avoids surprising users, but means that Cabal may select a plan which is different to your Haskell.nix package set. If you would like the old behaviour, use shellFor { exactDeps = true; } . August 9, 2019 \u00b6 Add the haskellLib.collectComponents function. June 21, 2019 \u00b6 Add ghcWithPackages and ghcWithHoogle to hsPkgs ( documentation . Benchmark components can now build successfully. Reduced the closure bloat of nix-tools, and added closure size limit to CI. Added more reference documentation and set up auto-generated documentation for Module Options . Miscellaneous bug fixes. June 7, 2019 \u00b6 Several additions to the documentation . More information about getting nix-tools, Haskell.nix, pinning. Updates the stack-to-nix and cabal-to-nix guides. Adds a section on development environments. Adds a little information about cross compilation. Adds a (partially complete) reference section (command line manuals, library reference). Symlinks the changelog into the documentation pages. May 29, 2019 \u00b6 Added shellFor function to package set. May 28, 2019 \u00b6 Added snaphots and haskellPackages attributes to the Haskell.nix top-level. May 22, 2019 \u00b6 Add the cleanSourceHaskell utility function to the Haskell.nix top-level. May 21, 2019 \u00b6 Add the callCabalProjectToNix function, which uses \"import from derivation\" (IFD) so that nix-tools doesn't need to be run manually. The hackage.nix update process has changed, so that Cabal index state hashes are also included in the generated repo. May 20, 2019 \u00b6 Remove Travis CI in favour of Buildkite. May 17, 2019 \u00b6 Add the callStackToNix function, which uses \"import from derivation\" (IFD) so that stack-to-nix doesn't need to be run manually. Mar 15, 2019 \u00b6 overlays was renamed to extras in #79 to prevent confusion between the notion of Nix overlays. Therefore plan-pkgs and stack-pkgs as generated by plan-to-nix and stack-to-nix will expose extras instead of overlay . Similarly mkStackPkgSet , mkPkgSet and mkCabalProjectPkgSet take a pkg-def-extras instead of pkg-def-overlay argument. If you are using iohk-nix , the iohk-overlay was parameter was renamed to iohk-extras .","title":"ChangeLog"},{"location":"changelog.html#jul-27-2022","text":"Removed reliance on builtins.currentSystem . It was used it to provide pkgs.evalPackages via an overlay that it used to run derivations used in imports from derivation (IFDs). These derivations are now run on buildPackages by default. Passsing evalPackages to a project function will change where all the derivations used in IFDs are run for that project (including shell tools): evalPackages = import nixpkgs haskellNix.nixpkgsArgs; Passing evalSystem instead will use create a suitable nixpkgs using pkgs.path and pkgs.overlay : evalSystem = \"x86_64-linux\"; or evalSystem = builtins.currentSystem; The haskellLib.cleanGit function is also affected by this change. If you are cross compiling and using cleanGit you should probably do something like: pkgs = import nixpkgs haskellNix.nixpkgsArgs; evalPackages = import nixpkgs (haskellNix.nixpkgsArgs // { system = evalSystem; }); p = pkgs.pkgsCross.mingwW64.haskell-nix.cabalProject { inherit evalPackages; src = evalPackages.haskell-nix.haskellLib.cleanGit { src = ./.; }; };","title":"Jul 27, 2022"},{"location":"changelog.html#feb-16-2022","text":"Removed lookupSha256 argument from project functions. Pass a sha256map instead. Added better support for repository in cabal.project . These blocks should now work without the need for passing extra-hackages and extra-hackage-tarballs .","title":"Feb 16, 2022"},{"location":"changelog.html#aug-6-2021","text":"Included dependencies of haskell.nix that were tracked in nix/sources.json as flake inputs ( flake.lock replaces nix/sources.json ). Uses flake-compat to continue to provide a compatible interface for non flake projects.","title":"Aug 6, 2021"},{"location":"changelog.html#jul-23-2021","text":"source-repository-package references in cabal.project files are now left as a source-repository-package when calculating the the plan-nix for cabalProject based functions. This makes haskell.nix match the behaviour of cabal better. Materialized files for projects that use source-repository-package references will need to be updated. Only planned components are included in a haskell.nix cabal project. If cabal solver does not include the component in the plan.json file it will not be present in hsPkgs.pkg.components . When the same package occurs more than once in a plan.json file the latest version is picked by haskell.nix.","title":"Jul 23, 2021"},{"location":"changelog.html#apr-8-2021","text":"Project arguments are now validated with the Nix module system. If unexpected argments are passed to a project function this may now result in an error.","title":"Apr 8, 2021"},{"location":"changelog.html#feb-22-2021","text":"Add .dwarf to build any component with DWARF dubug info on linux (ghc >=8.10.2). Pass enableDWARF to shellFor for to get a shell where all the components are the .dwarf ones.","title":"Feb 22, 2021"},{"location":"changelog.html#feb-18-2021","text":"ghcOptions has been moved from package and is now a list of strings. old: packages.x.package.ghcOptions = \"someGHCoption\"; new: packages.x.ghcOptions = [\"someGHCoption\"]; To specify ghcOptions for all packages: ghcOptions = [\"someGHCoption\"]; For a single component: packages.x.compoents.library.ghcOptions = [\"someGHCoption\"];","title":"Feb 18, 2021"},{"location":"changelog.html#feb-8-2021","text":"Removed older versions of haskell-language-server from custom-tools (0.8.0 is in hackage so we can still get that version).","title":"Feb 8, 2021"},{"location":"changelog.html#jan-14-2021","text":"Added support for cross package refs (with a project). Relative directory references between packages within a project should now work. Added includeSiblings to cleanSourceWith . When true it prevents the subDir arg from causing filtering of other directories. Added keepGitDir to cleanGit to allow .git directory to be kept (useful for components that use the githash package).","title":"Jan 14, 2021"},{"location":"changelog.html#nov-26-2020","text":"Renamed otherShells arg for shellFor to `inputsFrom","title":"Nov 26, 2020"},{"location":"changelog.html#nov-25-2020","text":"The shellFor makeConfigFiles ghcWithHoogle and ghcWithPackages functions have been removed from project.hsPkgs . Instead access them from project itself (e.g. change p.hsPkgs.shellFor to p.shellFor ). The reflex-platform like project.shells.ghc has been removed. If needed, add something like p // { shells.ghc = p.shellFor {} } to shell.nix .","title":"Nov 25, 2020"},{"location":"changelog.html#nov-24-2020","text":"Added ${targetPrefix}cabal wrapper script for running cross compilers in shellFor . otherShells arg added to shellFor .","title":"Nov 24, 2020"},{"location":"changelog.html#oct-31-2020","text":"Passing tools.hoogle to shellFor with a value suitable for haskel-nix.tool will use the specified hoogle inside shellFor . This allows for materialization of hoogle .","title":"Oct 31, 2020"},{"location":"changelog.html#oct-28-2020","text":"Passing compiler-nix-name to project functions for stack.yaml based projects now overrides the compiler used (was ignored before).","title":"Oct 28, 2020"},{"location":"changelog.html#sep-8-2020","text":"Added the ability to generate coverage reports for packages and projects. Added the doCoverage module option that allows users to choose packages to enable coverage for. Added a doCoverage flag to the component builder that outputs HPC information when coverage is enabled. Added test for coverage.","title":"Sep 8, 2020"},{"location":"changelog.html#july-21-2020","text":"Removed components.all , use symlinkJoin on components.exes or shellFor if you need a shell. Added components argument to shellFor .","title":"July 21, 2020"},{"location":"changelog.html#july-21-2020_1","text":"Added GHC 8.8.4 and replaced 8.8.3 in tests and as the ghc used to build nix-tools for stack projects.","title":"July 21, 2020"},{"location":"changelog.html#july-20-2020","text":"Changed haskell-nix.roots and p.roots to single derivations.","title":"July 20, 2020"},{"location":"changelog.html#july-8-2020","text":"Removed sources.nixpkgs-default , use sources.nixpkgs instead. Removed ./nixpkgs directory, use (import ./. {}).sources or ./nix/sources.nix instead. Removes V1 interface for details on how to fix old code see: https://github.com/input-output-hk/haskell.nix/issues/709 Removed defaultCompilerNixName. cabalProject, cabalProject', hackage-project and hackage-package now require a compiler-nix-name argument. haskell-nix.tool and .tools now require a compiler-nix-name argument. New functions p.tool and p.tools (where p is a project) do not. Like shellFor { tools = ... } they will use the compiler nix name from the project (including stack projects where it is derived from the resolver). haskell-nix.alex and haskell-nix.happy have been removed. Use p.tool \"alex\" \"3.2.5\" or shellFor { tools = { alex = \"3.2.5\"; } } . haskell-nix.nix-tools -> haskell-nix.nix-tools.ghc883 (it includes the hpack exe now). haskell-nix.cabal-install -> p.tool \"cabal\" \"3.2.0.0\" or shellFor { tools = { cabal = \"3.2.0.0\"; } } haskell-nix.haskellNixRoots -> haskell-nix.roots ghc883 or p.roots","title":"July 8, 2020"},{"location":"changelog.html#june-25-2020","text":"Haddock docs are now built in their own derivation when needed (not as part of the component build). They should build automatically when something (such as shellFor ) attempts to accesses the .doc attribute of component.","title":"June 25, 2020"},{"location":"changelog.html#december-27-2019","text":"Fix overlays/bootstrap.nix to provide LLVM 6, not LLVM 5, to ghc-8.6.X compilers.","title":"December 27, 2019"},{"location":"changelog.html#november-18-2019","text":"Changed the cleanSourceHaskell to accept an attrset of src and (optional) name parameters. This allows you to keep the source derivation name constant, so that your builds are always cached. Usage of cleanSourceHaskell will need to be updated.","title":"November 18, 2019"},{"location":"changelog.html#october-12-2019","text":"shellFor no longer sets CABAL_CONFIG by default. This avoids surprising users, but means that Cabal may select a plan which is different to your Haskell.nix package set. If you would like the old behaviour, use shellFor { exactDeps = true; } .","title":"October 12, 2019"},{"location":"changelog.html#august-9-2019","text":"Add the haskellLib.collectComponents function.","title":"August 9, 2019"},{"location":"changelog.html#june-21-2019","text":"Add ghcWithPackages and ghcWithHoogle to hsPkgs ( documentation . Benchmark components can now build successfully. Reduced the closure bloat of nix-tools, and added closure size limit to CI. Added more reference documentation and set up auto-generated documentation for Module Options . Miscellaneous bug fixes.","title":"June 21, 2019"},{"location":"changelog.html#june-7-2019","text":"Several additions to the documentation . More information about getting nix-tools, Haskell.nix, pinning. Updates the stack-to-nix and cabal-to-nix guides. Adds a section on development environments. Adds a little information about cross compilation. Adds a (partially complete) reference section (command line manuals, library reference). Symlinks the changelog into the documentation pages.","title":"June 7, 2019"},{"location":"changelog.html#may-29-2019","text":"Added shellFor function to package set.","title":"May 29, 2019"},{"location":"changelog.html#may-28-2019","text":"Added snaphots and haskellPackages attributes to the Haskell.nix top-level.","title":"May 28, 2019"},{"location":"changelog.html#may-22-2019","text":"Add the cleanSourceHaskell utility function to the Haskell.nix top-level.","title":"May 22, 2019"},{"location":"changelog.html#may-21-2019","text":"Add the callCabalProjectToNix function, which uses \"import from derivation\" (IFD) so that nix-tools doesn't need to be run manually. The hackage.nix update process has changed, so that Cabal index state hashes are also included in the generated repo.","title":"May 21, 2019"},{"location":"changelog.html#may-20-2019","text":"Remove Travis CI in favour of Buildkite.","title":"May 20, 2019"},{"location":"changelog.html#may-17-2019","text":"Add the callStackToNix function, which uses \"import from derivation\" (IFD) so that stack-to-nix doesn't need to be run manually.","title":"May 17, 2019"},{"location":"changelog.html#mar-15-2019","text":"overlays was renamed to extras in #79 to prevent confusion between the notion of Nix overlays. Therefore plan-pkgs and stack-pkgs as generated by plan-to-nix and stack-to-nix will expose extras instead of overlay . Similarly mkStackPkgSet , mkPkgSet and mkCabalProjectPkgSet take a pkg-def-extras instead of pkg-def-overlay argument. If you are using iohk-nix , the iohk-overlay was parameter was renamed to iohk-extras .","title":"Mar 15, 2019"},{"location":"iohk-nix.html","text":"IOHK's nix tooling \u00b6 iohk-nix \u00b6 iohk-nix is IOHK's shared nix library. It provides some templates to make working with haskell.nix trivial but is non-essential to use haskell.nix infrastructure. lib.nix let # iohk-nix can be overridden for debugging purposes by setting # NIX_PATH=iohk_nix=/path/to/iohk-nix iohkNix = import ( let try = builtins.tryEval <iohk_nix>; in if try.success then builtins.trace \"using host <iohk_nix>\" try.value else let spec = builtins.fromJSON (builtins.readFile ./iohk-nix.json); in builtins.fetchTarball { url = \"${spec.url}/archive/${spec.rev}.tar.gz\"; inherit (spec) sha256; }) {}; pkgs = iohkNix.pkgs; lib = pkgs.lib; in lib // { inherit iohkNix pkgs; inherit (iohkNix) nix-tools; } iohk-nix.json { \"url\": \"https://github.com/input-output-hk/iohk-nix\", \"rev\": \"c92f0119ef5814b0ed1f445c2fdcf8894e326294\", \"sha256\": \"05r90x6x3yp1nb66rkc4n0i8q15c634rrdsr2zvb118s3sdcmmrm\", \"fetchSubmodules\": false } nix/pkgs.nix { pkgs ? import <nixpkgs> {} , iohk-extras ? {} , iohk-module ? {} , haskell , hackage , stackage , ... }: let # our packages stack-pkgs = import ./.stack-pkgs.nix; # Build the packageset with module support. # We can essentially override anything in the modules # section. # # packages.cbors.patches = [ ./one.patch ]; # packages.cbors.flags.optimize-gmp = false; # compiler = (stack-pkgs.extras hackage).compiler.nix-name; pkgSet = haskell.mkNewPkgSet { inherit pkgs; pkg-def = stackage.${stack-pkgs.resolver}; # These extras allow extension or restriction of the set of # packages we are interested in. By using the stack-pkgs.extras # we restrict our package set to the ones provided in stack.yaml. pkg-def-extras = [ stack-pkgs.extras iohk-extras.${compiler} ]; # package customizations modules = [ # This module will ensure that we get the necessary # patches ontop of GHC packages that for which the # ones that GHC ships are not identical to the ones # we find on hackage. These patches will make sure # they are identical by augmenting the packages on # hackage to match those that ship with ghc. haskell.ghcHackagePatches.${compiler} # the iohk-module will supply us with the necessary # cross compilation plumbing to make Template Haskell # work when cross compiling. For now we need to # list the packages that require template haskell # explicity here. iohk-module ]; }; in pkgSet.config.hsPkgs // { _config = pkgSet.config; } default.nix let localLib = import ./lib.nix; in # This file needs to export a function that takes # the arguments it is passed and forwards them to # the default-nix template from iohk-nix. This is # important so that the release.nix file can properly # parameterize this file when targetting different # hosts. { ... }@args: # We will instantiate the defaul-nix template with the # nix/pkgs.nix file... localLib.nix-tools.default-nix ./nix/pkgs.nix args # ... and add a few custom packages as well. // { }","title":"IOHKs nix library"},{"location":"iohk-nix.html#iohks-nix-tooling","text":"","title":"IOHK's nix tooling"},{"location":"iohk-nix.html#iohk-nix","text":"iohk-nix is IOHK's shared nix library. It provides some templates to make working with haskell.nix trivial but is non-essential to use haskell.nix infrastructure. lib.nix let # iohk-nix can be overridden for debugging purposes by setting # NIX_PATH=iohk_nix=/path/to/iohk-nix iohkNix = import ( let try = builtins.tryEval <iohk_nix>; in if try.success then builtins.trace \"using host <iohk_nix>\" try.value else let spec = builtins.fromJSON (builtins.readFile ./iohk-nix.json); in builtins.fetchTarball { url = \"${spec.url}/archive/${spec.rev}.tar.gz\"; inherit (spec) sha256; }) {}; pkgs = iohkNix.pkgs; lib = pkgs.lib; in lib // { inherit iohkNix pkgs; inherit (iohkNix) nix-tools; } iohk-nix.json { \"url\": \"https://github.com/input-output-hk/iohk-nix\", \"rev\": \"c92f0119ef5814b0ed1f445c2fdcf8894e326294\", \"sha256\": \"05r90x6x3yp1nb66rkc4n0i8q15c634rrdsr2zvb118s3sdcmmrm\", \"fetchSubmodules\": false } nix/pkgs.nix { pkgs ? import <nixpkgs> {} , iohk-extras ? {} , iohk-module ? {} , haskell , hackage , stackage , ... }: let # our packages stack-pkgs = import ./.stack-pkgs.nix; # Build the packageset with module support. # We can essentially override anything in the modules # section. # # packages.cbors.patches = [ ./one.patch ]; # packages.cbors.flags.optimize-gmp = false; # compiler = (stack-pkgs.extras hackage).compiler.nix-name; pkgSet = haskell.mkNewPkgSet { inherit pkgs; pkg-def = stackage.${stack-pkgs.resolver}; # These extras allow extension or restriction of the set of # packages we are interested in. By using the stack-pkgs.extras # we restrict our package set to the ones provided in stack.yaml. pkg-def-extras = [ stack-pkgs.extras iohk-extras.${compiler} ]; # package customizations modules = [ # This module will ensure that we get the necessary # patches ontop of GHC packages that for which the # ones that GHC ships are not identical to the ones # we find on hackage. These patches will make sure # they are identical by augmenting the packages on # hackage to match those that ship with ghc. haskell.ghcHackagePatches.${compiler} # the iohk-module will supply us with the necessary # cross compilation plumbing to make Template Haskell # work when cross compiling. For now we need to # list the packages that require template haskell # explicity here. iohk-module ]; }; in pkgSet.config.hsPkgs // { _config = pkgSet.config; } default.nix let localLib = import ./lib.nix; in # This file needs to export a function that takes # the arguments it is passed and forwards them to # the default-nix template from iohk-nix. This is # important so that the release.nix file can properly # parameterize this file when targetting different # hosts. { ... }@args: # We will instantiate the defaul-nix template with the # nix/pkgs.nix file... localLib.nix-tools.default-nix ./nix/pkgs.nix args # ... and add a few custom packages as well. // { }","title":"iohk-nix"},{"location":"motivation.html","text":"Motivation \u00b6 Why do we need another Haskell infrastructure for Nix? Doesn't nixpkgs provide a sufficiently good Haskell infrastructure already? Problems with the nixpkgs haskell infrastructure are covered in the following sections: Cross compilation \u00b6 nixpkgs has quite good support for cross compilation, however the Haskell infrastructure suffers from the fact that it heavily relies on the cabal2nix tool. cabal2nix (as well as tools that depend on it like stack2nix ) flattens the .cabal file at conversion time to a given os/arch/flags configuration. Thus to make cross compilation work with cabal2nix you will have to generate a separate nix expression for each configuration. This becomes a major maintenance burden over time. Therefore the tooling that translates cabal files into nix-expressions for use with Haskell.nix retains the full conditional tree from the cabal file and exposes it to nix . In addition it will also expose the build-type value, which allows us to cache the Setup.hs for build-type simple and not have to rebuild it every time. Package sets \u00b6 We often rely on either package sets as provided by stackage or computed by cabal. nixpkgs provides its own curated package set which might or might not work for the projects we work on. stack2nix tries to solve this issue, here we go one step further and provide the infrastructure to allow any form of package set. Per component level control \u00b6 The Haskell builder in nixpkgs provides control over executables and libraries, to build a specific executable only however is rather tricky to do. This also leads to the cyclic dependencies issue. Cyclic dependencies \u00b6 The Haskell builder in nixpkgs exposes packages at the package level. If packages mutually depend on each other through tests and libraries, this leads to cyclic dependencies that nix can't resolve. By exposing the components to nix as separate derivations this will only occur if you have mutually dependent components. Build times \u00b6 The Haskell builder in nixpkgs builds a package sequentially, first the library then the executables and finally the tests. It then executes the tests before the package is considered done. The upshot of this is that packages are only considered done if the test-suites passed. The downside is that if you have to compile multiple packages the likelihood of them failing is low, you have unnecessarily serialized your build. In a more aggressive setting libraries could start building as early as their dependent libraries are built. Of course they will have to be invalidated later should the test-suites of their dependencies fail, but this way we can make use of parallel building. In an ideal scenario this will reduce build times close to the optimum. More logic in nix \u00b6 The cabal2nix tool has a resolver that resolves system dependencies and licenses to values in nixpkgs . This logic ends up being a simple dictionary lookup and therefore can be a simple nix expression. This also offloads some of the work the cabal to nix translation tool needs to do into nix, and as such if changes are necessary (or needed to be performed ad hoc) there is no need to rebuild the conversion tool and subsequently mark every derived expression as out of date. Decoupling \u00b6 Finally, by treating Haskell.nix and nixpkgs as separate entities we can decouple the Haskell packages and infrastructure from the nixpkgs package set, and rely on it to provide us with system packages while staying up to date with Haskell packages from hackage while retaining a stable (or known to be good) nixpkgs revision.","title":"Motivation"},{"location":"motivation.html#motivation","text":"Why do we need another Haskell infrastructure for Nix? Doesn't nixpkgs provide a sufficiently good Haskell infrastructure already? Problems with the nixpkgs haskell infrastructure are covered in the following sections:","title":"Motivation"},{"location":"motivation.html#cross-compilation","text":"nixpkgs has quite good support for cross compilation, however the Haskell infrastructure suffers from the fact that it heavily relies on the cabal2nix tool. cabal2nix (as well as tools that depend on it like stack2nix ) flattens the .cabal file at conversion time to a given os/arch/flags configuration. Thus to make cross compilation work with cabal2nix you will have to generate a separate nix expression for each configuration. This becomes a major maintenance burden over time. Therefore the tooling that translates cabal files into nix-expressions for use with Haskell.nix retains the full conditional tree from the cabal file and exposes it to nix . In addition it will also expose the build-type value, which allows us to cache the Setup.hs for build-type simple and not have to rebuild it every time.","title":"Cross compilation"},{"location":"motivation.html#package-sets","text":"We often rely on either package sets as provided by stackage or computed by cabal. nixpkgs provides its own curated package set which might or might not work for the projects we work on. stack2nix tries to solve this issue, here we go one step further and provide the infrastructure to allow any form of package set.","title":"Package sets"},{"location":"motivation.html#per-component-level-control","text":"The Haskell builder in nixpkgs provides control over executables and libraries, to build a specific executable only however is rather tricky to do. This also leads to the cyclic dependencies issue.","title":"Per component level control"},{"location":"motivation.html#cyclic-dependencies","text":"The Haskell builder in nixpkgs exposes packages at the package level. If packages mutually depend on each other through tests and libraries, this leads to cyclic dependencies that nix can't resolve. By exposing the components to nix as separate derivations this will only occur if you have mutually dependent components.","title":"Cyclic dependencies"},{"location":"motivation.html#build-times","text":"The Haskell builder in nixpkgs builds a package sequentially, first the library then the executables and finally the tests. It then executes the tests before the package is considered done. The upshot of this is that packages are only considered done if the test-suites passed. The downside is that if you have to compile multiple packages the likelihood of them failing is low, you have unnecessarily serialized your build. In a more aggressive setting libraries could start building as early as their dependent libraries are built. Of course they will have to be invalidated later should the test-suites of their dependencies fail, but this way we can make use of parallel building. In an ideal scenario this will reduce build times close to the optimum.","title":"Build times"},{"location":"motivation.html#more-logic-in-nix","text":"The cabal2nix tool has a resolver that resolves system dependencies and licenses to values in nixpkgs . This logic ends up being a simple dictionary lookup and therefore can be a simple nix expression. This also offloads some of the work the cabal to nix translation tool needs to do into nix, and as such if changes are necessary (or needed to be performed ad hoc) there is no need to rebuild the conversion tool and subsequently mark every derived expression as out of date.","title":"More logic in nix"},{"location":"motivation.html#decoupling","text":"Finally, by treating Haskell.nix and nixpkgs as separate entities we can decouple the Haskell packages and infrastructure from the nixpkgs package set, and rely on it to provide us with system packages while staying up to date with Haskell packages from hackage while retaining a stable (or known to be good) nixpkgs revision.","title":"Decoupling"},{"location":"troubleshooting.html","text":"Troubleshooting \u00b6 Issues with building and garbage-collection \u00b6 Why am I building GHC? \u00b6 It's easier to list the reverse: when will you not build GHC? You have configured the binary cache correctly. You are using one of the GHC versions which we support . You are using one of the nixpkgs versions used by our CI (you can access the sources for these through haskell.nix . If you think you are doing all of these and you still find you're building GHC, drop us a line. Why am I building lots of Haskell packages? \u00b6 We don't generally cache much of Hackage (there's a lot of it!), except for the parts which are used by our tests. So this is expected, unfortunately. How do I prevent the evaluation-time dependencies of my project from being garbage-collected? \u00b6 The haskell-nix.roots \"ghc884\" should include all the evaluation-time dependencies and the main build time dependencies of a project using ghc 8.8.4. So you can add that to the relevant GC root. In practice, if you're using a CI system like Hydra/Hercules, this means adding it to a job in release.nix / ci.nix . General troubleshooting when using cabalProject / stackProject / project \u00b6 Does the cabal/stack build work? \u00b6 In haskell.nix , we strive to take the build configuration from the cabal/stack configuration files. So if you have a problem with your cabal/stack configuration, it is likely that you will have a problem with the haskell.nix build too. So the first thing to do is make sure that the build works with cabal or stack as normal. If it does work, then the haskell.nix one should as well. If, on the other hand, there is a failure, the cabal or stack build is usually easier to debug (or at least it is no longer a haskell.nix problem). Is the haskell.nix configuration completely in line with the cabal/stack configuration? \u00b6 The haskell.nix configuration can come apart from the cabal/stack configuration in a number of ways: Compiler version \u00b6 (Cabal users only. For stack users this comes from the snapshot, so stack and haskell.nix will agree.) The compiler version used by haskell.nix is selected by the compiler-nix-name argument; or if you do not specify it, by some default version (we recommend specifying it!). Cabal does not provide an easy way to pin a version of the compiler ( with-compiler lets you pick a particular executable, which is nearly but not quite what we want). Hence, the two can come apart. Make sure you are using the same compiler for the cabal build as for the haskell.nix build. Hackage index state \u00b6 (Cabal users only. For stack users, package versions come from the snapshot, so stack and haskell.nix will agree.) Cabal has the concept of the Hackage \"index state\". This is a timestamp, and it tells Cabal to behave \"as if\" it was seeing Hackage at that point in time. Pinning it is generally good for reproducibility regardless of whether you use haskell.nix (you can do so in cabal.project ). If you do not set an index-state in cabal.project , then Cabal will use the latest one based on when you last called cabal update , and haskell.nix will use the latest one it knows about from hackage.nix . These may not be the same! So if you use haskell.nix we strongly recommend pinning the index-state . Nix-only configuration options \u00b6 You can set configuration options in your Nix code that are not present in the cabal/stack configuration. For example, you might enable profiling. Where possible, try to do the configuration in your cabal/stack configuration, e.g. setting profiling: true in cabal.project . This will ensure that the two builds agree. If you want or need to set some of them in Nix, try bringing the two into sync temporarily for troubleshooting. Other specific issues \u00b6 Why does the build complain about some files being missing? \u00b6 Sometimes your build works fine outside haskell.nix , but inside the haskell.nix build, cabal complains that some file is missing. What is going on? The answer is that haskell.nix thoroughly cleans the source by following what is mentioned as required in the cabal file . So we only include Haskell sources if they appear in a hs-source-dirs somewhere; and we only include non-Haskell files if they are included in extra-source-files or similar. This is good practice anyway: if you do not include such files in extra-source-files then they will not be included in cabal sdist , which will cause problems if you ever upload your package to Hackage. But haskell.nix is very picky about it. Why does my executable depend on GHC/GCC? \u00b6 You may want to set the dontStrip option to false (see https://github.com/input-output-hk/haskell.nix/issues/829). This is not set by default because it can occasionally cause breakage.","title":"Troubleshooting"},{"location":"troubleshooting.html#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting.html#issues-with-building-and-garbage-collection","text":"","title":"Issues with building and garbage-collection"},{"location":"troubleshooting.html#why-am-i-building-ghc","text":"It's easier to list the reverse: when will you not build GHC? You have configured the binary cache correctly. You are using one of the GHC versions which we support . You are using one of the nixpkgs versions used by our CI (you can access the sources for these through haskell.nix . If you think you are doing all of these and you still find you're building GHC, drop us a line.","title":"Why am I building GHC?"},{"location":"troubleshooting.html#why-am-i-building-lots-of-haskell-packages","text":"We don't generally cache much of Hackage (there's a lot of it!), except for the parts which are used by our tests. So this is expected, unfortunately.","title":"Why am I building lots of Haskell packages?"},{"location":"troubleshooting.html#how-do-i-prevent-the-evaluation-time-dependencies-of-my-project-from-being-garbage-collected","text":"The haskell-nix.roots \"ghc884\" should include all the evaluation-time dependencies and the main build time dependencies of a project using ghc 8.8.4. So you can add that to the relevant GC root. In practice, if you're using a CI system like Hydra/Hercules, this means adding it to a job in release.nix / ci.nix .","title":"How do I prevent the evaluation-time dependencies of my project from being garbage-collected?"},{"location":"troubleshooting.html#general-troubleshooting-when-using-cabalprojectstackprojectproject","text":"","title":"General troubleshooting when using cabalProject/stackProject/project"},{"location":"troubleshooting.html#does-the-cabalstack-build-work","text":"In haskell.nix , we strive to take the build configuration from the cabal/stack configuration files. So if you have a problem with your cabal/stack configuration, it is likely that you will have a problem with the haskell.nix build too. So the first thing to do is make sure that the build works with cabal or stack as normal. If it does work, then the haskell.nix one should as well. If, on the other hand, there is a failure, the cabal or stack build is usually easier to debug (or at least it is no longer a haskell.nix problem).","title":"Does the cabal/stack build work?"},{"location":"troubleshooting.html#is-the-haskellnix-configuration-completely-in-line-with-the-cabalstack-configuration","text":"The haskell.nix configuration can come apart from the cabal/stack configuration in a number of ways:","title":"Is the haskell.nix configuration completely in line with the cabal/stack configuration?"},{"location":"troubleshooting.html#compiler-version","text":"(Cabal users only. For stack users this comes from the snapshot, so stack and haskell.nix will agree.) The compiler version used by haskell.nix is selected by the compiler-nix-name argument; or if you do not specify it, by some default version (we recommend specifying it!). Cabal does not provide an easy way to pin a version of the compiler ( with-compiler lets you pick a particular executable, which is nearly but not quite what we want). Hence, the two can come apart. Make sure you are using the same compiler for the cabal build as for the haskell.nix build.","title":"Compiler version"},{"location":"troubleshooting.html#hackage-index-state","text":"(Cabal users only. For stack users, package versions come from the snapshot, so stack and haskell.nix will agree.) Cabal has the concept of the Hackage \"index state\". This is a timestamp, and it tells Cabal to behave \"as if\" it was seeing Hackage at that point in time. Pinning it is generally good for reproducibility regardless of whether you use haskell.nix (you can do so in cabal.project ). If you do not set an index-state in cabal.project , then Cabal will use the latest one based on when you last called cabal update , and haskell.nix will use the latest one it knows about from hackage.nix . These may not be the same! So if you use haskell.nix we strongly recommend pinning the index-state .","title":"Hackage index state"},{"location":"troubleshooting.html#nix-only-configuration-options","text":"You can set configuration options in your Nix code that are not present in the cabal/stack configuration. For example, you might enable profiling. Where possible, try to do the configuration in your cabal/stack configuration, e.g. setting profiling: true in cabal.project . This will ensure that the two builds agree. If you want or need to set some of them in Nix, try bringing the two into sync temporarily for troubleshooting.","title":"Nix-only configuration options"},{"location":"troubleshooting.html#other-specific-issues","text":"","title":"Other specific issues"},{"location":"troubleshooting.html#why-does-the-build-complain-about-some-files-being-missing","text":"Sometimes your build works fine outside haskell.nix , but inside the haskell.nix build, cabal complains that some file is missing. What is going on? The answer is that haskell.nix thoroughly cleans the source by following what is mentioned as required in the cabal file . So we only include Haskell sources if they appear in a hs-source-dirs somewhere; and we only include non-Haskell files if they are included in extra-source-files or similar. This is good practice anyway: if you do not include such files in extra-source-files then they will not be included in cabal sdist , which will cause problems if you ever upload your package to Hackage. But haskell.nix is very picky about it.","title":"Why does the build complain about some files being missing?"},{"location":"troubleshooting.html#why-does-my-executable-depend-on-ghcgcc","text":"You may want to set the dontStrip option to false (see https://github.com/input-output-hk/haskell.nix/issues/829). This is not set by default because it can occasionally cause breakage.","title":"Why does my executable depend on GHC/GCC?"},{"location":"dev/adding-new-ghc.html","text":"Adding a new GHC version to haskell.nix \u00b6 Update overlays/bootstrap.nix \u00b6 Each ghc version is defined in this file. Duplicate one of the existing ghc version definitions and replace the version numbers. Make sure you update the spec.sha256 or the other versions source will be used. Check the LLVM version that should be used in the ghc wiki . Update the list of cached GHC versions in ci.nix \u00b6 Update supported ghc versions document \u00b6 Add the materialized files \u00b6 In the haskell.nix repo run: mkdir materialized/ghc884 nix-build scripts/check-compiler-materialization --argstr compiler-nix-name ghc884 The nix-build command will fail with something like: Materialized nix used for dummy-data-x86_64-unknown-linux-musl-ghc-8.10.1 incorrect. To fix run: /nix/store/wnwpyrhv4nxgyljz3f20gdpspjxvm7h4-updateMaterialized Run the updateMaterialized script and repeat the nix-build until it no longer fails. If the failure is not a problem with materialization and no updateMaterialized script is provided then you may need to fix the failure another way or (if it only relates to one of the cross compilers) modify scripts/check-compiler-materialization/default.nix so that it skips that compiler.","title":"Adding a new GHC version"},{"location":"dev/adding-new-ghc.html#adding-a-new-ghc-version-to-haskellnix","text":"","title":"Adding a new GHC version to haskell.nix"},{"location":"dev/adding-new-ghc.html#update-overlaysbootstrapnix","text":"Each ghc version is defined in this file. Duplicate one of the existing ghc version definitions and replace the version numbers. Make sure you update the spec.sha256 or the other versions source will be used. Check the LLVM version that should be used in the ghc wiki .","title":"Update overlays/bootstrap.nix"},{"location":"dev/adding-new-ghc.html#update-the-list-of-cached-ghc-versions-in-cinix","text":"","title":"Update the list of cached GHC versions in ci.nix"},{"location":"dev/adding-new-ghc.html#update-supported-ghc-versions-document","text":"","title":"Update supported ghc versions document"},{"location":"dev/adding-new-ghc.html#add-the-materialized-files","text":"In the haskell.nix repo run: mkdir materialized/ghc884 nix-build scripts/check-compiler-materialization --argstr compiler-nix-name ghc884 The nix-build command will fail with something like: Materialized nix used for dummy-data-x86_64-unknown-linux-musl-ghc-8.10.1 incorrect. To fix run: /nix/store/wnwpyrhv4nxgyljz3f20gdpspjxvm7h4-updateMaterialized Run the updateMaterialized script and repeat the nix-build until it no longer fails. If the failure is not a problem with materialization and no updateMaterialized script is provided then you may need to fix the failure another way or (if it only relates to one of the cross compilers) modify scripts/check-compiler-materialization/default.nix so that it skips that compiler.","title":"Add the materialized files"},{"location":"dev/coverage.html","text":"Developer Coverage Overview \u00b6 Building \u00b6 The implementation of coverage starts with the \"doCoverage\" flag on the builder in comp-builder.nix . The doCoverage flag enables and disables the Cabal coverage flag and copies any generated coverage data to \"$out/share/hpc\". Mix and tix files \u00b6 The coverage information for any derivation consists of \"mix\" and \"tix\" files. Mix files record static information about a source file and are generated at build time. They primarily contain a path to the source file and information about expressions and regions of the source file, which are later referenced by tix files. Tix files contain dynamic information about a test run, recording when a portion of a source file is touched by a test. These are generated when the test is run. Multiple local packages \u00b6 In the context of multiple local packages, there are a few types of coverage we might be interested in: - How well does the tests for this package cover the package library? - How well does the tests for this package cover the libraries of other packages in this project? - Both of the above. To facilitate expressing any of these classifications of coverage, the lib/cover.nix function provides the mixLibraries argument. If you're just interested in how the tests cover the package library, you provide that library as an argument to mixLibraries . If you're interested in how the tests also cover other local packages in the project, you can also provide those libraries as arguments to mixLibraries. The projectCoverageReport and coverageReport attributes that are provided by default on projects and packages respectively provide coverage information for all local packages in the project. This is to mimic the behaviour of Stack, which seems to be the expectation of most people. Of course, you can use the projectCoverageReport and coverageReport functions to construct your own custom coverage reports (as detailed in the coverage tutorial ). Coverage reports \u00b6 Package reports \u00b6 The coverage information generated will look something like this: /nix/store/...-my-project-0.1.0.0-coverage-report/ \u2514\u2500\u2500 share \u2514\u2500\u2500 hpc \u2514\u2500\u2500 vanilla \u251c\u2500\u2500 html \u2502 \u2514\u2500\u2500 my-library-0.1.0.0 \u2502 \u251c\u2500\u2500 my-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Config.hs.html \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Types.hs.html \u2502 \u2502 \u2514\u2500\u2500 My.Lib.Util.hs.html \u2502 \u251c\u2500\u2500 hpc_index_alt.html \u2502 \u251c\u2500\u2500 hpc_index_exp.html \u2502 \u251c\u2500\u2500 hpc_index_fun.html \u2502 \u2514\u2500\u2500 hpc_index.html \u251c\u2500\u2500 mix \u2502 \u2514\u2500\u2500 my-library-0.1.0.0 \u2502 \u2514\u2500\u2500 my-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u251c\u2500\u2500 My.Lib.Config.mix \u2502 \u251c\u2500\u2500 My.Lib.Types.mix \u2502 \u2514\u2500\u2500 My.Lib.Util.mix \u2514\u2500\u2500 tix \u2514\u2500\u2500 my-library-0.1.0.0 \u251c\u2500\u2500 my-library-0.1.0.0.tix \u251c\u2500\u2500 my-test-1 \u2502 \u2514\u2500\u2500 my-test-1.tix \u2514\u2500\u2500 unit-test \u2514\u2500\u2500 unit-test.tix The mix files are copied verbatim from the library built with coverage. The tix files for each test are copied from the check run verbatim and are output to \".../tix/ / / .tix\". The tix files for each library are generated by summing the tix files for each test, but excluding any test modules. This tix file is output to \".../tix/ / .tix\". Test modules are determined by inspecting the plan for the project (i.e. for the project \"my-project\" and test-suite \"my-test-1\", the test modules are read from: my-project.checks.my-test-1.config.modules ) The hpc HTML reports for each library are generated from their respective tix files (i.e. the share/hpc/vanilla/html/my-library-0.1.0.0 report is generated from the share/hpc/vanilla/tix/my-library-0.1.0.0/my-library-0.1.0.0.tix file) Project-wide reports \u00b6 The coverage information for an entire project will look something like this: /nix/store/...-coverage-report \u2514\u2500\u2500 share \u2514\u2500\u2500 hpc \u2514\u2500\u2500 vanilla \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 all \u2502 \u2502 \u251c\u2500\u2500 my-library-0.1.0.0-ERSaOroBZhe9awsoBkhmcV \u2502 \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Config.hs.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Types.hs.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 My.Lib.Util.hs.html \u2502 \u2502 \u251c\u2500\u2500 other-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Other.Lib.A.hs.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 Other.Lib.B.hs.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_alt.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_exp.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_fun.html \u2502 \u2502 \u2514\u2500\u2500 hpc_index.html \u2502 \u251c\u2500\u2500 my-library-0.1.0.0 \u2502 \u2502 \u251c\u2500\u2500 my-library-0.1.0.0-ERSaOroBZhe9awsoBkhmcV \u2502 \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Config.hs.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Types.hs.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 My.Lib.Util.hs.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_alt.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_exp.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_fun.html \u2502 \u2502 \u2514\u2500\u2500 hpc_index.html \u2502 \u2514\u2500\u2500 other-libray-0.1.0.0 \u2502 \u251c\u2500\u2500 other-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u2502 \u251c\u2500\u2500 Other.Lib.A.hs.html \u2502 \u2502 \u2514\u2500\u2500 Other.Lib.B.hs.html \u2502 \u251c\u2500\u2500 hpc_index_alt.html \u2502 \u251c\u2500\u2500 hpc_index_exp.html \u2502 \u251c\u2500\u2500 hpc_index_fun.html \u2502 \u2514\u2500\u2500 hpc_index.html \u251c\u2500\u2500 mix \u2502 \u251c\u2500\u2500 my-library-0.1.0.0-ERSaOroBZhe9awsoBkhmcV \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Config.mix \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Types.mix \u2502 \u2502 \u2514\u2500\u2500 My.Lib.Util.mix \u2502 \u2514\u2500\u2500 other-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u251c\u2500\u2500 Other.Lib.A.mix \u2502 \u2514\u2500\u2500 Other.Lib.B.mix \u2514\u2500\u2500 tix \u251c\u2500\u2500 all \u2502 \u2514\u2500\u2500 all.tix \u251c\u2500\u2500 my-library-0.1.0.0 \u2502 \u251c\u2500\u2500 my-library-0.1.0.0.tix \u2502 \u251c\u2500\u2500 my-test-1 \u2502 \u2502 \u2514\u2500\u2500 my-test-1.tix \u2502 \u2514\u2500\u2500 unit-test \u2502 \u2514\u2500\u2500 unit-test.tix \u2514\u2500\u2500 another-library-0.1.0.0 \u251c\u2500\u2500 another-library-0.1.0.0.tix \u251c\u2500\u2500 my-test-2 \u2502 \u2514\u2500\u2500 my-test-2.tix \u2514\u2500\u2500 unit-test \u2514\u2500\u2500 unit-test.tix All of the coverage information is copied verbatim from the coverage reports for each of the constituent packages. A few additions are made: - tix/all/all.tix is generated from the union of all the library tix files. - We use this file when generating coverage reports for \"coveralls.io\". - An index page ( html/index.html ) is generated which links to the HTML coverage reports of the constituent packages. - A synthetic HTML report is generated from the tix/all/all.tix file. This shows the union of all the coverage information generated by each constituent coverage report.","title":"Coverage"},{"location":"dev/coverage.html#developer-coverage-overview","text":"","title":"Developer Coverage Overview"},{"location":"dev/coverage.html#building","text":"The implementation of coverage starts with the \"doCoverage\" flag on the builder in comp-builder.nix . The doCoverage flag enables and disables the Cabal coverage flag and copies any generated coverage data to \"$out/share/hpc\".","title":"Building"},{"location":"dev/coverage.html#mix-and-tix-files","text":"The coverage information for any derivation consists of \"mix\" and \"tix\" files. Mix files record static information about a source file and are generated at build time. They primarily contain a path to the source file and information about expressions and regions of the source file, which are later referenced by tix files. Tix files contain dynamic information about a test run, recording when a portion of a source file is touched by a test. These are generated when the test is run.","title":"Mix and tix files"},{"location":"dev/coverage.html#multiple-local-packages","text":"In the context of multiple local packages, there are a few types of coverage we might be interested in: - How well does the tests for this package cover the package library? - How well does the tests for this package cover the libraries of other packages in this project? - Both of the above. To facilitate expressing any of these classifications of coverage, the lib/cover.nix function provides the mixLibraries argument. If you're just interested in how the tests cover the package library, you provide that library as an argument to mixLibraries . If you're interested in how the tests also cover other local packages in the project, you can also provide those libraries as arguments to mixLibraries. The projectCoverageReport and coverageReport attributes that are provided by default on projects and packages respectively provide coverage information for all local packages in the project. This is to mimic the behaviour of Stack, which seems to be the expectation of most people. Of course, you can use the projectCoverageReport and coverageReport functions to construct your own custom coverage reports (as detailed in the coverage tutorial ).","title":"Multiple local packages"},{"location":"dev/coverage.html#coverage-reports","text":"","title":"Coverage reports"},{"location":"dev/coverage.html#package-reports","text":"The coverage information generated will look something like this: /nix/store/...-my-project-0.1.0.0-coverage-report/ \u2514\u2500\u2500 share \u2514\u2500\u2500 hpc \u2514\u2500\u2500 vanilla \u251c\u2500\u2500 html \u2502 \u2514\u2500\u2500 my-library-0.1.0.0 \u2502 \u251c\u2500\u2500 my-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Config.hs.html \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Types.hs.html \u2502 \u2502 \u2514\u2500\u2500 My.Lib.Util.hs.html \u2502 \u251c\u2500\u2500 hpc_index_alt.html \u2502 \u251c\u2500\u2500 hpc_index_exp.html \u2502 \u251c\u2500\u2500 hpc_index_fun.html \u2502 \u2514\u2500\u2500 hpc_index.html \u251c\u2500\u2500 mix \u2502 \u2514\u2500\u2500 my-library-0.1.0.0 \u2502 \u2514\u2500\u2500 my-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u251c\u2500\u2500 My.Lib.Config.mix \u2502 \u251c\u2500\u2500 My.Lib.Types.mix \u2502 \u2514\u2500\u2500 My.Lib.Util.mix \u2514\u2500\u2500 tix \u2514\u2500\u2500 my-library-0.1.0.0 \u251c\u2500\u2500 my-library-0.1.0.0.tix \u251c\u2500\u2500 my-test-1 \u2502 \u2514\u2500\u2500 my-test-1.tix \u2514\u2500\u2500 unit-test \u2514\u2500\u2500 unit-test.tix The mix files are copied verbatim from the library built with coverage. The tix files for each test are copied from the check run verbatim and are output to \".../tix/ / / .tix\". The tix files for each library are generated by summing the tix files for each test, but excluding any test modules. This tix file is output to \".../tix/ / .tix\". Test modules are determined by inspecting the plan for the project (i.e. for the project \"my-project\" and test-suite \"my-test-1\", the test modules are read from: my-project.checks.my-test-1.config.modules ) The hpc HTML reports for each library are generated from their respective tix files (i.e. the share/hpc/vanilla/html/my-library-0.1.0.0 report is generated from the share/hpc/vanilla/tix/my-library-0.1.0.0/my-library-0.1.0.0.tix file)","title":"Package reports"},{"location":"dev/coverage.html#project-wide-reports","text":"The coverage information for an entire project will look something like this: /nix/store/...-coverage-report \u2514\u2500\u2500 share \u2514\u2500\u2500 hpc \u2514\u2500\u2500 vanilla \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 all \u2502 \u2502 \u251c\u2500\u2500 my-library-0.1.0.0-ERSaOroBZhe9awsoBkhmcV \u2502 \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Config.hs.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Types.hs.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 My.Lib.Util.hs.html \u2502 \u2502 \u251c\u2500\u2500 other-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Other.Lib.A.hs.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 Other.Lib.B.hs.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_alt.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_exp.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_fun.html \u2502 \u2502 \u2514\u2500\u2500 hpc_index.html \u2502 \u251c\u2500\u2500 my-library-0.1.0.0 \u2502 \u2502 \u251c\u2500\u2500 my-library-0.1.0.0-ERSaOroBZhe9awsoBkhmcV \u2502 \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Config.hs.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Types.hs.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 My.Lib.Util.hs.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_alt.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_exp.html \u2502 \u2502 \u251c\u2500\u2500 hpc_index_fun.html \u2502 \u2502 \u2514\u2500\u2500 hpc_index.html \u2502 \u2514\u2500\u2500 other-libray-0.1.0.0 \u2502 \u251c\u2500\u2500 other-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u2502 \u251c\u2500\u2500 Other.Lib.A.hs.html \u2502 \u2502 \u2514\u2500\u2500 Other.Lib.B.hs.html \u2502 \u251c\u2500\u2500 hpc_index_alt.html \u2502 \u251c\u2500\u2500 hpc_index_exp.html \u2502 \u251c\u2500\u2500 hpc_index_fun.html \u2502 \u2514\u2500\u2500 hpc_index.html \u251c\u2500\u2500 mix \u2502 \u251c\u2500\u2500 my-library-0.1.0.0-ERSaOroBZhe9awsoBkhmcV \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Config.mix \u2502 \u2502 \u251c\u2500\u2500 My.Lib.Types.mix \u2502 \u2502 \u2514\u2500\u2500 My.Lib.Util.mix \u2502 \u2514\u2500\u2500 other-library-0.1.0.0-48EVZBwW9Kj29VTaRMhBDf \u2502 \u251c\u2500\u2500 Other.Lib.A.mix \u2502 \u2514\u2500\u2500 Other.Lib.B.mix \u2514\u2500\u2500 tix \u251c\u2500\u2500 all \u2502 \u2514\u2500\u2500 all.tix \u251c\u2500\u2500 my-library-0.1.0.0 \u2502 \u251c\u2500\u2500 my-library-0.1.0.0.tix \u2502 \u251c\u2500\u2500 my-test-1 \u2502 \u2502 \u2514\u2500\u2500 my-test-1.tix \u2502 \u2514\u2500\u2500 unit-test \u2502 \u2514\u2500\u2500 unit-test.tix \u2514\u2500\u2500 another-library-0.1.0.0 \u251c\u2500\u2500 another-library-0.1.0.0.tix \u251c\u2500\u2500 my-test-2 \u2502 \u2514\u2500\u2500 my-test-2.tix \u2514\u2500\u2500 unit-test \u2514\u2500\u2500 unit-test.tix All of the coverage information is copied verbatim from the coverage reports for each of the constituent packages. A few additions are made: - tix/all/all.tix is generated from the union of all the library tix files. - We use this file when generating coverage reports for \"coveralls.io\". - An index page ( html/index.html ) is generated which links to the HTML coverage reports of the constituent packages. - A synthetic HTML report is generated from the tix/all/all.tix file. This shows the union of all the coverage information generated by each constituent coverage report.","title":"Project-wide reports"},{"location":"dev/dev-architecture.html","text":"Developer Architecture Overview \u00b6 This shall give a sufficiently good overview over the haskell.nix ideas, such that a new developer can navigate around without too much trouble. Packages \u00b6 haskell.nix is centered around packages (haskell package descriptions as nix-expressions). These are generated by cabal-to-nix from the nix-tools package. stack-to-nix and plan-to-nix will delegate the transformation of cabal packages to nix expressions to the same code that cabal-to-nix uses. These packages will look similar to the following: { system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, ... }: { flags = {}; package = { ... }; components = { \"library\" = { depends = [ ... ]; }; exes = { \"...\" = { depends = [ ... ]; }; ... }; sublibs = { \"...\" = { depends = [ ... ]; }; ... }; tests = { \"...\" = { depends = [ ... ]; }; ... }; benchmarks = { \"...\" = { depends = [ ... ]; }; ... }; }; }; The exact specification can be found in modules/package.nix . Plans \u00b6 Packages (unless specified directly in the packages attribute of the module) usually come from a plan. A plan is either a Stackage snapshot (nightly or LTS) or a build plan as produced by cabal . Plan files usually look like the following: hackage: { packages = { \"$pkg\".revision = hackage.$pkg.$version.revisions.default; \"$pkg\".flags = { flag1 = true; flag2 = false; ... }; ... }; compiler = { version = \"8.4.4\"; nix-name = \"ghc844\"; packages = { \"binary\" = \"0.8.5.1\"; ... }; }; } This provides enough information about the compiler, what packages the compiler ships with and the packages we want to use in our plan. This revision and flag information will be inlined into a list of packages in config.packages in modules/plan.nix . Thus config.packages will only contains packages as described in the previous section. Package Sets (of derivations) \u00b6 We finally tie this all together in package-set.nix where we use modules/component-driver.nix to produce the derivations for each packages component to produce the final config.hsPkgs value. There is also a modules/compat-driver.nix that should produce the same packageset to be used with the stock haskell infrastructure in nixpkgs ( This has undergone substantially less testing ). Component builder \u00b6 To prevent depending on multiple instances of the same libraries, the component builder will try to build every package from scratch and rely as little as possible on packages that are shipped with the GHC distribution. The exceptions are packages that are known to not be reinstallable. See config.nonReinstallablePkgs . The component builder can be found in modules/component-driver.nix and builder/default.nix . The component-driver will ensure that we do not try to rebuild non-reinstallable packages, and call the builder/default.nix on each package in config.packages to produce config.hsPkgs .","title":"Architecture"},{"location":"dev/dev-architecture.html#developer-architecture-overview","text":"This shall give a sufficiently good overview over the haskell.nix ideas, such that a new developer can navigate around without too much trouble.","title":"Developer Architecture Overview"},{"location":"dev/dev-architecture.html#packages","text":"haskell.nix is centered around packages (haskell package descriptions as nix-expressions). These are generated by cabal-to-nix from the nix-tools package. stack-to-nix and plan-to-nix will delegate the transformation of cabal packages to nix expressions to the same code that cabal-to-nix uses. These packages will look similar to the following: { system, compiler, flags, pkgs, hsPkgs, pkgconfPkgs, ... }: { flags = {}; package = { ... }; components = { \"library\" = { depends = [ ... ]; }; exes = { \"...\" = { depends = [ ... ]; }; ... }; sublibs = { \"...\" = { depends = [ ... ]; }; ... }; tests = { \"...\" = { depends = [ ... ]; }; ... }; benchmarks = { \"...\" = { depends = [ ... ]; }; ... }; }; }; The exact specification can be found in modules/package.nix .","title":"Packages"},{"location":"dev/dev-architecture.html#plans","text":"Packages (unless specified directly in the packages attribute of the module) usually come from a plan. A plan is either a Stackage snapshot (nightly or LTS) or a build plan as produced by cabal . Plan files usually look like the following: hackage: { packages = { \"$pkg\".revision = hackage.$pkg.$version.revisions.default; \"$pkg\".flags = { flag1 = true; flag2 = false; ... }; ... }; compiler = { version = \"8.4.4\"; nix-name = \"ghc844\"; packages = { \"binary\" = \"0.8.5.1\"; ... }; }; } This provides enough information about the compiler, what packages the compiler ships with and the packages we want to use in our plan. This revision and flag information will be inlined into a list of packages in config.packages in modules/plan.nix . Thus config.packages will only contains packages as described in the previous section.","title":"Plans"},{"location":"dev/dev-architecture.html#package-sets-of-derivations","text":"We finally tie this all together in package-set.nix where we use modules/component-driver.nix to produce the derivations for each packages component to produce the final config.hsPkgs value. There is also a modules/compat-driver.nix that should produce the same packageset to be used with the stock haskell infrastructure in nixpkgs ( This has undergone substantially less testing ).","title":"Package Sets (of derivations)"},{"location":"dev/dev-architecture.html#component-builder","text":"To prevent depending on multiple instances of the same libraries, the component builder will try to build every package from scratch and rely as little as possible on packages that are shipped with the GHC distribution. The exceptions are packages that are known to not be reinstallable. See config.nonReinstallablePkgs . The component builder can be found in modules/component-driver.nix and builder/default.nix . The component-driver will ensure that we do not try to rebuild non-reinstallable packages, and call the builder/default.nix on each package in config.packages to produce config.hsPkgs .","title":"Component builder"},{"location":"dev/hix.html","text":"Making changes to Hix \u00b6 When making changes to the way Hix works it is often useful to be able to test the changes locally before uploading them to github. Hix Command Wrappers \u00b6 Install the hix command wrappers after making changes to a local clone of haskell.nix: nix-env -iA hix -f /path/to/local/haskell.nix hix-shell Or override the version of haskell.nix used by the commands with the HIX_ROOT environment variable: HIX_ROOT=/path/to/local/haskell.nix hix-shell Flakes \u00b6 For flakes use --override-input to point to the modified haskell.nix: nix develop --override-input haskellNix /path/to/local/haskell.nix","title":"Making changes to Hix"},{"location":"dev/hix.html#making-changes-to-hix","text":"When making changes to the way Hix works it is often useful to be able to test the changes locally before uploading them to github.","title":"Making changes to Hix"},{"location":"dev/hix.html#hix-command-wrappers","text":"Install the hix command wrappers after making changes to a local clone of haskell.nix: nix-env -iA hix -f /path/to/local/haskell.nix hix-shell Or override the version of haskell.nix used by the commands with the HIX_ROOT environment variable: HIX_ROOT=/path/to/local/haskell.nix hix-shell","title":"Hix Command Wrappers"},{"location":"dev/hix.html#flakes","text":"For flakes use --override-input to point to the modified haskell.nix: nix develop --override-input haskellNix /path/to/local/haskell.nix","title":"Flakes"},{"location":"dev/installing-nix-tools.html","text":"Installing nix-tools \u00b6 To build the latest nix-tools and store the result at ./nt , run: nix build -f https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz pkgs.haskell-nix.nix-tools.ghc884 --out-link nt If you would like to then install nix-tools into your profile, run: nix-env -i ./nt Optional: Installing via Haskell.nix source \u00b6 The Haskell.nix and nix-tools source will be useful if you would like to contribute improvements, or read the source code to fully understand something that the documentation doesn't cover. git clone https://github.com/input-output-hk/nix-tools git clone https://github.com/input-output-hk/haskell.nix cd haskell.nix nix build -f . pkgs.haskell-nix.nix-tools.ghc884 --arg sourcesOverride '{ nix-tools = ../nix-tools; }' --out-link nt","title":"Installing nix-tools"},{"location":"dev/installing-nix-tools.html#installing-nix-tools","text":"To build the latest nix-tools and store the result at ./nt , run: nix build -f https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz pkgs.haskell-nix.nix-tools.ghc884 --out-link nt If you would like to then install nix-tools into your profile, run: nix-env -i ./nt","title":"Installing nix-tools"},{"location":"dev/installing-nix-tools.html#optional-installing-via-haskellnix-source","text":"The Haskell.nix and nix-tools source will be useful if you would like to contribute improvements, or read the source code to fully understand something that the documentation doesn't cover. git clone https://github.com/input-output-hk/nix-tools git clone https://github.com/input-output-hk/haskell.nix cd haskell.nix nix build -f . pkgs.haskell-nix.nix-tools.ghc884 --arg sourcesOverride '{ nix-tools = ../nix-tools; }' --out-link nt","title":"Optional: Installing via Haskell.nix source"},{"location":"dev/maintainer-scripts.html","text":"Updating Hackage and Stackage Nix expressions \u00b6 The hackage.nix and stackage.nix repos and corresponding files hackage-src.json and stackage-src.json will be regularly and automatically updated using scripts in this repo. To run the updater scripts manually, use: nix-build build.nix -A maintainer-scripts.update-hackage -o update-hackage.sh ./update-hackage.sh nix-build build.nix -A maintainer-scripts.update-stackage -o update-stackage.sh ./update-stackage.sh The scripts will clone the repo, generate the latest data, then attempt to push back to the repo and update the source JSON file.","title":"Maintainer Scripts"},{"location":"dev/maintainer-scripts.html#updating-hackage-and-stackage-nix-expressions","text":"The hackage.nix and stackage.nix repos and corresponding files hackage-src.json and stackage-src.json will be regularly and automatically updated using scripts in this repo. To run the updater scripts manually, use: nix-build build.nix -A maintainer-scripts.update-hackage -o update-hackage.sh ./update-hackage.sh nix-build build.nix -A maintainer-scripts.update-stackage -o update-stackage.sh ./update-stackage.sh The scripts will clone the repo, generate the latest data, then attempt to push back to the repo and update the source JSON file.","title":"Updating Hackage and Stackage Nix expressions"},{"location":"dev/manually-generating-nix-expressions.html","text":"Manually generating Nix expressions \u00b6 We believe that imports from derivations (IFDs) provide tremendous value in nix and the aversion towards them stems mostly from poor tooling and ci support for them. We do not believe that poor tooling or ci support should cripple nix capability of abstraction. Hence haskell.nix makes excessive use of IFDs. We do note however that there are users who prefer to have IFD-free expressions. For this group of users we detail how to expand the IFD dependent high level functions into their IFD free building blocks. The general structure will be the same, independent of the use of Stack or Cabal. Let us assume for now that we have already generated a pkgs.nix expression (see the links bellow). The following file then produces a package set: # default.nix let # Import the Haskell.nix library, pkgs = import <nixpkgs> (import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) {}).nixpkgsArgs; # Import the file you will create in the stack-to-nix or cabal-to-nix step. my-pkgs = import ./pkgs.nix; # Stack projects use this: pkgSet = pkgs.haskell-nix.mkStackPkgSet { stack-pkgs = my-pkgs; pkg-def-extras = [ # these extras will provide additional packages # ontop of the package set. E.g. extra-deps # for stack packages. or local packages for # cabal.projects ]; modules = [ # specific package overrides would go here # example: # packages.cbors.package.ghcOptions = \"-Werror\"; # packages.cbors.patches = [ ./one.patch ]; # packages.cbors.flags.optimize-gmp = false; # It may be better to set flags in stack.yaml instead # (`stack-to-nix` will include them as defaults). ]; }; # Cabal projects use this: pkgSet = pkgs.haskell-nix.mkCabalProjectPkgSet { plan-pkgs = my-pkgs; pkg-def-extras = []; modules = [ # specific package overrides would go here # example: # packages.cbors.package.ghcOptions = \"-Werror\"; # packages.cbors.patches = [ ./one.patch ]; # packages.cbors.flags.optimize-gmp = false; # It may be better to set flags in `cabal.project` instead # (`plan-to-nix` will include them as defaults). ]; }; in pkgSet.config.hsPkgs // { _config = pkgSet.config; } With this setup you can then start building the components of interest: nix build -f default.nix $pkg.components.library to build the library for $pkg or nix build -f default.nix $pkg.components.exes.$exe to build a specific executable. The same holds for test suites and benchmarks. Using Stack \u00b6 With nix-tools installed , we can simply run the following command on a stack project: stack-to-nix --output . --stack-yaml stack.yaml This will produce a pkgs.nix file that looks like the following: { resolver = \"lts-12.17\"; extras = hackage: { packages = { \"o-clock\" = hackage.o-clock.\"0.1.1\".revisions.default; ... } // { my-package = ./my-package.nix; ... }; }; } This file contains the stackage resolver, as well as set of extra packages. The extras specifies which extra-deps (here: o-clock-0.1.1 ) we wanted to add over the stackage snapshot, and what local packages we want (here: my-package ). Using Cabal \u00b6 Generating plan.json \u00b6 To get a plan, you need Cabal and GHC. See the How to install a compiler section of the Nixpkgs Manual for information about how to choose a specific compiler version. Cabal version The minimum Cabal version is 2.4. This version is available in the NixOS 19.03 release. For this example, we will run a nix-shell with the default GHC version for Nixpkgs. nix-shell -p haskellPackages.cabal-install haskellPackages.ghc \\ --run \"cabal new-configure\" If all goes well, you should now have the file dist-newstyle/cache/plan.json . Specifying the GHC version To use a specific compiler version, replace haskellPackages.ghc with something like haskell-nix.compiler.ghc865 . The given compiler must exist in your Nixpkgs version, of course. See also the Nixpkgs Manual . Using plan-to-nix \u00b6 With nix-tools installed , we can then run the following command on a Cabal project and its build plan. Omit the --cabal-project option if you don't have a project file. # convert the plan.json file into a pkgs.nix file plan-to-nix --output . \\ --plan-json dist-newstyle/cache/plan.json --cabal-project cabal.project This will produce a pkgs.nix file that looks like the following: { pkgs = hackage: { packages = { \"o-clock\" = hackage.o-clock.\"0.1.1\".revisions.default; ... }; compiler = { ... }; }; extras = hackage: { packages = { my-package = ./.plan.nix/my-package.nix; }; }; } It has converted Cabal's build plan into a Nix expression that selects dependencies from hackage.nix . All local packages in the project are generated with cabal-to-nix and added to the package set description.","title":"Manually generating Nix expressions"},{"location":"dev/manually-generating-nix-expressions.html#manually-generating-nix-expressions","text":"We believe that imports from derivations (IFDs) provide tremendous value in nix and the aversion towards them stems mostly from poor tooling and ci support for them. We do not believe that poor tooling or ci support should cripple nix capability of abstraction. Hence haskell.nix makes excessive use of IFDs. We do note however that there are users who prefer to have IFD-free expressions. For this group of users we detail how to expand the IFD dependent high level functions into their IFD free building blocks. The general structure will be the same, independent of the use of Stack or Cabal. Let us assume for now that we have already generated a pkgs.nix expression (see the links bellow). The following file then produces a package set: # default.nix let # Import the Haskell.nix library, pkgs = import <nixpkgs> (import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) {}).nixpkgsArgs; # Import the file you will create in the stack-to-nix or cabal-to-nix step. my-pkgs = import ./pkgs.nix; # Stack projects use this: pkgSet = pkgs.haskell-nix.mkStackPkgSet { stack-pkgs = my-pkgs; pkg-def-extras = [ # these extras will provide additional packages # ontop of the package set. E.g. extra-deps # for stack packages. or local packages for # cabal.projects ]; modules = [ # specific package overrides would go here # example: # packages.cbors.package.ghcOptions = \"-Werror\"; # packages.cbors.patches = [ ./one.patch ]; # packages.cbors.flags.optimize-gmp = false; # It may be better to set flags in stack.yaml instead # (`stack-to-nix` will include them as defaults). ]; }; # Cabal projects use this: pkgSet = pkgs.haskell-nix.mkCabalProjectPkgSet { plan-pkgs = my-pkgs; pkg-def-extras = []; modules = [ # specific package overrides would go here # example: # packages.cbors.package.ghcOptions = \"-Werror\"; # packages.cbors.patches = [ ./one.patch ]; # packages.cbors.flags.optimize-gmp = false; # It may be better to set flags in `cabal.project` instead # (`plan-to-nix` will include them as defaults). ]; }; in pkgSet.config.hsPkgs // { _config = pkgSet.config; } With this setup you can then start building the components of interest: nix build -f default.nix $pkg.components.library to build the library for $pkg or nix build -f default.nix $pkg.components.exes.$exe to build a specific executable. The same holds for test suites and benchmarks.","title":"Manually generating Nix expressions"},{"location":"dev/manually-generating-nix-expressions.html#using-stack","text":"With nix-tools installed , we can simply run the following command on a stack project: stack-to-nix --output . --stack-yaml stack.yaml This will produce a pkgs.nix file that looks like the following: { resolver = \"lts-12.17\"; extras = hackage: { packages = { \"o-clock\" = hackage.o-clock.\"0.1.1\".revisions.default; ... } // { my-package = ./my-package.nix; ... }; }; } This file contains the stackage resolver, as well as set of extra packages. The extras specifies which extra-deps (here: o-clock-0.1.1 ) we wanted to add over the stackage snapshot, and what local packages we want (here: my-package ).","title":"Using Stack"},{"location":"dev/manually-generating-nix-expressions.html#using-cabal","text":"","title":"Using Cabal"},{"location":"dev/manually-generating-nix-expressions.html#generating-planjson","text":"To get a plan, you need Cabal and GHC. See the How to install a compiler section of the Nixpkgs Manual for information about how to choose a specific compiler version. Cabal version The minimum Cabal version is 2.4. This version is available in the NixOS 19.03 release. For this example, we will run a nix-shell with the default GHC version for Nixpkgs. nix-shell -p haskellPackages.cabal-install haskellPackages.ghc \\ --run \"cabal new-configure\" If all goes well, you should now have the file dist-newstyle/cache/plan.json . Specifying the GHC version To use a specific compiler version, replace haskellPackages.ghc with something like haskell-nix.compiler.ghc865 . The given compiler must exist in your Nixpkgs version, of course. See also the Nixpkgs Manual .","title":"Generating plan.json"},{"location":"dev/manually-generating-nix-expressions.html#using-plan-to-nix","text":"With nix-tools installed , we can then run the following command on a Cabal project and its build plan. Omit the --cabal-project option if you don't have a project file. # convert the plan.json file into a pkgs.nix file plan-to-nix --output . \\ --plan-json dist-newstyle/cache/plan.json --cabal-project cabal.project This will produce a pkgs.nix file that looks like the following: { pkgs = hackage: { packages = { \"o-clock\" = hackage.o-clock.\"0.1.1\".revisions.default; ... }; compiler = { ... }; }; extras = hackage: { packages = { my-package = ./.plan.nix/my-package.nix; }; }; } It has converted Cabal's build plan into a Nix expression that selects dependencies from hackage.nix . All local packages in the project are generated with cabal-to-nix and added to the package set description.","title":"Using plan-to-nix"},{"location":"dev/nix-tools-pin.html","text":"How to update nix-tools \u00b6 Use niv to update the sources.json: niv update nix-tools If nix-tools.cabal or plan-to-nix have changed, check the materialized files for each of the compiler nix name in ls -d materialized/ghc*/nix-tools with: nix-build scripts/check-compiler-materialization --argstr compiler-nix-name ghc884","title":"Nix tools pin"},{"location":"dev/nix-tools-pin.html#how-to-update-nix-tools","text":"Use niv to update the sources.json: niv update nix-tools If nix-tools.cabal or plan-to-nix have changed, check the materialized files for each of the compiler nix name in ls -d materialized/ghc*/nix-tools with: nix-build scripts/check-compiler-materialization --argstr compiler-nix-name ghc884","title":"How to update nix-tools"},{"location":"dev/nixpkgs-pin.html","text":"Haskell.nix Nixpkgs Pin \u00b6 Haskell.nix contains several Nixpkgs pins imanaged by niv in nix/sources.json . These are used in testing various versions of nixpkgs. To use haskell.nix the config and overlays need to be applied to Nixpkgs. Users should probably pin a suitable version of nixpkgs, although things might not work for them if their Nixpkgs version is too different. We aim to keep this pin somewhere on a channel of the Nixpkgs latest stable release . That is currently 20.09. We also execute tests on MacOS (darwin). The darwin channel is usually behind the NixOS channel. So we follow the nixpkgs-20.09-darwin channel.","title":"Nixpkgs Pin"},{"location":"dev/nixpkgs-pin.html#haskellnix-nixpkgs-pin","text":"Haskell.nix contains several Nixpkgs pins imanaged by niv in nix/sources.json . These are used in testing various versions of nixpkgs. To use haskell.nix the config and overlays need to be applied to Nixpkgs. Users should probably pin a suitable version of nixpkgs, although things might not work for them if their Nixpkgs version is too different. We aim to keep this pin somewhere on a channel of the Nixpkgs latest stable release . That is currently 20.09. We also execute tests on MacOS (darwin). The darwin channel is usually behind the NixOS channel. So we follow the nixpkgs-20.09-darwin channel.","title":"Haskell.nix Nixpkgs Pin"},{"location":"dev/removing-with-package-wrapper.html","text":"ghcWithPackages wrapper removal \u00b6 The current Nixpkgs Haskell infrastructure and haskell.nix both provide a ghcWithPackages derivation which contains shell script wrappers that wrap ghc and ghc-pkg . In the Nixpkgs Haskell infrastructure, the wrapper scripts are used for building Haskell packages. However, in haskell.nix , the wrappers are only used for development environments. The wrapper scripts provide a ghc command that \"knows\" about the package set and has all Haskell package dependencies available to it. We would like to remove the wrapper scripts, but it's currently not possible to configure all build tools using environment variables alone. Plain ghc \u00b6 When using ghc or ghci by itself, the GHC_ENVIRONMENT variable can point to a configuration file containing an exact package set. This works quite well. ghc-pkg \u00b6 The package tool ghc-pkg does not recognize GHC_ENVIRONMENT , but does recognize a GHC_PACKAGE_PATH pointing to a package.conf.d . This works well. However, the cabal command will refuse to start if GHC_PACKAGE_PATH is set. Setup.hs \u00b6 When invoking Setup.hs configure , the package database is provided with the --package-db argument and exact dependencies in the package set can be provided as --dependency arguments. The haskell.nix component builder uses Setup.hs with these command-line options to build Haskell packages. cabal new-build \u00b6 Cabal-install will observe the CABAL_CONFIG environment variable, which points to a cabal config file. This config file can provide a package-db value, but it can't specify exact versions of packages. Cabal is designed to solve dependencies, not simply take the package set which is given to it. Therefore, cabal does not use GHC_ENVIRONMENT , but instead creates its own environment file. It will not accept --dependency arguments. As far as I know, the best way to force cabal to take a pre-computed package set is to use a new-freeze file. However there is no environment variable (or config file entry) which can specify a path to a freeze file. Specifying a package-db path in the cabal config file is not enough for it to successfully resolve dependencies. As mentioned before, cabal does not work when GHC_PACKAGE_PATH is set. The best way to work around this is to wrap ghc and ghc-pkg in shell scripts.","title":"Removing withPackage wrapper"},{"location":"dev/removing-with-package-wrapper.html#ghcwithpackages-wrapper-removal","text":"The current Nixpkgs Haskell infrastructure and haskell.nix both provide a ghcWithPackages derivation which contains shell script wrappers that wrap ghc and ghc-pkg . In the Nixpkgs Haskell infrastructure, the wrapper scripts are used for building Haskell packages. However, in haskell.nix , the wrappers are only used for development environments. The wrapper scripts provide a ghc command that \"knows\" about the package set and has all Haskell package dependencies available to it. We would like to remove the wrapper scripts, but it's currently not possible to configure all build tools using environment variables alone.","title":"ghcWithPackages wrapper removal"},{"location":"dev/removing-with-package-wrapper.html#plain-ghc","text":"When using ghc or ghci by itself, the GHC_ENVIRONMENT variable can point to a configuration file containing an exact package set. This works quite well.","title":"Plain ghc"},{"location":"dev/removing-with-package-wrapper.html#ghc-pkg","text":"The package tool ghc-pkg does not recognize GHC_ENVIRONMENT , but does recognize a GHC_PACKAGE_PATH pointing to a package.conf.d . This works well. However, the cabal command will refuse to start if GHC_PACKAGE_PATH is set.","title":"ghc-pkg"},{"location":"dev/removing-with-package-wrapper.html#setuphs","text":"When invoking Setup.hs configure , the package database is provided with the --package-db argument and exact dependencies in the package set can be provided as --dependency arguments. The haskell.nix component builder uses Setup.hs with these command-line options to build Haskell packages.","title":"Setup.hs"},{"location":"dev/removing-with-package-wrapper.html#cabal-new-build","text":"Cabal-install will observe the CABAL_CONFIG environment variable, which points to a cabal config file. This config file can provide a package-db value, but it can't specify exact versions of packages. Cabal is designed to solve dependencies, not simply take the package set which is given to it. Therefore, cabal does not use GHC_ENVIRONMENT , but instead creates its own environment file. It will not accept --dependency arguments. As far as I know, the best way to force cabal to take a pre-computed package set is to use a new-freeze file. However there is no environment variable (or config file entry) which can specify a path to a freeze file. Specifying a package-db path in the cabal config file is not enough for it to successfully resolve dependencies. As mentioned before, cabal does not work when GHC_PACKAGE_PATH is set. The best way to work around this is to wrap ghc and ghc-pkg in shell scripts.","title":"cabal new-build"},{"location":"dev/tests.html","text":"Haskell infrastructure test cases \u00b6 To build the test cases, run from the test directory: nix-build --no-out-link default.nix To run all tests (includes impure tests), use the script: ./tests.sh Generated code \u00b6 If you change the test Cabal files or need to regenerate the code with nix-tools, then see regen.nix . Run it like this: $(nix-build --no-out-link regen.nix)","title":"Test Suite"},{"location":"dev/tests.html#haskell-infrastructure-test-cases","text":"To build the test cases, run from the test directory: nix-build --no-out-link default.nix To run all tests (includes impure tests), use the script: ./tests.sh","title":"Haskell infrastructure test cases"},{"location":"dev/tests.html#generated-code","text":"If you change the test Cabal files or need to regenerate the code with nix-tools, then see regen.nix . Run it like this: $(nix-build --no-out-link regen.nix)","title":"Generated code"},{"location":"reference/commands.html","text":"Command line tools \u00b6 To install the command line tools refer to the Installing nix-tools section. stack-to-nix \u00b6 stack-to-nix - a stack to nix converter Usage: stack-to-nix (-o|--output DIR) [--stack-yaml FILE] [--ignore-package-yaml] [--cache FILE] Generate a Nix expression for a Haskell package using Stack Available options: -o,--output DIR Generate output in DIR --stack-yaml FILE Override project stack.yaml (default: \"stack.yaml\") --ignore-package-yaml disable hpack run and use only cabal disregarding package.yaml existence --cache FILE Dependency cache file (default: \".stack-to-nix.cache\") -h,--help Show this help text Use this for stack projects. If a default.nix does not exist in the output directory, it will create a basic one with a mkStackPkgSet function. Note If you find that there are missing files which should have been generated, remove .stack-to-nix.cache (The open issue is #57 ). plan-to-nix \u00b6 plan-to-nix - a stack to nix converter Usage: plan-to-nix (-o|--output DIR) [--plan-json FILE] [--cabal-project FILE] [--cache FILE] Generate a Nix expression for a Haskell package using Cabal Available options: -o,--output DIR Generate output in DIR --plan-json FILE Override plan.json location (default: \"dist-newstyle/cache/plan.json\") --cabal-project FILE Override path to cabal.project (default: \"cabal.project\") --cache FILE Dependency cache file (default: \".nix-tools.cache\") -h,--help Show this help text Use this for Cabal new-build projects (even if you don't have a cabal.project ). Before running, you need to create a plan. For more information, see Cabal Projects in the user guide. It will create a template default.nix in the output directory, unless that file already exists. Inside the output directory, there will be another directory .plan.nix , which contains Nix expressions for all local packages, generated by cabal-to-nix . The output file pkgs.nix refers to these files. Note If you find that there are missing files which should have been generated, remove .nix-tools.cache (The open issue is #57 ). cabal-to-nix \u00b6 Usage: cabal-to-nix FILE.cabal This writes (to stdout) a Haskell.nix Nix expression for the given cabal package. Normally, you do not need to run cabal-to-nix yourself. It is called by stack-to-nix and plan-to-nix .","title":"Command-line tools"},{"location":"reference/commands.html#command-line-tools","text":"To install the command line tools refer to the Installing nix-tools section.","title":"Command line tools"},{"location":"reference/commands.html#stack-to-nix","text":"stack-to-nix - a stack to nix converter Usage: stack-to-nix (-o|--output DIR) [--stack-yaml FILE] [--ignore-package-yaml] [--cache FILE] Generate a Nix expression for a Haskell package using Stack Available options: -o,--output DIR Generate output in DIR --stack-yaml FILE Override project stack.yaml (default: \"stack.yaml\") --ignore-package-yaml disable hpack run and use only cabal disregarding package.yaml existence --cache FILE Dependency cache file (default: \".stack-to-nix.cache\") -h,--help Show this help text Use this for stack projects. If a default.nix does not exist in the output directory, it will create a basic one with a mkStackPkgSet function. Note If you find that there are missing files which should have been generated, remove .stack-to-nix.cache (The open issue is #57 ).","title":"stack-to-nix"},{"location":"reference/commands.html#plan-to-nix","text":"plan-to-nix - a stack to nix converter Usage: plan-to-nix (-o|--output DIR) [--plan-json FILE] [--cabal-project FILE] [--cache FILE] Generate a Nix expression for a Haskell package using Cabal Available options: -o,--output DIR Generate output in DIR --plan-json FILE Override plan.json location (default: \"dist-newstyle/cache/plan.json\") --cabal-project FILE Override path to cabal.project (default: \"cabal.project\") --cache FILE Dependency cache file (default: \".nix-tools.cache\") -h,--help Show this help text Use this for Cabal new-build projects (even if you don't have a cabal.project ). Before running, you need to create a plan. For more information, see Cabal Projects in the user guide. It will create a template default.nix in the output directory, unless that file already exists. Inside the output directory, there will be another directory .plan.nix , which contains Nix expressions for all local packages, generated by cabal-to-nix . The output file pkgs.nix refers to these files. Note If you find that there are missing files which should have been generated, remove .nix-tools.cache (The open issue is #57 ).","title":"plan-to-nix"},{"location":"reference/commands.html#cabal-to-nix","text":"Usage: cabal-to-nix FILE.cabal This writes (to stdout) a Haskell.nix Nix expression for the given cabal package. Normally, you do not need to run cabal-to-nix yourself. It is called by stack-to-nix and plan-to-nix .","title":"cabal-to-nix"},{"location":"reference/library.html","text":"Haskell.nix contains a library of functions for creating buildable package sets from their Nix expression descriptions. The library is what you get when importing Haskell.nix . It might be helpful to load the library in the Nix REPL to test things. Data structures \u2014 the kinds of data that you will encounter working with Haskell.nix . Top-level attributes \u2014 Functions and derivations defined in the Haskell.nix attrset. Package-set functions \u2014 Helper functions defined on the hsPkgs package set. Data structures \u00b6 Package Set \u00b6 The result of mkPkgSet . This is an application of the NixOS module system. { options = { ... }; config = { hsPkgs = { ... }; packages = { ... }; compiler = { version = \"X.Y.Z\"; nix-name = \"ghcXYZ\"; packages = { ... }; }; }; } Attribute Type Description options Module options The combination of all options set through the modules argument passed to mkPkgsSet . config The result of evaluating and applying the options with Haskell.nix .hsPkgs Attrset of Haskell Packages Buildable packages, created from packages .packages Attrset of Haskell Package descriptions Configuration for each package in hsPkgs .compiler Attrset Haskell Package description \u00b6 The Haskell package descriptions are values of the pkgSet.config.packages attrset. These are not derivations, but just the configuration for building an individual package. The configuration options are described under packages.<name> in Module options . Component description \u00b6 The component descriptions are values of the pkgSet.config.packages.<package>.components attrset. These are not derivations, but just the configuration for building an individual component. The configuration options are described under packages.<name>.components.* in Module options . Haskell Package \u00b6 In Haskell.nix , a Haskell package is a derivation which has a components attribute. This derivation is actually just for the package Setup.hs script, and isn't very interesting. To actually use the package, look within the components structure. components = { library = COMPONENT; exes = { NAME = COMPONENT; }; tests = { NAME = COMPONENT; }; benchmarks = { NAME = COMPONENT; }; } Component \u00b6 In Haskell.nix , a component is a derivation corresponding to a Cabal component of a package. Identifier \u00b6 A package identifier is an attrset pair of name and version . Extras \u00b6 Extras allow adding more packages to the package set. These will be functions taking a single parameter hackage . They should return an attrset of package descriptions. Modules \u00b6 Modules are the primary method of configuring building of the package set. They are either: an attrset containing option declarations , or a function that returns an attrset containing option declarations. If using the function form of a module, the following named parameters will be passed to it: Argument Type Description haskellLib attrset The haskellLib utility functions. pkgs The Nixpkgs collection. pkgconfPkgs A mapping of cabal build-depends names to Nixpkgs packages. (TODO: more information about this) buildModules config options Top-level attributes \u00b6 project' \u00b6 Function that accepts attribute set with a src attribute and looks for stack.yaml file relative to it. If file exists, it calls stackProject function. Example : pkgs.haskell-nix.project' { # 'cleanGit' cleans a source directory based on the files known by git src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; } stackProject' \u00b6 A function calling callStackToNix with all arguments. Then feeding its result into mkStackPkgSet passing also pkg-def-extras and modules arguments. Return value : Attribute Type Description hsPkgs Attrset of Haskell Packages Buildable packages, created from packages stack-nix projectNix attribute of callStackToNix return value shellFor Function shellFor ghcWithHoogle Function ghcWithHoogle ghcWithPackages Function ghcWithPackages cabalProject' \u00b6 A function calling callCabalProjectToNix with all arguments. Then feeding its result into mkCabalProjectPkgSet passing also pkg-def-extras , extra-hackages and modules arguments. Return value : Attribute Type Description hsPkgs Attrset of Haskell Packages Buildable packages, created from packages plan-nix projectNix attribute of callCabalProjectToNix return value index-state index-state attribute of callCabalProjectToNix return value shellFor Function shellFor ghcWithHoogle Function ghcWithHoogle ghcWithPackages Function ghcWithPackages projectCross Attrset Like pkgs.pkgsCross.<system> from nixpkgs p.projectCross.<system> returns the project results for cross compilation (where system is a member of nixpkgs lib.systems.examples). So p.projectCross.ghcjs.hsPkgs is the same as hsPkgs but compiled with ghcjs appendModule Function Re-eval the project with an extra module (or module list). extend and appendOverlays Function Modify a project, or add attributes, through overlays: p.extend(final: prev: { }) . The overlays are carried-over projectCross and appendModule invocations. project, cabalProject and stackProject \u00b6 These versions of the function are the same as project', cabalProject' and stackProject', but hsPkgs attributes are also included in the return value directly. That way a package can be referenced as (project {...}).foo instead of (project' {...}).hsPkgs.foo . mkStackPkgSet \u00b6 Creates a package set based on the pkgs.nix output of stack-to-nix . mkStackPkgSet = { stack-pkgs, pkg-def-extras ? [], modules ? []}: ... Argument Type Description stack-pkgs import ./pkgs.nix \u2014 The imported file generated by stack\u2011to\u2011nix . pkg\u2011def\u2011extras List of Extras For overriding the package set. modules List of Modules For overriding the package set. Return value : a pkgSet mkCabalProjectPkgSet \u00b6 Creates a package set based on the pkgs.nix output of plan-to-nix . mkCabalProjectPkgSet = { plan-pkgs, pkg-def-extras ? [], modules ? []}: ... Argument Type Description plan-pkgs import ./pkgs.nix \u2014 The imported file generated by plan\u2011to\u2011nix . pkg\u2011def\u2011extras List of Extras For overriding the package set. modules List of Modules For overriding the package set. Return value : a pkgSet mkPkgSet \u00b6 This is the base function used by both mkStackPkgSet and mkCabalProjectPkgSet . Return value : a pkgSet snapshots \u00b6 This is an attrset of hsPkgs packages from Stackage. haskellPackages \u00b6 A hsPkgs package set, which is one of the recent LTS Haskell releases from snapshots . The chosen LTS is updated occasionally in Haskell.nix , though a manual process. nix-tools \u00b6 A derivation containing the nix-tools command-line tools . callStackToNix \u00b6 Runs stack-to-nix and produces the output needed for importAndFilterProject . Example : pkgSet = mkStackPkgSet { stack-pkgs = (importAndFilterProject (callStackToNix { src = ./.; })).pkgs; pkg-def-extras = []; modules = []; }; callCabalProjectToNix \u00b6 Runs cabal new-configure and plan-to-nix and produces the output needed for importAndFilterProject . Example : pkgSet = mkCabalProjectPkgSet { plan-pkgs = (importAndFilterProject (callCabalProjectToNix { index-state = \"2019-04-30T00:00:00Z\"; src = ./.; })).pkgs; Argument Type Description name String Optional name for better error messages. src Path Location of the cabal project files. compiler-nix-name String The name of the ghc compiler to use eg. \"ghc884\" index-state Timestamp Optional hackage index-state, eg. \"2019-10-10T00:00:00Z\". index-sha256 Sha256 Optional hash of the truncated hackage index-state. plan-sha256 Sha256 Optional hash of the plan-to-nix output (makes the plan-to-nix step a fixed output derivation). cabalProject String Optional cabal project file contents (defaults to readFile \"${src}/cabal.project\"). cabalProjectLocal String Optional cabal project file contents (defaults to readFile \"${src}/cabal.project.local\"). cabalProjectFreeze String Optional cabal project file contents (defaults to readFile \"${src}/cabal.project.freeze\"). ghc Deprecated. Use compiler-nix-name instead. Optional ghc to use nix-tools Optional nix-tools to use hpack Optional hpack to use cabal-install Optional cabal-install to use configureArgs String Optional extra arguments to pass to cabal new-configure (--enable-tests is included by default, include --disable-tests to override that). importAndFilterProject \u00b6 Imports from a derivation created by callStackToNix or callCabalProjectToNix . The result is an attrset with the following values: Attribute Type Description pkgs attrset that can be passed to mkStackPkgSet (as stack-pkgs ) or mkCabalProjectPkgSet (as plan-pkgs ). nix this can be built and cached so that the amount built in the evaluation phase is not too great (helps to avoid timeouts on Hydra). hackage \u00b6 stackage \u00b6 fetchExternal \u00b6 cleanSourceHaskell \u00b6 cleanSourceHaskell = { src, name ? null }: ... Filters a source tree removing common filenames that are not Haskell build sources. This can avoid unecessary rebuilds when these files change. It's recommended to provide name so that the source derivation remains constant regardless of how it was fetched. Example: src = pkgs.haskell-nix.cleanSourceHaskell { src = ./.; name = \"myproject-src\"; }; haskellSourceFilter \u00b6 haskellSourceFilter = name: type: ... This is a source filter function which cleans common build products and files not needed to do a Haskell build from a source directory. It should be used with pkgs.lib.cleanSourceWith . Alternatively, use the convenience function cleanSourceHaskell . haskellLib \u00b6 Assorted functions for operating on Haskell.nix data. This is distinct from pkgs.haskell.lib in the current Nixpkgs Haskell Infrastructure. collectComponents, collectComponents' \u00b6 Extracts a selection of components from a Haskell package set . This can be used to filter out all test suites or benchmarks of your project, so that they can be built in Hydra (see check if you want to run the tests as well as build them). collectComponents' is an alias of collectComponents without predicate for filtering. collectComponents = group: packageSel: haskellPackages: ... collectComponents' = group: collectComponents (_: true) Argument Type Description group String A sub-component type . packageSel A function Package -> Bool A predicate to filter packages with. haskellPackages Package set All packages in the build. Return value : a recursive attrset mapping package names \u2192 component names \u2192 components. Example : tests = collectComponents \"tests\" (package: package.identifier.name == \"mypackage\") hsPkgs; Will result in moving derivations from hsPkgs.mypackage.components.tests.unit-tests to tests.mypackage.unit-tests . collectChecks, collectChecks' \u00b6 These are just like collectComponents and collectComponents' , except that they collect the checks attributes of packages (which aren't components, and so can't be collected by the other functions. check \u00b6 This function turns a derivation that builds a test into one to run it. Argument Type Description drv Derivation One of $pkg.components.tests.$test . For convenience $pkg.components.tests are mapped with this function to $pkg.checks . This function is intended for use with tests but it should also work for exes and benchmarks if you just want to run them to make sure they execute. subComponentTypes \u00b6 Sub-component types identify components and are one of: sublibs foreignlibs exes tests benchmarks Project functions \u00b6 These functions are included in the project return values. In the past they also existed within project.hsPkgs , but have now been removed from there. shellFor \u00b6 Create a nix-shell development environment for developing one or more packages with ghci or cabal v2-build (but not Stack). shellFor = { packages, withHoogle ? true, exactDeps ? false, ...}: ... Argument Type Description packages Function Package selection function. It takes a list of Haskell packages and returns a subset of these packages. components Function Similar to packages , by default all the components of the selected packages are selected. additional Function Similar to packages , but the selected packages are built and included in ghc-pkg list (not just their dependencies). withHoogle Boolean Whether to build a Hoogle documentation index and provide the hoogle command. exactDeps Boolean Prevents the Cabal solver from choosing any package dependency other than what are in the package set. tools Function AttrSet of tools to make available e.g. { cabal = \"3.2.0.0\"; } or { cabal = { version = \"3.2.0.0\"; }; } . If an AttrSet is provided for a tool, the additional arguments will be passed to the function creating the derivation for that tool. So you can provide an index-state or a materialized argument like that { cabal = { version = \"3.2.0.0\"; index-state = \"2020-10-30T00:00:00Z\"; materialized = ./cabal.materialized; }; } for example. You can specify and materialize the version of hoogle used to construct the hoogle index by including something like { hoogle = { version = \"5.0.17.15\"; index-state = \"2020-05-31T00:00:00Z\"; materialized = ./hoogle.materialized; } . Uses a default version of hoogle if omitted. inputsFrom List List of other shells to include in this one. The buildInputs and nativeBuildInputs of each will be included using mkShell . crossPlatforms Function Platform selection function for cross compilation targets to support eg. ps: with ps; [ghcjs mingwW64] (see nixpkgs lib.systems.examples for list of platform names). { ... } Attrset All the other arguments are passed to mkDerivation . Return value : a derivation Warning exactDeps = true will set the CABAL_CONFIG environment variable to disable remote package servers. This is a known limitation which we would like to solve. Use exactDeps = false if this is a problem. ghcWithPackages \u00b6 Creates a nix-shell development environment including the given packages selected from this package set. Parameter : a package selection function. Return value : a derivation Example : haskell.haskellPackages.ghcWithPackages (ps: with ps; [ lens conduit ]) ghcWithHoogle \u00b6 The same as ghcWithPackages , except, a hoogle command with a Hoogle documentation index of the packages will be included in the shell.","title":"Haskell.nix Library"},{"location":"reference/library.html#data-structures","text":"","title":"Data structures"},{"location":"reference/library.html#package-set","text":"The result of mkPkgSet . This is an application of the NixOS module system. { options = { ... }; config = { hsPkgs = { ... }; packages = { ... }; compiler = { version = \"X.Y.Z\"; nix-name = \"ghcXYZ\"; packages = { ... }; }; }; } Attribute Type Description options Module options The combination of all options set through the modules argument passed to mkPkgsSet . config The result of evaluating and applying the options with Haskell.nix .hsPkgs Attrset of Haskell Packages Buildable packages, created from packages .packages Attrset of Haskell Package descriptions Configuration for each package in hsPkgs .compiler Attrset","title":"Package Set"},{"location":"reference/library.html#haskell-package-description","text":"The Haskell package descriptions are values of the pkgSet.config.packages attrset. These are not derivations, but just the configuration for building an individual package. The configuration options are described under packages.<name> in Module options .","title":"Haskell Package description"},{"location":"reference/library.html#component-description","text":"The component descriptions are values of the pkgSet.config.packages.<package>.components attrset. These are not derivations, but just the configuration for building an individual component. The configuration options are described under packages.<name>.components.* in Module options .","title":"Component description"},{"location":"reference/library.html#haskell-package","text":"In Haskell.nix , a Haskell package is a derivation which has a components attribute. This derivation is actually just for the package Setup.hs script, and isn't very interesting. To actually use the package, look within the components structure. components = { library = COMPONENT; exes = { NAME = COMPONENT; }; tests = { NAME = COMPONENT; }; benchmarks = { NAME = COMPONENT; }; }","title":"Haskell Package"},{"location":"reference/library.html#component","text":"In Haskell.nix , a component is a derivation corresponding to a Cabal component of a package.","title":"Component"},{"location":"reference/library.html#identifier","text":"A package identifier is an attrset pair of name and version .","title":"Identifier"},{"location":"reference/library.html#extras","text":"Extras allow adding more packages to the package set. These will be functions taking a single parameter hackage . They should return an attrset of package descriptions.","title":"Extras"},{"location":"reference/library.html#modules","text":"Modules are the primary method of configuring building of the package set. They are either: an attrset containing option declarations , or a function that returns an attrset containing option declarations. If using the function form of a module, the following named parameters will be passed to it: Argument Type Description haskellLib attrset The haskellLib utility functions. pkgs The Nixpkgs collection. pkgconfPkgs A mapping of cabal build-depends names to Nixpkgs packages. (TODO: more information about this) buildModules config options","title":"Modules"},{"location":"reference/library.html#top-level-attributes","text":"","title":"Top-level attributes"},{"location":"reference/library.html#project","text":"Function that accepts attribute set with a src attribute and looks for stack.yaml file relative to it. If file exists, it calls stackProject function. Example : pkgs.haskell-nix.project' { # 'cleanGit' cleans a source directory based on the files known by git src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; }","title":"project'"},{"location":"reference/library.html#stackproject","text":"A function calling callStackToNix with all arguments. Then feeding its result into mkStackPkgSet passing also pkg-def-extras and modules arguments. Return value : Attribute Type Description hsPkgs Attrset of Haskell Packages Buildable packages, created from packages stack-nix projectNix attribute of callStackToNix return value shellFor Function shellFor ghcWithHoogle Function ghcWithHoogle ghcWithPackages Function ghcWithPackages","title":"stackProject'"},{"location":"reference/library.html#cabalproject","text":"A function calling callCabalProjectToNix with all arguments. Then feeding its result into mkCabalProjectPkgSet passing also pkg-def-extras , extra-hackages and modules arguments. Return value : Attribute Type Description hsPkgs Attrset of Haskell Packages Buildable packages, created from packages plan-nix projectNix attribute of callCabalProjectToNix return value index-state index-state attribute of callCabalProjectToNix return value shellFor Function shellFor ghcWithHoogle Function ghcWithHoogle ghcWithPackages Function ghcWithPackages projectCross Attrset Like pkgs.pkgsCross.<system> from nixpkgs p.projectCross.<system> returns the project results for cross compilation (where system is a member of nixpkgs lib.systems.examples). So p.projectCross.ghcjs.hsPkgs is the same as hsPkgs but compiled with ghcjs appendModule Function Re-eval the project with an extra module (or module list). extend and appendOverlays Function Modify a project, or add attributes, through overlays: p.extend(final: prev: { }) . The overlays are carried-over projectCross and appendModule invocations.","title":"cabalProject'"},{"location":"reference/library.html#project-cabalproject-and-stackproject","text":"These versions of the function are the same as project', cabalProject' and stackProject', but hsPkgs attributes are also included in the return value directly. That way a package can be referenced as (project {...}).foo instead of (project' {...}).hsPkgs.foo .","title":"project, cabalProject and stackProject"},{"location":"reference/library.html#mkstackpkgset","text":"Creates a package set based on the pkgs.nix output of stack-to-nix . mkStackPkgSet = { stack-pkgs, pkg-def-extras ? [], modules ? []}: ... Argument Type Description stack-pkgs import ./pkgs.nix \u2014 The imported file generated by stack\u2011to\u2011nix . pkg\u2011def\u2011extras List of Extras For overriding the package set. modules List of Modules For overriding the package set. Return value : a pkgSet","title":"mkStackPkgSet"},{"location":"reference/library.html#mkcabalprojectpkgset","text":"Creates a package set based on the pkgs.nix output of plan-to-nix . mkCabalProjectPkgSet = { plan-pkgs, pkg-def-extras ? [], modules ? []}: ... Argument Type Description plan-pkgs import ./pkgs.nix \u2014 The imported file generated by plan\u2011to\u2011nix . pkg\u2011def\u2011extras List of Extras For overriding the package set. modules List of Modules For overriding the package set. Return value : a pkgSet","title":"mkCabalProjectPkgSet"},{"location":"reference/library.html#mkpkgset","text":"This is the base function used by both mkStackPkgSet and mkCabalProjectPkgSet . Return value : a pkgSet","title":"mkPkgSet"},{"location":"reference/library.html#snapshots","text":"This is an attrset of hsPkgs packages from Stackage.","title":"snapshots"},{"location":"reference/library.html#haskellpackages","text":"A hsPkgs package set, which is one of the recent LTS Haskell releases from snapshots . The chosen LTS is updated occasionally in Haskell.nix , though a manual process.","title":"haskellPackages"},{"location":"reference/library.html#nix-tools","text":"A derivation containing the nix-tools command-line tools .","title":"nix-tools"},{"location":"reference/library.html#callstacktonix","text":"Runs stack-to-nix and produces the output needed for importAndFilterProject . Example : pkgSet = mkStackPkgSet { stack-pkgs = (importAndFilterProject (callStackToNix { src = ./.; })).pkgs; pkg-def-extras = []; modules = []; };","title":"callStackToNix"},{"location":"reference/library.html#callcabalprojecttonix","text":"Runs cabal new-configure and plan-to-nix and produces the output needed for importAndFilterProject . Example : pkgSet = mkCabalProjectPkgSet { plan-pkgs = (importAndFilterProject (callCabalProjectToNix { index-state = \"2019-04-30T00:00:00Z\"; src = ./.; })).pkgs; Argument Type Description name String Optional name for better error messages. src Path Location of the cabal project files. compiler-nix-name String The name of the ghc compiler to use eg. \"ghc884\" index-state Timestamp Optional hackage index-state, eg. \"2019-10-10T00:00:00Z\". index-sha256 Sha256 Optional hash of the truncated hackage index-state. plan-sha256 Sha256 Optional hash of the plan-to-nix output (makes the plan-to-nix step a fixed output derivation). cabalProject String Optional cabal project file contents (defaults to readFile \"${src}/cabal.project\"). cabalProjectLocal String Optional cabal project file contents (defaults to readFile \"${src}/cabal.project.local\"). cabalProjectFreeze String Optional cabal project file contents (defaults to readFile \"${src}/cabal.project.freeze\"). ghc Deprecated. Use compiler-nix-name instead. Optional ghc to use nix-tools Optional nix-tools to use hpack Optional hpack to use cabal-install Optional cabal-install to use configureArgs String Optional extra arguments to pass to cabal new-configure (--enable-tests is included by default, include --disable-tests to override that).","title":"callCabalProjectToNix"},{"location":"reference/library.html#importandfilterproject","text":"Imports from a derivation created by callStackToNix or callCabalProjectToNix . The result is an attrset with the following values: Attribute Type Description pkgs attrset that can be passed to mkStackPkgSet (as stack-pkgs ) or mkCabalProjectPkgSet (as plan-pkgs ). nix this can be built and cached so that the amount built in the evaluation phase is not too great (helps to avoid timeouts on Hydra).","title":"importAndFilterProject"},{"location":"reference/library.html#hackage","text":"","title":"hackage"},{"location":"reference/library.html#stackage","text":"","title":"stackage"},{"location":"reference/library.html#fetchexternal","text":"","title":"fetchExternal"},{"location":"reference/library.html#cleansourcehaskell","text":"cleanSourceHaskell = { src, name ? null }: ... Filters a source tree removing common filenames that are not Haskell build sources. This can avoid unecessary rebuilds when these files change. It's recommended to provide name so that the source derivation remains constant regardless of how it was fetched. Example: src = pkgs.haskell-nix.cleanSourceHaskell { src = ./.; name = \"myproject-src\"; };","title":"cleanSourceHaskell"},{"location":"reference/library.html#haskellsourcefilter","text":"haskellSourceFilter = name: type: ... This is a source filter function which cleans common build products and files not needed to do a Haskell build from a source directory. It should be used with pkgs.lib.cleanSourceWith . Alternatively, use the convenience function cleanSourceHaskell .","title":"haskellSourceFilter"},{"location":"reference/library.html#haskelllib","text":"Assorted functions for operating on Haskell.nix data. This is distinct from pkgs.haskell.lib in the current Nixpkgs Haskell Infrastructure.","title":"haskellLib"},{"location":"reference/library.html#collectcomponents-collectcomponents","text":"Extracts a selection of components from a Haskell package set . This can be used to filter out all test suites or benchmarks of your project, so that they can be built in Hydra (see check if you want to run the tests as well as build them). collectComponents' is an alias of collectComponents without predicate for filtering. collectComponents = group: packageSel: haskellPackages: ... collectComponents' = group: collectComponents (_: true) Argument Type Description group String A sub-component type . packageSel A function Package -> Bool A predicate to filter packages with. haskellPackages Package set All packages in the build. Return value : a recursive attrset mapping package names \u2192 component names \u2192 components. Example : tests = collectComponents \"tests\" (package: package.identifier.name == \"mypackage\") hsPkgs; Will result in moving derivations from hsPkgs.mypackage.components.tests.unit-tests to tests.mypackage.unit-tests .","title":"collectComponents, collectComponents'"},{"location":"reference/library.html#collectchecks-collectchecks","text":"These are just like collectComponents and collectComponents' , except that they collect the checks attributes of packages (which aren't components, and so can't be collected by the other functions.","title":"collectChecks, collectChecks'"},{"location":"reference/library.html#check","text":"This function turns a derivation that builds a test into one to run it. Argument Type Description drv Derivation One of $pkg.components.tests.$test . For convenience $pkg.components.tests are mapped with this function to $pkg.checks . This function is intended for use with tests but it should also work for exes and benchmarks if you just want to run them to make sure they execute.","title":"check"},{"location":"reference/library.html#subcomponenttypes","text":"Sub-component types identify components and are one of: sublibs foreignlibs exes tests benchmarks","title":"subComponentTypes"},{"location":"reference/library.html#project-functions","text":"These functions are included in the project return values. In the past they also existed within project.hsPkgs , but have now been removed from there.","title":"Project functions"},{"location":"reference/library.html#shellfor","text":"Create a nix-shell development environment for developing one or more packages with ghci or cabal v2-build (but not Stack). shellFor = { packages, withHoogle ? true, exactDeps ? false, ...}: ... Argument Type Description packages Function Package selection function. It takes a list of Haskell packages and returns a subset of these packages. components Function Similar to packages , by default all the components of the selected packages are selected. additional Function Similar to packages , but the selected packages are built and included in ghc-pkg list (not just their dependencies). withHoogle Boolean Whether to build a Hoogle documentation index and provide the hoogle command. exactDeps Boolean Prevents the Cabal solver from choosing any package dependency other than what are in the package set. tools Function AttrSet of tools to make available e.g. { cabal = \"3.2.0.0\"; } or { cabal = { version = \"3.2.0.0\"; }; } . If an AttrSet is provided for a tool, the additional arguments will be passed to the function creating the derivation for that tool. So you can provide an index-state or a materialized argument like that { cabal = { version = \"3.2.0.0\"; index-state = \"2020-10-30T00:00:00Z\"; materialized = ./cabal.materialized; }; } for example. You can specify and materialize the version of hoogle used to construct the hoogle index by including something like { hoogle = { version = \"5.0.17.15\"; index-state = \"2020-05-31T00:00:00Z\"; materialized = ./hoogle.materialized; } . Uses a default version of hoogle if omitted. inputsFrom List List of other shells to include in this one. The buildInputs and nativeBuildInputs of each will be included using mkShell . crossPlatforms Function Platform selection function for cross compilation targets to support eg. ps: with ps; [ghcjs mingwW64] (see nixpkgs lib.systems.examples for list of platform names). { ... } Attrset All the other arguments are passed to mkDerivation . Return value : a derivation Warning exactDeps = true will set the CABAL_CONFIG environment variable to disable remote package servers. This is a known limitation which we would like to solve. Use exactDeps = false if this is a problem.","title":"shellFor"},{"location":"reference/library.html#ghcwithpackages","text":"Creates a nix-shell development environment including the given packages selected from this package set. Parameter : a package selection function. Return value : a derivation Example : haskell.haskellPackages.ghcWithPackages (ps: with ps; [ lens conduit ])","title":"ghcWithPackages"},{"location":"reference/library.html#ghcwithhoogle","text":"The same as ghcWithPackages , except, a hoogle command with a Hoogle documentation index of the packages will be included in the shell.","title":"ghcWithHoogle"},{"location":"reference/modules.html","text":"Haskell.nix modules options for packages and components. Generated This documentation is generated from Nix sources in the modules subdirectory using scripts/update-docs.nix Configuration Options \u00b6 bootPkgs \u00b6 This option has no description. Type : list of strings No Default No Example buildable \u00b6 This option has no description. Type : boolean Default : true No Example cabal.compiler \u00b6 This option has no description. Type : unspecified No Default No Example cabal.system \u00b6 This option has no description. Type : unspecified No Default No Example compiler.nix-name \u00b6 This option has no description. Type : string No Default No Example compiler.packages \u00b6 This option has no description. Type : attribute set of strings No Default No Example compiler.version \u00b6 This option has no description. Type : string No Default No Example configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example doCheck \u00b6 This option has no description. Type : boolean Default : true No Example doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example errorHandler \u00b6 This option has no description. Type : unspecified No Default No Example evalPackages \u00b6 The evalPackages that will be used when building hoogle and shell tools. Type : unspecified No Default No Example ghc.package \u00b6 This option has no description. Type : package Default : \"pkgs.buildPackages.haskell-nix.compiler.${config.compiler.nix-name}\" No Example ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example hackage.configs \u00b6 This option has no description. Type : unspecified No Default No Example hackage.db \u00b6 This option has no description. Type : unspecified No Default No Example hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example hsPkgs \u00b6 This option has no description. Type : unspecified No Default No Example keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example nonReinstallablePkgs \u00b6 This option has no description. Type : list of strings No Default No Example packages \u00b6 This option has no description. Type : attribute set of submodules No Default No Example packages. .allComponent \u00b6 The merged dependencies of all other components Type : submodule No Default No Example packages. .allComponent.asmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.build-tools \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .allComponent.cSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.cmmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example packages. .allComponent.configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .allComponent.contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example packages. .allComponent.cxxSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.depends \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.doCheck \u00b6 This option has no description. Type : boolean Default : true No Example packages. .allComponent.doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example packages. .allComponent.doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example packages. .allComponent.doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example packages. .allComponent.doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example packages. .allComponent.doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example packages. .allComponent.doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example packages. .allComponent.doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example packages. .allComponent.dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example packages. .allComponent.dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example packages. .allComponent.enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example packages. .allComponent.enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .allComponent.enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .allComponent.enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example packages. .allComponent.enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example packages. .allComponent.enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example packages. .allComponent.extraSrcFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.frameworks \u00b6 This option has no description. Type : list of packages Default : [] No Example packages. .allComponent.ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .allComponent.hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .allComponent.hsSourceDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [\".\"] No Example packages. .allComponent.includeDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.includes \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.jsSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example packages. .allComponent.libs \u00b6 This option has no description. Type : list of null or package or list of packagess Default : [] No Example packages. .allComponent.mainPath \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.modules \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .allComponent.pkgconfig \u00b6 This option has no description. Type : list of list of packagess Default : [] No Example packages. .allComponent.planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example packages. .allComponent.platforms \u00b6 This option has no description. Type : null or list of unspecifieds Default : null No Example packages. .allComponent.plugins \u00b6 This option has no description. Type : list of submodules Default : [] No Example packages. .allComponent.plugins.*.args \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .allComponent.plugins.*.library \u00b6 This option has no description. Type : unspecified No Default No Example packages. .allComponent.plugins.*.moduleName \u00b6 This option has no description. Type : string No Default No Example packages. .allComponent.postBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.postCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.postInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.preBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.preCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.preInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .allComponent.preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example packages. .allComponent.profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example packages. .allComponent.setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .allComponent.setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .allComponent.setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .allComponent.shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example packages. .allComponent.testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .allComponent.testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" packages. .allComponent.writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example packages. .buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .cabal-generator \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks \u00b6 This option has no description. Type : attribute set of submodules Default : {} No Example packages. .components.benchmarks. .asmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .build-tools \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.benchmarks. .cSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .cmmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example packages. .components.benchmarks. .configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.benchmarks. .contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example packages. .components.benchmarks. .cxxSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .depends \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .doCheck \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.benchmarks. .doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example packages. .components.benchmarks. .doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example packages. .components.benchmarks. .doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.benchmarks. .doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example packages. .components.benchmarks. .doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example packages. .components.benchmarks. .doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example packages. .components.benchmarks. .doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example packages. .components.benchmarks. .dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example packages. .components.benchmarks. .dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example packages. .components.benchmarks. .enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example packages. .components.benchmarks. .enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.benchmarks. .enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.benchmarks. .enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.benchmarks. .enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example packages. .components.benchmarks. .enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example packages. .components.benchmarks. .extraSrcFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .frameworks \u00b6 This option has no description. Type : list of packages Default : [] No Example packages. .components.benchmarks. .ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.benchmarks. .hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.benchmarks. .hsSourceDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [\".\"] No Example packages. .components.benchmarks. .includeDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .includes \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .jsSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example packages. .components.benchmarks. .libs \u00b6 This option has no description. Type : list of null or package or list of packagess Default : [] No Example packages. .components.benchmarks. .mainPath \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .modules \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.benchmarks. .pkgconfig \u00b6 This option has no description. Type : list of list of packagess Default : [] No Example packages. .components.benchmarks. .planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example packages. .components.benchmarks. .platforms \u00b6 This option has no description. Type : null or list of unspecifieds Default : null No Example packages. .components.benchmarks. .plugins \u00b6 This option has no description. Type : list of submodules Default : [] No Example packages. .components.benchmarks. .plugins.*.args \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.benchmarks. .plugins.*.library \u00b6 This option has no description. Type : unspecified No Default No Example packages. .components.benchmarks. .plugins.*.moduleName \u00b6 This option has no description. Type : string No Default No Example packages. .components.benchmarks. .postBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .postCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .postInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .preBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .preCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .preInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.benchmarks. .preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example packages. .components.benchmarks. .profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example packages. .components.benchmarks. .setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.benchmarks. .setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.benchmarks. .setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.benchmarks. .shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example packages. .components.benchmarks. .testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.benchmarks. .testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" packages. .components.benchmarks. .writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example packages. .components.exes \u00b6 This option has no description. Type : attribute set of submodules Default : {} No Example packages. .components.exes. .asmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .build-tools \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.exes. .cSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .cmmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example packages. .components.exes. .configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.exes. .contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example packages. .components.exes. .cxxSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .depends \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .doCheck \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.exes. .doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example packages. .components.exes. .doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example packages. .components.exes. .doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.exes. .doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example packages. .components.exes. .doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example packages. .components.exes. .doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example packages. .components.exes. .doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example packages. .components.exes. .dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example packages. .components.exes. .dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example packages. .components.exes. .enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example packages. .components.exes. .enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.exes. .enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.exes. .enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.exes. .enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example packages. .components.exes. .enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example packages. .components.exes. .extraSrcFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .frameworks \u00b6 This option has no description. Type : list of packages Default : [] No Example packages. .components.exes. .ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.exes. .hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.exes. .hsSourceDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [\".\"] No Example packages. .components.exes. .includeDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .includes \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .jsSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example packages. .components.exes. .libs \u00b6 This option has no description. Type : list of null or package or list of packagess Default : [] No Example packages. .components.exes. .mainPath \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .modules \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.exes. .pkgconfig \u00b6 This option has no description. Type : list of list of packagess Default : [] No Example packages. .components.exes. .planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example packages. .components.exes. .platforms \u00b6 This option has no description. Type : null or list of unspecifieds Default : null No Example packages. .components.exes. .plugins \u00b6 This option has no description. Type : list of submodules Default : [] No Example packages. .components.exes. .plugins.*.args \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.exes. .plugins.*.library \u00b6 This option has no description. Type : unspecified No Default No Example packages. .components.exes. .plugins.*.moduleName \u00b6 This option has no description. Type : string No Default No Example packages. .components.exes. .postBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .postCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .postInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .preBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .preCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .preInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.exes. .preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example packages. .components.exes. .profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example packages. .components.exes. .setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.exes. .setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.exes. .setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.exes. .shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example packages. .components.exes. .testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.exes. .testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" packages. .components.exes. .writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example packages. .components.foreignlibs \u00b6 This option has no description. Type : attribute set of submodules Default : {} No Example packages. .components.foreignlibs. .asmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .build-tools \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.foreignlibs. .cSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .cmmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example packages. .components.foreignlibs. .configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.foreignlibs. .contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example packages. .components.foreignlibs. .cxxSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .depends \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .doCheck \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.foreignlibs. .doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example packages. .components.foreignlibs. .doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example packages. .components.foreignlibs. .doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.foreignlibs. .doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example packages. .components.foreignlibs. .doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example packages. .components.foreignlibs. .doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example packages. .components.foreignlibs. .doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example packages. .components.foreignlibs. .dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example packages. .components.foreignlibs. .dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example packages. .components.foreignlibs. .enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example packages. .components.foreignlibs. .enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.foreignlibs. .enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.foreignlibs. .enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.foreignlibs. .enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example packages. .components.foreignlibs. .enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example packages. .components.foreignlibs. .extraSrcFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .frameworks \u00b6 This option has no description. Type : list of packages Default : [] No Example packages. .components.foreignlibs. .ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.foreignlibs. .hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.foreignlibs. .hsSourceDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [\".\"] No Example packages. .components.foreignlibs. .includeDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .includes \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .jsSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example packages. .components.foreignlibs. .libs \u00b6 This option has no description. Type : list of null or package or list of packagess Default : [] No Example packages. .components.foreignlibs. .mainPath \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .modules \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.foreignlibs. .pkgconfig \u00b6 This option has no description. Type : list of list of packagess Default : [] No Example packages. .components.foreignlibs. .planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example packages. .components.foreignlibs. .platforms \u00b6 This option has no description. Type : null or list of unspecifieds Default : null No Example packages. .components.foreignlibs. .plugins \u00b6 This option has no description. Type : list of submodules Default : [] No Example packages. .components.foreignlibs. .plugins.*.args \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.foreignlibs. .plugins.*.library \u00b6 This option has no description. Type : unspecified No Default No Example packages. .components.foreignlibs. .plugins.*.moduleName \u00b6 This option has no description. Type : string No Default No Example packages. .components.foreignlibs. .postBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .postCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .postInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .preBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .preCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .preInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.foreignlibs. .preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example packages. .components.foreignlibs. .profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example packages. .components.foreignlibs. .setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.foreignlibs. .setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.foreignlibs. .setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.foreignlibs. .shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example packages. .components.foreignlibs. .testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.foreignlibs. .testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" packages. .components.foreignlibs. .writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example packages. .components.library \u00b6 This option has no description. Type : null or submodule Default : null No Example packages. .components.library.asmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.build-tools \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.library.cSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.cmmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example packages. .components.library.configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.library.contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example packages. .components.library.cxxSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.depends \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.doCheck \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.library.doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example packages. .components.library.doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example packages. .components.library.doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.library.doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example packages. .components.library.doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example packages. .components.library.doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example packages. .components.library.doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example packages. .components.library.dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example packages. .components.library.dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example packages. .components.library.enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example packages. .components.library.enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.library.enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.library.enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.library.enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example packages. .components.library.enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example packages. .components.library.extraSrcFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.frameworks \u00b6 This option has no description. Type : list of packages Default : [] No Example packages. .components.library.ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.library.hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.library.hsSourceDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [\".\"] No Example packages. .components.library.includeDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.includes \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.jsSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example packages. .components.library.libs \u00b6 This option has no description. Type : list of null or package or list of packagess Default : [] No Example packages. .components.library.mainPath \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.modules \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.library.pkgconfig \u00b6 This option has no description. Type : list of list of packagess Default : [] No Example packages. .components.library.planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example packages. .components.library.platforms \u00b6 This option has no description. Type : null or list of unspecifieds Default : null No Example packages. .components.library.plugins \u00b6 This option has no description. Type : list of submodules Default : [] No Example packages. .components.library.plugins.*.args \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.library.plugins.*.library \u00b6 This option has no description. Type : unspecified No Default No Example packages. .components.library.plugins.*.moduleName \u00b6 This option has no description. Type : string No Default No Example packages. .components.library.postBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.postCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.postInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.preBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.preCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.preInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.library.preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example packages. .components.library.profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example packages. .components.library.setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.library.setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.library.setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.library.shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example packages. .components.library.testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.library.testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" packages. .components.library.writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example packages. .components.setup \u00b6 This option has no description. Type : null or submodule Default : {\"asmSources\":[],\"cSources\":[],\"cmmSources\":[],\"cxxSources\":[],\"depends\":[],\"doExactConfig\":false,\"extraSrcFiles\":[\"Setup.hs\",\"Setup.lhs\"],\"frameworks\":[],\"hsSourceDirs\":[\"setup-src\"],\"includeDirs\":[],\"jsSources\":[],\"libs\":[],\"platforms\":null} No Example packages. .components.setup.asmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.build-tools \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.setup.cSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.cmmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example packages. .components.setup.configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.setup.contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example packages. .components.setup.cxxSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.depends \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.doCheck \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.setup.doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example packages. .components.setup.doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example packages. .components.setup.doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.setup.doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example packages. .components.setup.doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example packages. .components.setup.doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example packages. .components.setup.doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example packages. .components.setup.dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example packages. .components.setup.dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example packages. .components.setup.enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example packages. .components.setup.enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.setup.enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.setup.enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.setup.enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example packages. .components.setup.enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example packages. .components.setup.extraSrcFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.frameworks \u00b6 This option has no description. Type : list of packages Default : [] No Example packages. .components.setup.ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.setup.hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.setup.hsSourceDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [\".\"] No Example packages. .components.setup.includeDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.includes \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.jsSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example packages. .components.setup.libs \u00b6 This option has no description. Type : list of null or package or list of packagess Default : [] No Example packages. .components.setup.mainPath \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.modules \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.setup.pkgconfig \u00b6 This option has no description. Type : list of list of packagess Default : [] No Example packages. .components.setup.planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example packages. .components.setup.platforms \u00b6 This option has no description. Type : null or list of unspecifieds Default : null No Example packages. .components.setup.plugins \u00b6 This option has no description. Type : list of submodules Default : [] No Example packages. .components.setup.plugins.*.args \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.setup.plugins.*.library \u00b6 This option has no description. Type : unspecified No Default No Example packages. .components.setup.plugins.*.moduleName \u00b6 This option has no description. Type : string No Default No Example packages. .components.setup.postBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.postCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.postInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.preBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.preCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.preInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.setup.preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example packages. .components.setup.profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example packages. .components.setup.setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.setup.setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.setup.setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.setup.shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example packages. .components.setup.testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.setup.testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" packages. .components.setup.writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example packages. .components.sublibs \u00b6 This option has no description. Type : attribute set of submodules Default : {} No Example packages. .components.sublibs. .asmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .build-tools \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.sublibs. .cSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .cmmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example packages. .components.sublibs. .configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.sublibs. .contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example packages. .components.sublibs. .cxxSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .depends \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .doCheck \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.sublibs. .doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example packages. .components.sublibs. .doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example packages. .components.sublibs. .doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.sublibs. .doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example packages. .components.sublibs. .doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example packages. .components.sublibs. .doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example packages. .components.sublibs. .doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example packages. .components.sublibs. .dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example packages. .components.sublibs. .dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example packages. .components.sublibs. .enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example packages. .components.sublibs. .enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.sublibs. .enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.sublibs. .enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.sublibs. .enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example packages. .components.sublibs. .enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example packages. .components.sublibs. .extraSrcFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .frameworks \u00b6 This option has no description. Type : list of packages Default : [] No Example packages. .components.sublibs. .ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.sublibs. .hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.sublibs. .hsSourceDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [\".\"] No Example packages. .components.sublibs. .includeDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .includes \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .jsSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example packages. .components.sublibs. .libs \u00b6 This option has no description. Type : list of null or package or list of packagess Default : [] No Example packages. .components.sublibs. .mainPath \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .modules \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.sublibs. .pkgconfig \u00b6 This option has no description. Type : list of list of packagess Default : [] No Example packages. .components.sublibs. .planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example packages. .components.sublibs. .platforms \u00b6 This option has no description. Type : null or list of unspecifieds Default : null No Example packages. .components.sublibs. .plugins \u00b6 This option has no description. Type : list of submodules Default : [] No Example packages. .components.sublibs. .plugins.*.args \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.sublibs. .plugins.*.library \u00b6 This option has no description. Type : unspecified No Default No Example packages. .components.sublibs. .plugins.*.moduleName \u00b6 This option has no description. Type : string No Default No Example packages. .components.sublibs. .postBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .postCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .postInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .preBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .preCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .preInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.sublibs. .preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example packages. .components.sublibs. .profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example packages. .components.sublibs. .setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.sublibs. .setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.sublibs. .setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.sublibs. .shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example packages. .components.sublibs. .testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.sublibs. .testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" packages. .components.sublibs. .writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example packages. .components.tests \u00b6 This option has no description. Type : attribute set of submodules Default : {} No Example packages. .components.tests. .asmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .build-tools \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.tests. .cSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .cmmSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example packages. .components.tests. .configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.tests. .contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example packages. .components.tests. .cxxSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .depends \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .doCheck \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.tests. .doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example packages. .components.tests. .doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example packages. .components.tests. .doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.tests. .doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example packages. .components.tests. .doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example packages. .components.tests. .doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example packages. .components.tests. .doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example packages. .components.tests. .dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example packages. .components.tests. .dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example packages. .components.tests. .enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example packages. .components.tests. .enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.tests. .enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .components.tests. .enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example packages. .components.tests. .enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example packages. .components.tests. .enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example packages. .components.tests. .extraSrcFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .frameworks \u00b6 This option has no description. Type : list of packages Default : [] No Example packages. .components.tests. .ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.tests. .hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.tests. .hsSourceDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [\".\"] No Example packages. .components.tests. .includeDirs \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .includes \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .jsSources \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example packages. .components.tests. .libs \u00b6 This option has no description. Type : list of null or package or list of packagess Default : [] No Example packages. .components.tests. .mainPath \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .modules \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .components.tests. .pkgconfig \u00b6 This option has no description. Type : list of list of packagess Default : [] No Example packages. .components.tests. .planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example packages. .components.tests. .platforms \u00b6 This option has no description. Type : null or list of unspecifieds Default : null No Example packages. .components.tests. .plugins \u00b6 This option has no description. Type : list of submodules Default : [] No Example packages. .components.tests. .plugins.*.args \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.tests. .plugins.*.library \u00b6 This option has no description. Type : unspecified No Default No Example packages. .components.tests. .plugins.*.moduleName \u00b6 This option has no description. Type : string No Default No Example packages. .components.tests. .postBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .postCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .postInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .preBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .preCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .preInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .components.tests. .preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example packages. .components.tests. .profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example packages. .components.tests. .setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.tests. .setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.tests. .setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.tests. .shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example packages. .components.tests. .testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .components.tests. .testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" packages. .components.tests. .writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example packages. .configureAllComponents \u00b6 If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example packages. .configureFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .contentAddressed \u00b6 Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example packages. .doCheck \u00b6 This option has no description. Type : boolean Default : true No Example packages. .doCoverage \u00b6 Enable production of test coverage reports. Type : boolean Default : false No Example packages. .doCrossCheck \u00b6 Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example packages. .doExactConfig \u00b6 This option has no description. Type : boolean Default : false No Example packages. .doHaddock \u00b6 Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example packages. .doHoogle \u00b6 Also build a hoogle index. Type : boolean Default : true No Example packages. .doHyperlinkSource \u00b6 Link documentation to the source code. Type : boolean Default : true No Example packages. .doQuickjump \u00b6 Generate an index for interactive documentation navigation. Type : boolean Default : true No Example packages. .dontPatchELF \u00b6 If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example packages. .dontStrip \u00b6 If set, libraries and executables are not stripped. Type : boolean Default : true No Example packages. .enableDeadCodeElimination \u00b6 If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example packages. .enableLibraryProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .enableProfiling \u00b6 This option has no description. Type : boolean Default : false No Example packages. .enableSeparateDataOutput \u00b6 This option has no description. Type : boolean Default : true No Example packages. .enableShared \u00b6 If set, enables building shared libraries. Type : boolean Default : true No Example packages. .enableStatic \u00b6 If set, enables building static libraries and executables. Type : boolean Default : true No Example packages. .flags \u00b6 This option has no description. Type : attribute set of booleans No Default No Example packages. .ghcOptions \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .hardeningDisable \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .keepSource \u00b6 Keep component source in the store in a source output Type : boolean Default : false No Example packages. .name \u00b6 This option has no description. Type : string Default : \"${config.package.identifier.name}-${config.package.identifier.version}\" No Example packages. .package.author \u00b6 This option has no description. Type : string No Default No Example packages. .package.buildType \u00b6 This option has no description. Type : string No Default No Example packages. .package.buildable \u00b6 This option has no description. Type : boolean Default : true No Example packages. .package.cleanHpack \u00b6 This option has no description. Type : boolean Default : false No Example packages. .package.copyright \u00b6 This option has no description. Type : string No Default No Example packages. .package.dataDir \u00b6 This option has no description. Type : string Default : \"\" No Example packages. .package.dataFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .package.description \u00b6 This option has no description. Type : string No Default No Example packages. .package.detailLevel \u00b6 This option has no description. Type : string Default : \"MinimalDetails\" No Example packages. .package.extraDocFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .package.extraSrcFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .package.extraTmpFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .package.homepage \u00b6 This option has no description. Type : string No Default No Example packages. .package.identifier.name \u00b6 This option has no description. Type : string No Default No Example packages. .package.identifier.version \u00b6 This option has no description. Type : string No Default No Example packages. .package.isLocal \u00b6 This option has no description. Type : boolean Default : false No Example packages. .package.isProject \u00b6 This option has no description. Type : boolean Default : false No Example packages. .package.license \u00b6 This option has no description. Type : string No Default No Example packages. .package.licenseFiles \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .package.maintainer \u00b6 This option has no description. Type : string No Default No Example packages. .package.setup-depends \u00b6 This option has no description. Type : list of unspecifieds Default : [] No Example packages. .package.specVersion \u00b6 This option has no description. Type : string No Default No Example packages. .package.synopsis \u00b6 This option has no description. Type : string No Default No Example packages. .package.url \u00b6 This option has no description. Type : string No Default No Example packages. .patches \u00b6 This option has no description. Type : list of unspecified or paths Default : [] No Example packages. .planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example packages. .postBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .postCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .postInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example packages. .preBuild \u00b6 This option has no description. Type : null or string Default : null No Example packages. .preCheck \u00b6 This option has no description. Type : null or string Default : null No Example packages. .preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example packages. .preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example packages. .preInstall \u00b6 This option has no description. Type : null or string Default : null No Example packages. .preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example packages. .profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example packages. .revision \u00b6 This option has no description. Type : null or signed integer Default : null No Example packages. .revisionSha256 \u00b6 This option has no description. Type : null or string Default : null No Example packages. .setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .sha256 \u00b6 This option has no description. Type : null or string Default : null No Example packages. .shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example packages. .src \u00b6 This option has no description. Type : path or package Default : \"pkgs.fetchurl { url = \\\"mirror://hackage/${config.name}.tar.gz\\\"; inherit (config) sha256; };\" No Example packages. .testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example packages. .testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" packages. .writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example planned \u00b6 Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example postBuild \u00b6 This option has no description. Type : null or string Default : null No Example postCheck \u00b6 This option has no description. Type : null or string Default : null No Example postConfigure \u00b6 This option has no description. Type : null or string Default : null No Example postHaddock \u00b6 This option has no description. Type : null or string Default : null No Example postInstall \u00b6 This option has no description. Type : null or string Default : null No Example postUnpack \u00b6 This option has no description. Type : null or string Default : null No Example preBuild \u00b6 This option has no description. Type : null or string Default : null No Example preCheck \u00b6 This option has no description. Type : null or string Default : null No Example preConfigure \u00b6 This option has no description. Type : null or string Default : null No Example preHaddock \u00b6 This option has no description. Type : null or string Default : null No Example preInstall \u00b6 This option has no description. Type : null or string Default : null No Example preUnpack \u00b6 This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example profilingDetail \u00b6 This option has no description. Type : null or string Default : \"default\" No Example reinstallableLibGhc \u00b6 Is lib:ghc reinstallable? Type : boolean Default : true No Example setup-depends \u00b6 pkgs to globally provide to Setup.hs builds Type : list of unspecifieds Default : [] No Example setupBuildFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example setupHaddockFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example setupInstallFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example shellHook \u00b6 Hook to run when entering a shell Type : unspecified Default : \"\" No Example testFlags \u00b6 This option has no description. Type : list of strings Default : [] No Example testWrapper \u00b6 A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\" writeHieFiles \u00b6 Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"Module options"},{"location":"reference/modules.html#configuration-options","text":"","title":"Configuration Options"},{"location":"reference/modules.html#bootpkgs","text":"This option has no description. Type : list of strings No Default No Example","title":"bootPkgs"},{"location":"reference/modules.html#buildable","text":"This option has no description. Type : boolean Default : true No Example","title":"buildable"},{"location":"reference/modules.html#cabalcompiler","text":"This option has no description. Type : unspecified No Default No Example","title":"cabal.compiler"},{"location":"reference/modules.html#cabalsystem","text":"This option has no description. Type : unspecified No Default No Example","title":"cabal.system"},{"location":"reference/modules.html#compilernix-name","text":"This option has no description. Type : string No Default No Example","title":"compiler.nix-name"},{"location":"reference/modules.html#compilerpackages","text":"This option has no description. Type : attribute set of strings No Default No Example","title":"compiler.packages"},{"location":"reference/modules.html#compilerversion","text":"This option has no description. Type : string No Default No Example","title":"compiler.version"},{"location":"reference/modules.html#configureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"configureAllComponents"},{"location":"reference/modules.html#configureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"configureFlags"},{"location":"reference/modules.html#contentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"contentAddressed"},{"location":"reference/modules.html#docheck","text":"This option has no description. Type : boolean Default : true No Example","title":"doCheck"},{"location":"reference/modules.html#docoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"doCoverage"},{"location":"reference/modules.html#docrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"doCrossCheck"},{"location":"reference/modules.html#doexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"doExactConfig"},{"location":"reference/modules.html#dohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"doHaddock"},{"location":"reference/modules.html#dohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"doHoogle"},{"location":"reference/modules.html#dohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"doHyperlinkSource"},{"location":"reference/modules.html#doquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"doQuickjump"},{"location":"reference/modules.html#dontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"dontPatchELF"},{"location":"reference/modules.html#dontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"dontStrip"},{"location":"reference/modules.html#enabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"enableDeadCodeElimination"},{"location":"reference/modules.html#enablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"enableLibraryProfiling"},{"location":"reference/modules.html#enableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"enableProfiling"},{"location":"reference/modules.html#enableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"enableSeparateDataOutput"},{"location":"reference/modules.html#enableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"enableShared"},{"location":"reference/modules.html#enablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"enableStatic"},{"location":"reference/modules.html#errorhandler","text":"This option has no description. Type : unspecified No Default No Example","title":"errorHandler"},{"location":"reference/modules.html#evalpackages","text":"The evalPackages that will be used when building hoogle and shell tools. Type : unspecified No Default No Example","title":"evalPackages"},{"location":"reference/modules.html#ghcpackage","text":"This option has no description. Type : package Default : \"pkgs.buildPackages.haskell-nix.compiler.${config.compiler.nix-name}\" No Example","title":"ghc.package"},{"location":"reference/modules.html#ghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"ghcOptions"},{"location":"reference/modules.html#hackageconfigs","text":"This option has no description. Type : unspecified No Default No Example","title":"hackage.configs"},{"location":"reference/modules.html#hackagedb","text":"This option has no description. Type : unspecified No Default No Example","title":"hackage.db"},{"location":"reference/modules.html#hardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"hardeningDisable"},{"location":"reference/modules.html#hspkgs","text":"This option has no description. Type : unspecified No Default No Example","title":"hsPkgs"},{"location":"reference/modules.html#keepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"keepSource"},{"location":"reference/modules.html#nonreinstallablepkgs","text":"This option has no description. Type : list of strings No Default No Example","title":"nonReinstallablePkgs"},{"location":"reference/modules.html#packages","text":"This option has no description. Type : attribute set of submodules No Default No Example","title":"packages"},{"location":"reference/modules.html#packagesallcomponent","text":"The merged dependencies of all other components Type : submodule No Default No Example","title":"packages..allComponent"},{"location":"reference/modules.html#packagesallcomponentasmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.asmSources"},{"location":"reference/modules.html#packagesallcomponentbuild-tools","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.build-tools"},{"location":"reference/modules.html#packagesallcomponentbuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..allComponent.buildable"},{"location":"reference/modules.html#packagesallcomponentcsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.cSources"},{"location":"reference/modules.html#packagesallcomponentcmmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.cmmSources"},{"location":"reference/modules.html#packagesallcomponentconfigureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"packages..allComponent.configureAllComponents"},{"location":"reference/modules.html#packagesallcomponentconfigureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..allComponent.configureFlags"},{"location":"reference/modules.html#packagesallcomponentcontentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"packages..allComponent.contentAddressed"},{"location":"reference/modules.html#packagesallcomponentcxxsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.cxxSources"},{"location":"reference/modules.html#packagesallcomponentdepends","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.depends"},{"location":"reference/modules.html#packagesallcomponentdocheck","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..allComponent.doCheck"},{"location":"reference/modules.html#packagesallcomponentdocoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"packages..allComponent.doCoverage"},{"location":"reference/modules.html#packagesallcomponentdocrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"packages..allComponent.doCrossCheck"},{"location":"reference/modules.html#packagesallcomponentdoexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..allComponent.doExactConfig"},{"location":"reference/modules.html#packagesallcomponentdohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"packages..allComponent.doHaddock"},{"location":"reference/modules.html#packagesallcomponentdohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"packages..allComponent.doHoogle"},{"location":"reference/modules.html#packagesallcomponentdohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"packages..allComponent.doHyperlinkSource"},{"location":"reference/modules.html#packagesallcomponentdoquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"packages..allComponent.doQuickjump"},{"location":"reference/modules.html#packagesallcomponentdontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"packages..allComponent.dontPatchELF"},{"location":"reference/modules.html#packagesallcomponentdontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"packages..allComponent.dontStrip"},{"location":"reference/modules.html#packagesallcomponentenabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"packages..allComponent.enableDeadCodeElimination"},{"location":"reference/modules.html#packagesallcomponentenablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..allComponent.enableLibraryProfiling"},{"location":"reference/modules.html#packagesallcomponentenableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..allComponent.enableProfiling"},{"location":"reference/modules.html#packagesallcomponentenableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..allComponent.enableSeparateDataOutput"},{"location":"reference/modules.html#packagesallcomponentenableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"packages..allComponent.enableShared"},{"location":"reference/modules.html#packagesallcomponentenablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"packages..allComponent.enableStatic"},{"location":"reference/modules.html#packagesallcomponentextrasrcfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.extraSrcFiles"},{"location":"reference/modules.html#packagesallcomponentframeworks","text":"This option has no description. Type : list of packages Default : [] No Example","title":"packages..allComponent.frameworks"},{"location":"reference/modules.html#packagesallcomponentghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..allComponent.ghcOptions"},{"location":"reference/modules.html#packagesallcomponenthardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..allComponent.hardeningDisable"},{"location":"reference/modules.html#packagesallcomponenthssourcedirs","text":"This option has no description. Type : list of unspecifieds Default : [\".\"] No Example","title":"packages..allComponent.hsSourceDirs"},{"location":"reference/modules.html#packagesallcomponentincludedirs","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.includeDirs"},{"location":"reference/modules.html#packagesallcomponentincludes","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.includes"},{"location":"reference/modules.html#packagesallcomponentjssources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.jsSources"},{"location":"reference/modules.html#packagesallcomponentkeepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"packages..allComponent.keepSource"},{"location":"reference/modules.html#packagesallcomponentlibs","text":"This option has no description. Type : list of null or package or list of packagess Default : [] No Example","title":"packages..allComponent.libs"},{"location":"reference/modules.html#packagesallcomponentmainpath","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.mainPath"},{"location":"reference/modules.html#packagesallcomponentmodules","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..allComponent.modules"},{"location":"reference/modules.html#packagesallcomponentpkgconfig","text":"This option has no description. Type : list of list of packagess Default : [] No Example","title":"packages..allComponent.pkgconfig"},{"location":"reference/modules.html#packagesallcomponentplanned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"packages..allComponent.planned"},{"location":"reference/modules.html#packagesallcomponentplatforms","text":"This option has no description. Type : null or list of unspecifieds Default : null No Example","title":"packages..allComponent.platforms"},{"location":"reference/modules.html#packagesallcomponentplugins","text":"This option has no description. Type : list of submodules Default : [] No Example","title":"packages..allComponent.plugins"},{"location":"reference/modules.html#packagesallcomponentpluginsargs","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..allComponent.plugins.*.args"},{"location":"reference/modules.html#packagesallcomponentpluginslibrary","text":"This option has no description. Type : unspecified No Default No Example","title":"packages..allComponent.plugins.*.library"},{"location":"reference/modules.html#packagesallcomponentpluginsmodulename","text":"This option has no description. Type : string No Default No Example","title":"packages..allComponent.plugins.*.moduleName"},{"location":"reference/modules.html#packagesallcomponentpostbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.postBuild"},{"location":"reference/modules.html#packagesallcomponentpostcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.postCheck"},{"location":"reference/modules.html#packagesallcomponentpostconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.postConfigure"},{"location":"reference/modules.html#packagesallcomponentposthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.postHaddock"},{"location":"reference/modules.html#packagesallcomponentpostinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.postInstall"},{"location":"reference/modules.html#packagesallcomponentpostunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.postUnpack"},{"location":"reference/modules.html#packagesallcomponentprebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.preBuild"},{"location":"reference/modules.html#packagesallcomponentprecheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.preCheck"},{"location":"reference/modules.html#packagesallcomponentpreconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.preConfigure"},{"location":"reference/modules.html#packagesallcomponentprehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.preHaddock"},{"location":"reference/modules.html#packagesallcomponentpreinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..allComponent.preInstall"},{"location":"reference/modules.html#packagesallcomponentpreunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"packages..allComponent.preUnpack"},{"location":"reference/modules.html#packagesallcomponentprofilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"packages..allComponent.profilingDetail"},{"location":"reference/modules.html#packagesallcomponentsetupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..allComponent.setupBuildFlags"},{"location":"reference/modules.html#packagesallcomponentsetuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..allComponent.setupHaddockFlags"},{"location":"reference/modules.html#packagesallcomponentsetupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..allComponent.setupInstallFlags"},{"location":"reference/modules.html#packagesallcomponentshellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"packages..allComponent.shellHook"},{"location":"reference/modules.html#packagesallcomponenttestflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..allComponent.testFlags"},{"location":"reference/modules.html#packagesallcomponenttestwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"packages..allComponent.testWrapper"},{"location":"reference/modules.html#packagesallcomponentwritehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"packages..allComponent.writeHieFiles"},{"location":"reference/modules.html#packagesbuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..buildable"},{"location":"reference/modules.html#packagescabal-generator","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..cabal-generator"},{"location":"reference/modules.html#packagescomponentsbenchmarks","text":"This option has no description. Type : attribute set of submodules Default : {} No Example","title":"packages..components.benchmarks"},{"location":"reference/modules.html#packagescomponentsbenchmarksasmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..asmSources"},{"location":"reference/modules.html#packagescomponentsbenchmarksbuild-tools","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..build-tools"},{"location":"reference/modules.html#packagescomponentsbenchmarksbuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.benchmarks..buildable"},{"location":"reference/modules.html#packagescomponentsbenchmarkscsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..cSources"},{"location":"reference/modules.html#packagescomponentsbenchmarkscmmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..cmmSources"},{"location":"reference/modules.html#packagescomponentsbenchmarksconfigureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"packages..components.benchmarks..configureAllComponents"},{"location":"reference/modules.html#packagescomponentsbenchmarksconfigureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.benchmarks..configureFlags"},{"location":"reference/modules.html#packagescomponentsbenchmarkscontentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"packages..components.benchmarks..contentAddressed"},{"location":"reference/modules.html#packagescomponentsbenchmarkscxxsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..cxxSources"},{"location":"reference/modules.html#packagescomponentsbenchmarksdepends","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..depends"},{"location":"reference/modules.html#packagescomponentsbenchmarksdocheck","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.benchmarks..doCheck"},{"location":"reference/modules.html#packagescomponentsbenchmarksdocoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"packages..components.benchmarks..doCoverage"},{"location":"reference/modules.html#packagescomponentsbenchmarksdocrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"packages..components.benchmarks..doCrossCheck"},{"location":"reference/modules.html#packagescomponentsbenchmarksdoexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.benchmarks..doExactConfig"},{"location":"reference/modules.html#packagescomponentsbenchmarksdohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"packages..components.benchmarks..doHaddock"},{"location":"reference/modules.html#packagescomponentsbenchmarksdohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"packages..components.benchmarks..doHoogle"},{"location":"reference/modules.html#packagescomponentsbenchmarksdohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"packages..components.benchmarks..doHyperlinkSource"},{"location":"reference/modules.html#packagescomponentsbenchmarksdoquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"packages..components.benchmarks..doQuickjump"},{"location":"reference/modules.html#packagescomponentsbenchmarksdontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"packages..components.benchmarks..dontPatchELF"},{"location":"reference/modules.html#packagescomponentsbenchmarksdontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"packages..components.benchmarks..dontStrip"},{"location":"reference/modules.html#packagescomponentsbenchmarksenabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"packages..components.benchmarks..enableDeadCodeElimination"},{"location":"reference/modules.html#packagescomponentsbenchmarksenablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.benchmarks..enableLibraryProfiling"},{"location":"reference/modules.html#packagescomponentsbenchmarksenableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.benchmarks..enableProfiling"},{"location":"reference/modules.html#packagescomponentsbenchmarksenableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.benchmarks..enableSeparateDataOutput"},{"location":"reference/modules.html#packagescomponentsbenchmarksenableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"packages..components.benchmarks..enableShared"},{"location":"reference/modules.html#packagescomponentsbenchmarksenablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"packages..components.benchmarks..enableStatic"},{"location":"reference/modules.html#packagescomponentsbenchmarksextrasrcfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..extraSrcFiles"},{"location":"reference/modules.html#packagescomponentsbenchmarksframeworks","text":"This option has no description. Type : list of packages Default : [] No Example","title":"packages..components.benchmarks..frameworks"},{"location":"reference/modules.html#packagescomponentsbenchmarksghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.benchmarks..ghcOptions"},{"location":"reference/modules.html#packagescomponentsbenchmarkshardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.benchmarks..hardeningDisable"},{"location":"reference/modules.html#packagescomponentsbenchmarkshssourcedirs","text":"This option has no description. Type : list of unspecifieds Default : [\".\"] No Example","title":"packages..components.benchmarks..hsSourceDirs"},{"location":"reference/modules.html#packagescomponentsbenchmarksincludedirs","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..includeDirs"},{"location":"reference/modules.html#packagescomponentsbenchmarksincludes","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..includes"},{"location":"reference/modules.html#packagescomponentsbenchmarksjssources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..jsSources"},{"location":"reference/modules.html#packagescomponentsbenchmarkskeepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"packages..components.benchmarks..keepSource"},{"location":"reference/modules.html#packagescomponentsbenchmarkslibs","text":"This option has no description. Type : list of null or package or list of packagess Default : [] No Example","title":"packages..components.benchmarks..libs"},{"location":"reference/modules.html#packagescomponentsbenchmarksmainpath","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..mainPath"},{"location":"reference/modules.html#packagescomponentsbenchmarksmodules","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.benchmarks..modules"},{"location":"reference/modules.html#packagescomponentsbenchmarkspkgconfig","text":"This option has no description. Type : list of list of packagess Default : [] No Example","title":"packages..components.benchmarks..pkgconfig"},{"location":"reference/modules.html#packagescomponentsbenchmarksplanned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"packages..components.benchmarks..planned"},{"location":"reference/modules.html#packagescomponentsbenchmarksplatforms","text":"This option has no description. Type : null or list of unspecifieds Default : null No Example","title":"packages..components.benchmarks..platforms"},{"location":"reference/modules.html#packagescomponentsbenchmarksplugins","text":"This option has no description. Type : list of submodules Default : [] No Example","title":"packages..components.benchmarks..plugins"},{"location":"reference/modules.html#packagescomponentsbenchmarkspluginsargs","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.benchmarks..plugins.*.args"},{"location":"reference/modules.html#packagescomponentsbenchmarkspluginslibrary","text":"This option has no description. Type : unspecified No Default No Example","title":"packages..components.benchmarks..plugins.*.library"},{"location":"reference/modules.html#packagescomponentsbenchmarkspluginsmodulename","text":"This option has no description. Type : string No Default No Example","title":"packages..components.benchmarks..plugins.*.moduleName"},{"location":"reference/modules.html#packagescomponentsbenchmarkspostbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..postBuild"},{"location":"reference/modules.html#packagescomponentsbenchmarkspostcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..postCheck"},{"location":"reference/modules.html#packagescomponentsbenchmarkspostconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..postConfigure"},{"location":"reference/modules.html#packagescomponentsbenchmarksposthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..postHaddock"},{"location":"reference/modules.html#packagescomponentsbenchmarkspostinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..postInstall"},{"location":"reference/modules.html#packagescomponentsbenchmarkspostunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..postUnpack"},{"location":"reference/modules.html#packagescomponentsbenchmarksprebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..preBuild"},{"location":"reference/modules.html#packagescomponentsbenchmarksprecheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..preCheck"},{"location":"reference/modules.html#packagescomponentsbenchmarkspreconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..preConfigure"},{"location":"reference/modules.html#packagescomponentsbenchmarksprehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..preHaddock"},{"location":"reference/modules.html#packagescomponentsbenchmarkspreinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.benchmarks..preInstall"},{"location":"reference/modules.html#packagescomponentsbenchmarkspreunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"packages..components.benchmarks..preUnpack"},{"location":"reference/modules.html#packagescomponentsbenchmarksprofilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"packages..components.benchmarks..profilingDetail"},{"location":"reference/modules.html#packagescomponentsbenchmarkssetupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.benchmarks..setupBuildFlags"},{"location":"reference/modules.html#packagescomponentsbenchmarkssetuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.benchmarks..setupHaddockFlags"},{"location":"reference/modules.html#packagescomponentsbenchmarkssetupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.benchmarks..setupInstallFlags"},{"location":"reference/modules.html#packagescomponentsbenchmarksshellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"packages..components.benchmarks..shellHook"},{"location":"reference/modules.html#packagescomponentsbenchmarkstestflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.benchmarks..testFlags"},{"location":"reference/modules.html#packagescomponentsbenchmarkstestwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"packages..components.benchmarks..testWrapper"},{"location":"reference/modules.html#packagescomponentsbenchmarkswritehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"packages..components.benchmarks..writeHieFiles"},{"location":"reference/modules.html#packagescomponentsexes","text":"This option has no description. Type : attribute set of submodules Default : {} No Example","title":"packages..components.exes"},{"location":"reference/modules.html#packagescomponentsexesasmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..asmSources"},{"location":"reference/modules.html#packagescomponentsexesbuild-tools","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..build-tools"},{"location":"reference/modules.html#packagescomponentsexesbuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.exes..buildable"},{"location":"reference/modules.html#packagescomponentsexescsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..cSources"},{"location":"reference/modules.html#packagescomponentsexescmmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..cmmSources"},{"location":"reference/modules.html#packagescomponentsexesconfigureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"packages..components.exes..configureAllComponents"},{"location":"reference/modules.html#packagescomponentsexesconfigureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.exes..configureFlags"},{"location":"reference/modules.html#packagescomponentsexescontentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"packages..components.exes..contentAddressed"},{"location":"reference/modules.html#packagescomponentsexescxxsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..cxxSources"},{"location":"reference/modules.html#packagescomponentsexesdepends","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..depends"},{"location":"reference/modules.html#packagescomponentsexesdocheck","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.exes..doCheck"},{"location":"reference/modules.html#packagescomponentsexesdocoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"packages..components.exes..doCoverage"},{"location":"reference/modules.html#packagescomponentsexesdocrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"packages..components.exes..doCrossCheck"},{"location":"reference/modules.html#packagescomponentsexesdoexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.exes..doExactConfig"},{"location":"reference/modules.html#packagescomponentsexesdohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"packages..components.exes..doHaddock"},{"location":"reference/modules.html#packagescomponentsexesdohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"packages..components.exes..doHoogle"},{"location":"reference/modules.html#packagescomponentsexesdohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"packages..components.exes..doHyperlinkSource"},{"location":"reference/modules.html#packagescomponentsexesdoquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"packages..components.exes..doQuickjump"},{"location":"reference/modules.html#packagescomponentsexesdontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"packages..components.exes..dontPatchELF"},{"location":"reference/modules.html#packagescomponentsexesdontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"packages..components.exes..dontStrip"},{"location":"reference/modules.html#packagescomponentsexesenabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"packages..components.exes..enableDeadCodeElimination"},{"location":"reference/modules.html#packagescomponentsexesenablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.exes..enableLibraryProfiling"},{"location":"reference/modules.html#packagescomponentsexesenableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.exes..enableProfiling"},{"location":"reference/modules.html#packagescomponentsexesenableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.exes..enableSeparateDataOutput"},{"location":"reference/modules.html#packagescomponentsexesenableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"packages..components.exes..enableShared"},{"location":"reference/modules.html#packagescomponentsexesenablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"packages..components.exes..enableStatic"},{"location":"reference/modules.html#packagescomponentsexesextrasrcfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..extraSrcFiles"},{"location":"reference/modules.html#packagescomponentsexesframeworks","text":"This option has no description. Type : list of packages Default : [] No Example","title":"packages..components.exes..frameworks"},{"location":"reference/modules.html#packagescomponentsexesghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.exes..ghcOptions"},{"location":"reference/modules.html#packagescomponentsexeshardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.exes..hardeningDisable"},{"location":"reference/modules.html#packagescomponentsexeshssourcedirs","text":"This option has no description. Type : list of unspecifieds Default : [\".\"] No Example","title":"packages..components.exes..hsSourceDirs"},{"location":"reference/modules.html#packagescomponentsexesincludedirs","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..includeDirs"},{"location":"reference/modules.html#packagescomponentsexesincludes","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..includes"},{"location":"reference/modules.html#packagescomponentsexesjssources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..jsSources"},{"location":"reference/modules.html#packagescomponentsexeskeepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"packages..components.exes..keepSource"},{"location":"reference/modules.html#packagescomponentsexeslibs","text":"This option has no description. Type : list of null or package or list of packagess Default : [] No Example","title":"packages..components.exes..libs"},{"location":"reference/modules.html#packagescomponentsexesmainpath","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..mainPath"},{"location":"reference/modules.html#packagescomponentsexesmodules","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.exes..modules"},{"location":"reference/modules.html#packagescomponentsexespkgconfig","text":"This option has no description. Type : list of list of packagess Default : [] No Example","title":"packages..components.exes..pkgconfig"},{"location":"reference/modules.html#packagescomponentsexesplanned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"packages..components.exes..planned"},{"location":"reference/modules.html#packagescomponentsexesplatforms","text":"This option has no description. Type : null or list of unspecifieds Default : null No Example","title":"packages..components.exes..platforms"},{"location":"reference/modules.html#packagescomponentsexesplugins","text":"This option has no description. Type : list of submodules Default : [] No Example","title":"packages..components.exes..plugins"},{"location":"reference/modules.html#packagescomponentsexespluginsargs","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.exes..plugins.*.args"},{"location":"reference/modules.html#packagescomponentsexespluginslibrary","text":"This option has no description. Type : unspecified No Default No Example","title":"packages..components.exes..plugins.*.library"},{"location":"reference/modules.html#packagescomponentsexespluginsmodulename","text":"This option has no description. Type : string No Default No Example","title":"packages..components.exes..plugins.*.moduleName"},{"location":"reference/modules.html#packagescomponentsexespostbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..postBuild"},{"location":"reference/modules.html#packagescomponentsexespostcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..postCheck"},{"location":"reference/modules.html#packagescomponentsexespostconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..postConfigure"},{"location":"reference/modules.html#packagescomponentsexesposthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..postHaddock"},{"location":"reference/modules.html#packagescomponentsexespostinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..postInstall"},{"location":"reference/modules.html#packagescomponentsexespostunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..postUnpack"},{"location":"reference/modules.html#packagescomponentsexesprebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..preBuild"},{"location":"reference/modules.html#packagescomponentsexesprecheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..preCheck"},{"location":"reference/modules.html#packagescomponentsexespreconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..preConfigure"},{"location":"reference/modules.html#packagescomponentsexesprehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..preHaddock"},{"location":"reference/modules.html#packagescomponentsexespreinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.exes..preInstall"},{"location":"reference/modules.html#packagescomponentsexespreunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"packages..components.exes..preUnpack"},{"location":"reference/modules.html#packagescomponentsexesprofilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"packages..components.exes..profilingDetail"},{"location":"reference/modules.html#packagescomponentsexessetupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.exes..setupBuildFlags"},{"location":"reference/modules.html#packagescomponentsexessetuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.exes..setupHaddockFlags"},{"location":"reference/modules.html#packagescomponentsexessetupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.exes..setupInstallFlags"},{"location":"reference/modules.html#packagescomponentsexesshellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"packages..components.exes..shellHook"},{"location":"reference/modules.html#packagescomponentsexestestflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.exes..testFlags"},{"location":"reference/modules.html#packagescomponentsexestestwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"packages..components.exes..testWrapper"},{"location":"reference/modules.html#packagescomponentsexeswritehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"packages..components.exes..writeHieFiles"},{"location":"reference/modules.html#packagescomponentsforeignlibs","text":"This option has no description. Type : attribute set of submodules Default : {} No Example","title":"packages..components.foreignlibs"},{"location":"reference/modules.html#packagescomponentsforeignlibsasmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..asmSources"},{"location":"reference/modules.html#packagescomponentsforeignlibsbuild-tools","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..build-tools"},{"location":"reference/modules.html#packagescomponentsforeignlibsbuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..buildable"},{"location":"reference/modules.html#packagescomponentsforeignlibscsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..cSources"},{"location":"reference/modules.html#packagescomponentsforeignlibscmmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..cmmSources"},{"location":"reference/modules.html#packagescomponentsforeignlibsconfigureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"packages..components.foreignlibs..configureAllComponents"},{"location":"reference/modules.html#packagescomponentsforeignlibsconfigureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.foreignlibs..configureFlags"},{"location":"reference/modules.html#packagescomponentsforeignlibscontentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"packages..components.foreignlibs..contentAddressed"},{"location":"reference/modules.html#packagescomponentsforeignlibscxxsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..cxxSources"},{"location":"reference/modules.html#packagescomponentsforeignlibsdepends","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..depends"},{"location":"reference/modules.html#packagescomponentsforeignlibsdocheck","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..doCheck"},{"location":"reference/modules.html#packagescomponentsforeignlibsdocoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"packages..components.foreignlibs..doCoverage"},{"location":"reference/modules.html#packagescomponentsforeignlibsdocrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"packages..components.foreignlibs..doCrossCheck"},{"location":"reference/modules.html#packagescomponentsforeignlibsdoexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.foreignlibs..doExactConfig"},{"location":"reference/modules.html#packagescomponentsforeignlibsdohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..doHaddock"},{"location":"reference/modules.html#packagescomponentsforeignlibsdohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..doHoogle"},{"location":"reference/modules.html#packagescomponentsforeignlibsdohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..doHyperlinkSource"},{"location":"reference/modules.html#packagescomponentsforeignlibsdoquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..doQuickjump"},{"location":"reference/modules.html#packagescomponentsforeignlibsdontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..dontPatchELF"},{"location":"reference/modules.html#packagescomponentsforeignlibsdontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..dontStrip"},{"location":"reference/modules.html#packagescomponentsforeignlibsenabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"packages..components.foreignlibs..enableDeadCodeElimination"},{"location":"reference/modules.html#packagescomponentsforeignlibsenablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.foreignlibs..enableLibraryProfiling"},{"location":"reference/modules.html#packagescomponentsforeignlibsenableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.foreignlibs..enableProfiling"},{"location":"reference/modules.html#packagescomponentsforeignlibsenableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..enableSeparateDataOutput"},{"location":"reference/modules.html#packagescomponentsforeignlibsenableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..enableShared"},{"location":"reference/modules.html#packagescomponentsforeignlibsenablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"packages..components.foreignlibs..enableStatic"},{"location":"reference/modules.html#packagescomponentsforeignlibsextrasrcfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..extraSrcFiles"},{"location":"reference/modules.html#packagescomponentsforeignlibsframeworks","text":"This option has no description. Type : list of packages Default : [] No Example","title":"packages..components.foreignlibs..frameworks"},{"location":"reference/modules.html#packagescomponentsforeignlibsghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.foreignlibs..ghcOptions"},{"location":"reference/modules.html#packagescomponentsforeignlibshardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.foreignlibs..hardeningDisable"},{"location":"reference/modules.html#packagescomponentsforeignlibshssourcedirs","text":"This option has no description. Type : list of unspecifieds Default : [\".\"] No Example","title":"packages..components.foreignlibs..hsSourceDirs"},{"location":"reference/modules.html#packagescomponentsforeignlibsincludedirs","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..includeDirs"},{"location":"reference/modules.html#packagescomponentsforeignlibsincludes","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..includes"},{"location":"reference/modules.html#packagescomponentsforeignlibsjssources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..jsSources"},{"location":"reference/modules.html#packagescomponentsforeignlibskeepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"packages..components.foreignlibs..keepSource"},{"location":"reference/modules.html#packagescomponentsforeignlibslibs","text":"This option has no description. Type : list of null or package or list of packagess Default : [] No Example","title":"packages..components.foreignlibs..libs"},{"location":"reference/modules.html#packagescomponentsforeignlibsmainpath","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..mainPath"},{"location":"reference/modules.html#packagescomponentsforeignlibsmodules","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.foreignlibs..modules"},{"location":"reference/modules.html#packagescomponentsforeignlibspkgconfig","text":"This option has no description. Type : list of list of packagess Default : [] No Example","title":"packages..components.foreignlibs..pkgconfig"},{"location":"reference/modules.html#packagescomponentsforeignlibsplanned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"packages..components.foreignlibs..planned"},{"location":"reference/modules.html#packagescomponentsforeignlibsplatforms","text":"This option has no description. Type : null or list of unspecifieds Default : null No Example","title":"packages..components.foreignlibs..platforms"},{"location":"reference/modules.html#packagescomponentsforeignlibsplugins","text":"This option has no description. Type : list of submodules Default : [] No Example","title":"packages..components.foreignlibs..plugins"},{"location":"reference/modules.html#packagescomponentsforeignlibspluginsargs","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.foreignlibs..plugins.*.args"},{"location":"reference/modules.html#packagescomponentsforeignlibspluginslibrary","text":"This option has no description. Type : unspecified No Default No Example","title":"packages..components.foreignlibs..plugins.*.library"},{"location":"reference/modules.html#packagescomponentsforeignlibspluginsmodulename","text":"This option has no description. Type : string No Default No Example","title":"packages..components.foreignlibs..plugins.*.moduleName"},{"location":"reference/modules.html#packagescomponentsforeignlibspostbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..postBuild"},{"location":"reference/modules.html#packagescomponentsforeignlibspostcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..postCheck"},{"location":"reference/modules.html#packagescomponentsforeignlibspostconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..postConfigure"},{"location":"reference/modules.html#packagescomponentsforeignlibsposthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..postHaddock"},{"location":"reference/modules.html#packagescomponentsforeignlibspostinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..postInstall"},{"location":"reference/modules.html#packagescomponentsforeignlibspostunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..postUnpack"},{"location":"reference/modules.html#packagescomponentsforeignlibsprebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..preBuild"},{"location":"reference/modules.html#packagescomponentsforeignlibsprecheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..preCheck"},{"location":"reference/modules.html#packagescomponentsforeignlibspreconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..preConfigure"},{"location":"reference/modules.html#packagescomponentsforeignlibsprehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..preHaddock"},{"location":"reference/modules.html#packagescomponentsforeignlibspreinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.foreignlibs..preInstall"},{"location":"reference/modules.html#packagescomponentsforeignlibspreunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"packages..components.foreignlibs..preUnpack"},{"location":"reference/modules.html#packagescomponentsforeignlibsprofilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"packages..components.foreignlibs..profilingDetail"},{"location":"reference/modules.html#packagescomponentsforeignlibssetupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.foreignlibs..setupBuildFlags"},{"location":"reference/modules.html#packagescomponentsforeignlibssetuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.foreignlibs..setupHaddockFlags"},{"location":"reference/modules.html#packagescomponentsforeignlibssetupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.foreignlibs..setupInstallFlags"},{"location":"reference/modules.html#packagescomponentsforeignlibsshellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"packages..components.foreignlibs..shellHook"},{"location":"reference/modules.html#packagescomponentsforeignlibstestflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.foreignlibs..testFlags"},{"location":"reference/modules.html#packagescomponentsforeignlibstestwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"packages..components.foreignlibs..testWrapper"},{"location":"reference/modules.html#packagescomponentsforeignlibswritehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"packages..components.foreignlibs..writeHieFiles"},{"location":"reference/modules.html#packagescomponentslibrary","text":"This option has no description. Type : null or submodule Default : null No Example","title":"packages..components.library"},{"location":"reference/modules.html#packagescomponentslibraryasmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.asmSources"},{"location":"reference/modules.html#packagescomponentslibrarybuild-tools","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.build-tools"},{"location":"reference/modules.html#packagescomponentslibrarybuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.library.buildable"},{"location":"reference/modules.html#packagescomponentslibrarycsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.cSources"},{"location":"reference/modules.html#packagescomponentslibrarycmmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.cmmSources"},{"location":"reference/modules.html#packagescomponentslibraryconfigureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"packages..components.library.configureAllComponents"},{"location":"reference/modules.html#packagescomponentslibraryconfigureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.library.configureFlags"},{"location":"reference/modules.html#packagescomponentslibrarycontentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"packages..components.library.contentAddressed"},{"location":"reference/modules.html#packagescomponentslibrarycxxsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.cxxSources"},{"location":"reference/modules.html#packagescomponentslibrarydepends","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.depends"},{"location":"reference/modules.html#packagescomponentslibrarydocheck","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.library.doCheck"},{"location":"reference/modules.html#packagescomponentslibrarydocoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"packages..components.library.doCoverage"},{"location":"reference/modules.html#packagescomponentslibrarydocrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"packages..components.library.doCrossCheck"},{"location":"reference/modules.html#packagescomponentslibrarydoexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.library.doExactConfig"},{"location":"reference/modules.html#packagescomponentslibrarydohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"packages..components.library.doHaddock"},{"location":"reference/modules.html#packagescomponentslibrarydohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"packages..components.library.doHoogle"},{"location":"reference/modules.html#packagescomponentslibrarydohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"packages..components.library.doHyperlinkSource"},{"location":"reference/modules.html#packagescomponentslibrarydoquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"packages..components.library.doQuickjump"},{"location":"reference/modules.html#packagescomponentslibrarydontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"packages..components.library.dontPatchELF"},{"location":"reference/modules.html#packagescomponentslibrarydontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"packages..components.library.dontStrip"},{"location":"reference/modules.html#packagescomponentslibraryenabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"packages..components.library.enableDeadCodeElimination"},{"location":"reference/modules.html#packagescomponentslibraryenablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.library.enableLibraryProfiling"},{"location":"reference/modules.html#packagescomponentslibraryenableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.library.enableProfiling"},{"location":"reference/modules.html#packagescomponentslibraryenableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.library.enableSeparateDataOutput"},{"location":"reference/modules.html#packagescomponentslibraryenableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"packages..components.library.enableShared"},{"location":"reference/modules.html#packagescomponentslibraryenablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"packages..components.library.enableStatic"},{"location":"reference/modules.html#packagescomponentslibraryextrasrcfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.extraSrcFiles"},{"location":"reference/modules.html#packagescomponentslibraryframeworks","text":"This option has no description. Type : list of packages Default : [] No Example","title":"packages..components.library.frameworks"},{"location":"reference/modules.html#packagescomponentslibraryghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.library.ghcOptions"},{"location":"reference/modules.html#packagescomponentslibraryhardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.library.hardeningDisable"},{"location":"reference/modules.html#packagescomponentslibraryhssourcedirs","text":"This option has no description. Type : list of unspecifieds Default : [\".\"] No Example","title":"packages..components.library.hsSourceDirs"},{"location":"reference/modules.html#packagescomponentslibraryincludedirs","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.includeDirs"},{"location":"reference/modules.html#packagescomponentslibraryincludes","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.includes"},{"location":"reference/modules.html#packagescomponentslibraryjssources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.jsSources"},{"location":"reference/modules.html#packagescomponentslibrarykeepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"packages..components.library.keepSource"},{"location":"reference/modules.html#packagescomponentslibrarylibs","text":"This option has no description. Type : list of null or package or list of packagess Default : [] No Example","title":"packages..components.library.libs"},{"location":"reference/modules.html#packagescomponentslibrarymainpath","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.mainPath"},{"location":"reference/modules.html#packagescomponentslibrarymodules","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.library.modules"},{"location":"reference/modules.html#packagescomponentslibrarypkgconfig","text":"This option has no description. Type : list of list of packagess Default : [] No Example","title":"packages..components.library.pkgconfig"},{"location":"reference/modules.html#packagescomponentslibraryplanned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"packages..components.library.planned"},{"location":"reference/modules.html#packagescomponentslibraryplatforms","text":"This option has no description. Type : null or list of unspecifieds Default : null No Example","title":"packages..components.library.platforms"},{"location":"reference/modules.html#packagescomponentslibraryplugins","text":"This option has no description. Type : list of submodules Default : [] No Example","title":"packages..components.library.plugins"},{"location":"reference/modules.html#packagescomponentslibrarypluginsargs","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.library.plugins.*.args"},{"location":"reference/modules.html#packagescomponentslibrarypluginslibrary","text":"This option has no description. Type : unspecified No Default No Example","title":"packages..components.library.plugins.*.library"},{"location":"reference/modules.html#packagescomponentslibrarypluginsmodulename","text":"This option has no description. Type : string No Default No Example","title":"packages..components.library.plugins.*.moduleName"},{"location":"reference/modules.html#packagescomponentslibrarypostbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.postBuild"},{"location":"reference/modules.html#packagescomponentslibrarypostcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.postCheck"},{"location":"reference/modules.html#packagescomponentslibrarypostconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.postConfigure"},{"location":"reference/modules.html#packagescomponentslibraryposthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.postHaddock"},{"location":"reference/modules.html#packagescomponentslibrarypostinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.postInstall"},{"location":"reference/modules.html#packagescomponentslibrarypostunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.postUnpack"},{"location":"reference/modules.html#packagescomponentslibraryprebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.preBuild"},{"location":"reference/modules.html#packagescomponentslibraryprecheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.preCheck"},{"location":"reference/modules.html#packagescomponentslibrarypreconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.preConfigure"},{"location":"reference/modules.html#packagescomponentslibraryprehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.preHaddock"},{"location":"reference/modules.html#packagescomponentslibrarypreinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.library.preInstall"},{"location":"reference/modules.html#packagescomponentslibrarypreunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"packages..components.library.preUnpack"},{"location":"reference/modules.html#packagescomponentslibraryprofilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"packages..components.library.profilingDetail"},{"location":"reference/modules.html#packagescomponentslibrarysetupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.library.setupBuildFlags"},{"location":"reference/modules.html#packagescomponentslibrarysetuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.library.setupHaddockFlags"},{"location":"reference/modules.html#packagescomponentslibrarysetupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.library.setupInstallFlags"},{"location":"reference/modules.html#packagescomponentslibraryshellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"packages..components.library.shellHook"},{"location":"reference/modules.html#packagescomponentslibrarytestflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.library.testFlags"},{"location":"reference/modules.html#packagescomponentslibrarytestwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"packages..components.library.testWrapper"},{"location":"reference/modules.html#packagescomponentslibrarywritehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"packages..components.library.writeHieFiles"},{"location":"reference/modules.html#packagescomponentssetup","text":"This option has no description. Type : null or submodule Default : {\"asmSources\":[],\"cSources\":[],\"cmmSources\":[],\"cxxSources\":[],\"depends\":[],\"doExactConfig\":false,\"extraSrcFiles\":[\"Setup.hs\",\"Setup.lhs\"],\"frameworks\":[],\"hsSourceDirs\":[\"setup-src\"],\"includeDirs\":[],\"jsSources\":[],\"libs\":[],\"platforms\":null} No Example","title":"packages..components.setup"},{"location":"reference/modules.html#packagescomponentssetupasmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.asmSources"},{"location":"reference/modules.html#packagescomponentssetupbuild-tools","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.build-tools"},{"location":"reference/modules.html#packagescomponentssetupbuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.setup.buildable"},{"location":"reference/modules.html#packagescomponentssetupcsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.cSources"},{"location":"reference/modules.html#packagescomponentssetupcmmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.cmmSources"},{"location":"reference/modules.html#packagescomponentssetupconfigureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"packages..components.setup.configureAllComponents"},{"location":"reference/modules.html#packagescomponentssetupconfigureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.setup.configureFlags"},{"location":"reference/modules.html#packagescomponentssetupcontentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"packages..components.setup.contentAddressed"},{"location":"reference/modules.html#packagescomponentssetupcxxsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.cxxSources"},{"location":"reference/modules.html#packagescomponentssetupdepends","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.depends"},{"location":"reference/modules.html#packagescomponentssetupdocheck","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.setup.doCheck"},{"location":"reference/modules.html#packagescomponentssetupdocoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"packages..components.setup.doCoverage"},{"location":"reference/modules.html#packagescomponentssetupdocrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"packages..components.setup.doCrossCheck"},{"location":"reference/modules.html#packagescomponentssetupdoexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.setup.doExactConfig"},{"location":"reference/modules.html#packagescomponentssetupdohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"packages..components.setup.doHaddock"},{"location":"reference/modules.html#packagescomponentssetupdohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"packages..components.setup.doHoogle"},{"location":"reference/modules.html#packagescomponentssetupdohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"packages..components.setup.doHyperlinkSource"},{"location":"reference/modules.html#packagescomponentssetupdoquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"packages..components.setup.doQuickjump"},{"location":"reference/modules.html#packagescomponentssetupdontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"packages..components.setup.dontPatchELF"},{"location":"reference/modules.html#packagescomponentssetupdontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"packages..components.setup.dontStrip"},{"location":"reference/modules.html#packagescomponentssetupenabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"packages..components.setup.enableDeadCodeElimination"},{"location":"reference/modules.html#packagescomponentssetupenablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.setup.enableLibraryProfiling"},{"location":"reference/modules.html#packagescomponentssetupenableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.setup.enableProfiling"},{"location":"reference/modules.html#packagescomponentssetupenableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.setup.enableSeparateDataOutput"},{"location":"reference/modules.html#packagescomponentssetupenableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"packages..components.setup.enableShared"},{"location":"reference/modules.html#packagescomponentssetupenablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"packages..components.setup.enableStatic"},{"location":"reference/modules.html#packagescomponentssetupextrasrcfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.extraSrcFiles"},{"location":"reference/modules.html#packagescomponentssetupframeworks","text":"This option has no description. Type : list of packages Default : [] No Example","title":"packages..components.setup.frameworks"},{"location":"reference/modules.html#packagescomponentssetupghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.setup.ghcOptions"},{"location":"reference/modules.html#packagescomponentssetuphardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.setup.hardeningDisable"},{"location":"reference/modules.html#packagescomponentssetuphssourcedirs","text":"This option has no description. Type : list of unspecifieds Default : [\".\"] No Example","title":"packages..components.setup.hsSourceDirs"},{"location":"reference/modules.html#packagescomponentssetupincludedirs","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.includeDirs"},{"location":"reference/modules.html#packagescomponentssetupincludes","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.includes"},{"location":"reference/modules.html#packagescomponentssetupjssources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.jsSources"},{"location":"reference/modules.html#packagescomponentssetupkeepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"packages..components.setup.keepSource"},{"location":"reference/modules.html#packagescomponentssetuplibs","text":"This option has no description. Type : list of null or package or list of packagess Default : [] No Example","title":"packages..components.setup.libs"},{"location":"reference/modules.html#packagescomponentssetupmainpath","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.mainPath"},{"location":"reference/modules.html#packagescomponentssetupmodules","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.setup.modules"},{"location":"reference/modules.html#packagescomponentssetuppkgconfig","text":"This option has no description. Type : list of list of packagess Default : [] No Example","title":"packages..components.setup.pkgconfig"},{"location":"reference/modules.html#packagescomponentssetupplanned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"packages..components.setup.planned"},{"location":"reference/modules.html#packagescomponentssetupplatforms","text":"This option has no description. Type : null or list of unspecifieds Default : null No Example","title":"packages..components.setup.platforms"},{"location":"reference/modules.html#packagescomponentssetupplugins","text":"This option has no description. Type : list of submodules Default : [] No Example","title":"packages..components.setup.plugins"},{"location":"reference/modules.html#packagescomponentssetuppluginsargs","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.setup.plugins.*.args"},{"location":"reference/modules.html#packagescomponentssetuppluginslibrary","text":"This option has no description. Type : unspecified No Default No Example","title":"packages..components.setup.plugins.*.library"},{"location":"reference/modules.html#packagescomponentssetuppluginsmodulename","text":"This option has no description. Type : string No Default No Example","title":"packages..components.setup.plugins.*.moduleName"},{"location":"reference/modules.html#packagescomponentssetuppostbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.postBuild"},{"location":"reference/modules.html#packagescomponentssetuppostcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.postCheck"},{"location":"reference/modules.html#packagescomponentssetuppostconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.postConfigure"},{"location":"reference/modules.html#packagescomponentssetupposthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.postHaddock"},{"location":"reference/modules.html#packagescomponentssetuppostinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.postInstall"},{"location":"reference/modules.html#packagescomponentssetuppostunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.postUnpack"},{"location":"reference/modules.html#packagescomponentssetupprebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.preBuild"},{"location":"reference/modules.html#packagescomponentssetupprecheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.preCheck"},{"location":"reference/modules.html#packagescomponentssetuppreconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.preConfigure"},{"location":"reference/modules.html#packagescomponentssetupprehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.preHaddock"},{"location":"reference/modules.html#packagescomponentssetuppreinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.setup.preInstall"},{"location":"reference/modules.html#packagescomponentssetuppreunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"packages..components.setup.preUnpack"},{"location":"reference/modules.html#packagescomponentssetupprofilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"packages..components.setup.profilingDetail"},{"location":"reference/modules.html#packagescomponentssetupsetupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.setup.setupBuildFlags"},{"location":"reference/modules.html#packagescomponentssetupsetuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.setup.setupHaddockFlags"},{"location":"reference/modules.html#packagescomponentssetupsetupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.setup.setupInstallFlags"},{"location":"reference/modules.html#packagescomponentssetupshellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"packages..components.setup.shellHook"},{"location":"reference/modules.html#packagescomponentssetuptestflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.setup.testFlags"},{"location":"reference/modules.html#packagescomponentssetuptestwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"packages..components.setup.testWrapper"},{"location":"reference/modules.html#packagescomponentssetupwritehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"packages..components.setup.writeHieFiles"},{"location":"reference/modules.html#packagescomponentssublibs","text":"This option has no description. Type : attribute set of submodules Default : {} No Example","title":"packages..components.sublibs"},{"location":"reference/modules.html#packagescomponentssublibsasmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..asmSources"},{"location":"reference/modules.html#packagescomponentssublibsbuild-tools","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..build-tools"},{"location":"reference/modules.html#packagescomponentssublibsbuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.sublibs..buildable"},{"location":"reference/modules.html#packagescomponentssublibscsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..cSources"},{"location":"reference/modules.html#packagescomponentssublibscmmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..cmmSources"},{"location":"reference/modules.html#packagescomponentssublibsconfigureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"packages..components.sublibs..configureAllComponents"},{"location":"reference/modules.html#packagescomponentssublibsconfigureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.sublibs..configureFlags"},{"location":"reference/modules.html#packagescomponentssublibscontentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"packages..components.sublibs..contentAddressed"},{"location":"reference/modules.html#packagescomponentssublibscxxsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..cxxSources"},{"location":"reference/modules.html#packagescomponentssublibsdepends","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..depends"},{"location":"reference/modules.html#packagescomponentssublibsdocheck","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.sublibs..doCheck"},{"location":"reference/modules.html#packagescomponentssublibsdocoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"packages..components.sublibs..doCoverage"},{"location":"reference/modules.html#packagescomponentssublibsdocrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"packages..components.sublibs..doCrossCheck"},{"location":"reference/modules.html#packagescomponentssublibsdoexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.sublibs..doExactConfig"},{"location":"reference/modules.html#packagescomponentssublibsdohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"packages..components.sublibs..doHaddock"},{"location":"reference/modules.html#packagescomponentssublibsdohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"packages..components.sublibs..doHoogle"},{"location":"reference/modules.html#packagescomponentssublibsdohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"packages..components.sublibs..doHyperlinkSource"},{"location":"reference/modules.html#packagescomponentssublibsdoquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"packages..components.sublibs..doQuickjump"},{"location":"reference/modules.html#packagescomponentssublibsdontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"packages..components.sublibs..dontPatchELF"},{"location":"reference/modules.html#packagescomponentssublibsdontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"packages..components.sublibs..dontStrip"},{"location":"reference/modules.html#packagescomponentssublibsenabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"packages..components.sublibs..enableDeadCodeElimination"},{"location":"reference/modules.html#packagescomponentssublibsenablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.sublibs..enableLibraryProfiling"},{"location":"reference/modules.html#packagescomponentssublibsenableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.sublibs..enableProfiling"},{"location":"reference/modules.html#packagescomponentssublibsenableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.sublibs..enableSeparateDataOutput"},{"location":"reference/modules.html#packagescomponentssublibsenableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"packages..components.sublibs..enableShared"},{"location":"reference/modules.html#packagescomponentssublibsenablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"packages..components.sublibs..enableStatic"},{"location":"reference/modules.html#packagescomponentssublibsextrasrcfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..extraSrcFiles"},{"location":"reference/modules.html#packagescomponentssublibsframeworks","text":"This option has no description. Type : list of packages Default : [] No Example","title":"packages..components.sublibs..frameworks"},{"location":"reference/modules.html#packagescomponentssublibsghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.sublibs..ghcOptions"},{"location":"reference/modules.html#packagescomponentssublibshardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.sublibs..hardeningDisable"},{"location":"reference/modules.html#packagescomponentssublibshssourcedirs","text":"This option has no description. Type : list of unspecifieds Default : [\".\"] No Example","title":"packages..components.sublibs..hsSourceDirs"},{"location":"reference/modules.html#packagescomponentssublibsincludedirs","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..includeDirs"},{"location":"reference/modules.html#packagescomponentssublibsincludes","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..includes"},{"location":"reference/modules.html#packagescomponentssublibsjssources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..jsSources"},{"location":"reference/modules.html#packagescomponentssublibskeepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"packages..components.sublibs..keepSource"},{"location":"reference/modules.html#packagescomponentssublibslibs","text":"This option has no description. Type : list of null or package or list of packagess Default : [] No Example","title":"packages..components.sublibs..libs"},{"location":"reference/modules.html#packagescomponentssublibsmainpath","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..mainPath"},{"location":"reference/modules.html#packagescomponentssublibsmodules","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.sublibs..modules"},{"location":"reference/modules.html#packagescomponentssublibspkgconfig","text":"This option has no description. Type : list of list of packagess Default : [] No Example","title":"packages..components.sublibs..pkgconfig"},{"location":"reference/modules.html#packagescomponentssublibsplanned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"packages..components.sublibs..planned"},{"location":"reference/modules.html#packagescomponentssublibsplatforms","text":"This option has no description. Type : null or list of unspecifieds Default : null No Example","title":"packages..components.sublibs..platforms"},{"location":"reference/modules.html#packagescomponentssublibsplugins","text":"This option has no description. Type : list of submodules Default : [] No Example","title":"packages..components.sublibs..plugins"},{"location":"reference/modules.html#packagescomponentssublibspluginsargs","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.sublibs..plugins.*.args"},{"location":"reference/modules.html#packagescomponentssublibspluginslibrary","text":"This option has no description. Type : unspecified No Default No Example","title":"packages..components.sublibs..plugins.*.library"},{"location":"reference/modules.html#packagescomponentssublibspluginsmodulename","text":"This option has no description. Type : string No Default No Example","title":"packages..components.sublibs..plugins.*.moduleName"},{"location":"reference/modules.html#packagescomponentssublibspostbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..postBuild"},{"location":"reference/modules.html#packagescomponentssublibspostcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..postCheck"},{"location":"reference/modules.html#packagescomponentssublibspostconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..postConfigure"},{"location":"reference/modules.html#packagescomponentssublibsposthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..postHaddock"},{"location":"reference/modules.html#packagescomponentssublibspostinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..postInstall"},{"location":"reference/modules.html#packagescomponentssublibspostunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..postUnpack"},{"location":"reference/modules.html#packagescomponentssublibsprebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..preBuild"},{"location":"reference/modules.html#packagescomponentssublibsprecheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..preCheck"},{"location":"reference/modules.html#packagescomponentssublibspreconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..preConfigure"},{"location":"reference/modules.html#packagescomponentssublibsprehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..preHaddock"},{"location":"reference/modules.html#packagescomponentssublibspreinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.sublibs..preInstall"},{"location":"reference/modules.html#packagescomponentssublibspreunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"packages..components.sublibs..preUnpack"},{"location":"reference/modules.html#packagescomponentssublibsprofilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"packages..components.sublibs..profilingDetail"},{"location":"reference/modules.html#packagescomponentssublibssetupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.sublibs..setupBuildFlags"},{"location":"reference/modules.html#packagescomponentssublibssetuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.sublibs..setupHaddockFlags"},{"location":"reference/modules.html#packagescomponentssublibssetupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.sublibs..setupInstallFlags"},{"location":"reference/modules.html#packagescomponentssublibsshellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"packages..components.sublibs..shellHook"},{"location":"reference/modules.html#packagescomponentssublibstestflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.sublibs..testFlags"},{"location":"reference/modules.html#packagescomponentssublibstestwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"packages..components.sublibs..testWrapper"},{"location":"reference/modules.html#packagescomponentssublibswritehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"packages..components.sublibs..writeHieFiles"},{"location":"reference/modules.html#packagescomponentstests","text":"This option has no description. Type : attribute set of submodules Default : {} No Example","title":"packages..components.tests"},{"location":"reference/modules.html#packagescomponentstestsasmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..asmSources"},{"location":"reference/modules.html#packagescomponentstestsbuild-tools","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..build-tools"},{"location":"reference/modules.html#packagescomponentstestsbuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.tests..buildable"},{"location":"reference/modules.html#packagescomponentstestscsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..cSources"},{"location":"reference/modules.html#packagescomponentstestscmmsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..cmmSources"},{"location":"reference/modules.html#packagescomponentstestsconfigureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"packages..components.tests..configureAllComponents"},{"location":"reference/modules.html#packagescomponentstestsconfigureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.tests..configureFlags"},{"location":"reference/modules.html#packagescomponentstestscontentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"packages..components.tests..contentAddressed"},{"location":"reference/modules.html#packagescomponentstestscxxsources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..cxxSources"},{"location":"reference/modules.html#packagescomponentstestsdepends","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..depends"},{"location":"reference/modules.html#packagescomponentstestsdocheck","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.tests..doCheck"},{"location":"reference/modules.html#packagescomponentstestsdocoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"packages..components.tests..doCoverage"},{"location":"reference/modules.html#packagescomponentstestsdocrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"packages..components.tests..doCrossCheck"},{"location":"reference/modules.html#packagescomponentstestsdoexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.tests..doExactConfig"},{"location":"reference/modules.html#packagescomponentstestsdohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"packages..components.tests..doHaddock"},{"location":"reference/modules.html#packagescomponentstestsdohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"packages..components.tests..doHoogle"},{"location":"reference/modules.html#packagescomponentstestsdohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"packages..components.tests..doHyperlinkSource"},{"location":"reference/modules.html#packagescomponentstestsdoquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"packages..components.tests..doQuickjump"},{"location":"reference/modules.html#packagescomponentstestsdontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"packages..components.tests..dontPatchELF"},{"location":"reference/modules.html#packagescomponentstestsdontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"packages..components.tests..dontStrip"},{"location":"reference/modules.html#packagescomponentstestsenabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"packages..components.tests..enableDeadCodeElimination"},{"location":"reference/modules.html#packagescomponentstestsenablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.tests..enableLibraryProfiling"},{"location":"reference/modules.html#packagescomponentstestsenableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..components.tests..enableProfiling"},{"location":"reference/modules.html#packagescomponentstestsenableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..components.tests..enableSeparateDataOutput"},{"location":"reference/modules.html#packagescomponentstestsenableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"packages..components.tests..enableShared"},{"location":"reference/modules.html#packagescomponentstestsenablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"packages..components.tests..enableStatic"},{"location":"reference/modules.html#packagescomponentstestsextrasrcfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..extraSrcFiles"},{"location":"reference/modules.html#packagescomponentstestsframeworks","text":"This option has no description. Type : list of packages Default : [] No Example","title":"packages..components.tests..frameworks"},{"location":"reference/modules.html#packagescomponentstestsghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.tests..ghcOptions"},{"location":"reference/modules.html#packagescomponentstestshardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.tests..hardeningDisable"},{"location":"reference/modules.html#packagescomponentstestshssourcedirs","text":"This option has no description. Type : list of unspecifieds Default : [\".\"] No Example","title":"packages..components.tests..hsSourceDirs"},{"location":"reference/modules.html#packagescomponentstestsincludedirs","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..includeDirs"},{"location":"reference/modules.html#packagescomponentstestsincludes","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..includes"},{"location":"reference/modules.html#packagescomponentstestsjssources","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..jsSources"},{"location":"reference/modules.html#packagescomponentstestskeepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"packages..components.tests..keepSource"},{"location":"reference/modules.html#packagescomponentstestslibs","text":"This option has no description. Type : list of null or package or list of packagess Default : [] No Example","title":"packages..components.tests..libs"},{"location":"reference/modules.html#packagescomponentstestsmainpath","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..mainPath"},{"location":"reference/modules.html#packagescomponentstestsmodules","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..components.tests..modules"},{"location":"reference/modules.html#packagescomponentstestspkgconfig","text":"This option has no description. Type : list of list of packagess Default : [] No Example","title":"packages..components.tests..pkgconfig"},{"location":"reference/modules.html#packagescomponentstestsplanned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"packages..components.tests..planned"},{"location":"reference/modules.html#packagescomponentstestsplatforms","text":"This option has no description. Type : null or list of unspecifieds Default : null No Example","title":"packages..components.tests..platforms"},{"location":"reference/modules.html#packagescomponentstestsplugins","text":"This option has no description. Type : list of submodules Default : [] No Example","title":"packages..components.tests..plugins"},{"location":"reference/modules.html#packagescomponentstestspluginsargs","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.tests..plugins.*.args"},{"location":"reference/modules.html#packagescomponentstestspluginslibrary","text":"This option has no description. Type : unspecified No Default No Example","title":"packages..components.tests..plugins.*.library"},{"location":"reference/modules.html#packagescomponentstestspluginsmodulename","text":"This option has no description. Type : string No Default No Example","title":"packages..components.tests..plugins.*.moduleName"},{"location":"reference/modules.html#packagescomponentstestspostbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..postBuild"},{"location":"reference/modules.html#packagescomponentstestspostcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..postCheck"},{"location":"reference/modules.html#packagescomponentstestspostconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..postConfigure"},{"location":"reference/modules.html#packagescomponentstestsposthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..postHaddock"},{"location":"reference/modules.html#packagescomponentstestspostinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..postInstall"},{"location":"reference/modules.html#packagescomponentstestspostunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..postUnpack"},{"location":"reference/modules.html#packagescomponentstestsprebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..preBuild"},{"location":"reference/modules.html#packagescomponentstestsprecheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..preCheck"},{"location":"reference/modules.html#packagescomponentstestspreconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..preConfigure"},{"location":"reference/modules.html#packagescomponentstestsprehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..preHaddock"},{"location":"reference/modules.html#packagescomponentstestspreinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..components.tests..preInstall"},{"location":"reference/modules.html#packagescomponentstestspreunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"packages..components.tests..preUnpack"},{"location":"reference/modules.html#packagescomponentstestsprofilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"packages..components.tests..profilingDetail"},{"location":"reference/modules.html#packagescomponentstestssetupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.tests..setupBuildFlags"},{"location":"reference/modules.html#packagescomponentstestssetuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.tests..setupHaddockFlags"},{"location":"reference/modules.html#packagescomponentstestssetupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.tests..setupInstallFlags"},{"location":"reference/modules.html#packagescomponentstestsshellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"packages..components.tests..shellHook"},{"location":"reference/modules.html#packagescomponentsteststestflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..components.tests..testFlags"},{"location":"reference/modules.html#packagescomponentsteststestwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"packages..components.tests..testWrapper"},{"location":"reference/modules.html#packagescomponentstestswritehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"packages..components.tests..writeHieFiles"},{"location":"reference/modules.html#packagesconfigureallcomponents","text":"If set all the components in the package are configured (useful for cabal-doctest). Type : boolean Default : false No Example","title":"packages..configureAllComponents"},{"location":"reference/modules.html#packagesconfigureflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..configureFlags"},{"location":"reference/modules.html#packagescontentaddressed","text":"Build content addressed derivation, requires Nix to have experimental feature ca-derivations enabled. Type : boolean Default : false No Example","title":"packages..contentAddressed"},{"location":"reference/modules.html#packagesdocheck","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..doCheck"},{"location":"reference/modules.html#packagesdocoverage","text":"Enable production of test coverage reports. Type : boolean Default : false No Example","title":"packages..doCoverage"},{"location":"reference/modules.html#packagesdocrosscheck","text":"Run doCheck also in cross compilation settings. This can be tricky as the test logic must know how to run the tests on the target. Type : boolean Default : false No Example","title":"packages..doCrossCheck"},{"location":"reference/modules.html#packagesdoexactconfig","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..doExactConfig"},{"location":"reference/modules.html#packagesdohaddock","text":"Enable building of the Haddock documentation from the annotated Haskell source code. Type : boolean Default : true No Example","title":"packages..doHaddock"},{"location":"reference/modules.html#packagesdohoogle","text":"Also build a hoogle index. Type : boolean Default : true No Example","title":"packages..doHoogle"},{"location":"reference/modules.html#packagesdohyperlinksource","text":"Link documentation to the source code. Type : boolean Default : true No Example","title":"packages..doHyperlinkSource"},{"location":"reference/modules.html#packagesdoquickjump","text":"Generate an index for interactive documentation navigation. Type : boolean Default : true No Example","title":"packages..doQuickjump"},{"location":"reference/modules.html#packagesdontpatchelf","text":"If set, the patchelf command is not used to remove unnecessary RPATH entries. Only applies to Linux. Type : boolean Default : true No Example","title":"packages..dontPatchELF"},{"location":"reference/modules.html#packagesdontstrip","text":"If set, libraries and executables are not stripped. Type : boolean Default : true No Example","title":"packages..dontStrip"},{"location":"reference/modules.html#packagesenabledeadcodeelimination","text":"If set, enables split sections for link-time dead-code stripping. Only applies to Linux Type : boolean Default : true No Example","title":"packages..enableDeadCodeElimination"},{"location":"reference/modules.html#packagesenablelibraryprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..enableLibraryProfiling"},{"location":"reference/modules.html#packagesenableprofiling","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..enableProfiling"},{"location":"reference/modules.html#packagesenableseparatedataoutput","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..enableSeparateDataOutput"},{"location":"reference/modules.html#packagesenableshared","text":"If set, enables building shared libraries. Type : boolean Default : true No Example","title":"packages..enableShared"},{"location":"reference/modules.html#packagesenablestatic","text":"If set, enables building static libraries and executables. Type : boolean Default : true No Example","title":"packages..enableStatic"},{"location":"reference/modules.html#packagesflags","text":"This option has no description. Type : attribute set of booleans No Default No Example","title":"packages..flags"},{"location":"reference/modules.html#packagesghcoptions","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..ghcOptions"},{"location":"reference/modules.html#packageshardeningdisable","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..hardeningDisable"},{"location":"reference/modules.html#packageskeepsource","text":"Keep component source in the store in a source output Type : boolean Default : false No Example","title":"packages..keepSource"},{"location":"reference/modules.html#packagesname","text":"This option has no description. Type : string Default : \"${config.package.identifier.name}-${config.package.identifier.version}\" No Example","title":"packages..name"},{"location":"reference/modules.html#packagespackageauthor","text":"This option has no description. Type : string No Default No Example","title":"packages..package.author"},{"location":"reference/modules.html#packagespackagebuildtype","text":"This option has no description. Type : string No Default No Example","title":"packages..package.buildType"},{"location":"reference/modules.html#packagespackagebuildable","text":"This option has no description. Type : boolean Default : true No Example","title":"packages..package.buildable"},{"location":"reference/modules.html#packagespackagecleanhpack","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..package.cleanHpack"},{"location":"reference/modules.html#packagespackagecopyright","text":"This option has no description. Type : string No Default No Example","title":"packages..package.copyright"},{"location":"reference/modules.html#packagespackagedatadir","text":"This option has no description. Type : string Default : \"\" No Example","title":"packages..package.dataDir"},{"location":"reference/modules.html#packagespackagedatafiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..package.dataFiles"},{"location":"reference/modules.html#packagespackagedescription","text":"This option has no description. Type : string No Default No Example","title":"packages..package.description"},{"location":"reference/modules.html#packagespackagedetaillevel","text":"This option has no description. Type : string Default : \"MinimalDetails\" No Example","title":"packages..package.detailLevel"},{"location":"reference/modules.html#packagespackageextradocfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..package.extraDocFiles"},{"location":"reference/modules.html#packagespackageextrasrcfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..package.extraSrcFiles"},{"location":"reference/modules.html#packagespackageextratmpfiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..package.extraTmpFiles"},{"location":"reference/modules.html#packagespackagehomepage","text":"This option has no description. Type : string No Default No Example","title":"packages..package.homepage"},{"location":"reference/modules.html#packagespackageidentifiername","text":"This option has no description. Type : string No Default No Example","title":"packages..package.identifier.name"},{"location":"reference/modules.html#packagespackageidentifierversion","text":"This option has no description. Type : string No Default No Example","title":"packages..package.identifier.version"},{"location":"reference/modules.html#packagespackageislocal","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..package.isLocal"},{"location":"reference/modules.html#packagespackageisproject","text":"This option has no description. Type : boolean Default : false No Example","title":"packages..package.isProject"},{"location":"reference/modules.html#packagespackagelicense","text":"This option has no description. Type : string No Default No Example","title":"packages..package.license"},{"location":"reference/modules.html#packagespackagelicensefiles","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..package.licenseFiles"},{"location":"reference/modules.html#packagespackagemaintainer","text":"This option has no description. Type : string No Default No Example","title":"packages..package.maintainer"},{"location":"reference/modules.html#packagespackagesetup-depends","text":"This option has no description. Type : list of unspecifieds Default : [] No Example","title":"packages..package.setup-depends"},{"location":"reference/modules.html#packagespackagespecversion","text":"This option has no description. Type : string No Default No Example","title":"packages..package.specVersion"},{"location":"reference/modules.html#packagespackagesynopsis","text":"This option has no description. Type : string No Default No Example","title":"packages..package.synopsis"},{"location":"reference/modules.html#packagespackageurl","text":"This option has no description. Type : string No Default No Example","title":"packages..package.url"},{"location":"reference/modules.html#packagespatches","text":"This option has no description. Type : list of unspecified or paths Default : [] No Example","title":"packages..patches"},{"location":"reference/modules.html#packagesplanned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"packages..planned"},{"location":"reference/modules.html#packagespostbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..postBuild"},{"location":"reference/modules.html#packagespostcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..postCheck"},{"location":"reference/modules.html#packagespostconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..postConfigure"},{"location":"reference/modules.html#packagesposthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..postHaddock"},{"location":"reference/modules.html#packagespostinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..postInstall"},{"location":"reference/modules.html#packagespostunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..postUnpack"},{"location":"reference/modules.html#packagesprebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..preBuild"},{"location":"reference/modules.html#packagesprecheck","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..preCheck"},{"location":"reference/modules.html#packagespreconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..preConfigure"},{"location":"reference/modules.html#packagesprehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..preHaddock"},{"location":"reference/modules.html#packagespreinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..preInstall"},{"location":"reference/modules.html#packagespreunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"packages..preUnpack"},{"location":"reference/modules.html#packagesprofilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"packages..profilingDetail"},{"location":"reference/modules.html#packagesrevision","text":"This option has no description. Type : null or signed integer Default : null No Example","title":"packages..revision"},{"location":"reference/modules.html#packagesrevisionsha256","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..revisionSha256"},{"location":"reference/modules.html#packagessetupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..setupBuildFlags"},{"location":"reference/modules.html#packagessetuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..setupHaddockFlags"},{"location":"reference/modules.html#packagessetupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..setupInstallFlags"},{"location":"reference/modules.html#packagessha256","text":"This option has no description. Type : null or string Default : null No Example","title":"packages..sha256"},{"location":"reference/modules.html#packagesshellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"packages..shellHook"},{"location":"reference/modules.html#packagessrc","text":"This option has no description. Type : path or package Default : \"pkgs.fetchurl { url = \\\"mirror://hackage/${config.name}.tar.gz\\\"; inherit (config) sha256; };\" No Example","title":"packages..src"},{"location":"reference/modules.html#packagestestflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"packages..testFlags"},{"location":"reference/modules.html#packagestestwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"packages..testWrapper"},{"location":"reference/modules.html#packageswritehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"packages..writeHieFiles"},{"location":"reference/modules.html#planned","text":"Set to true by plan-to-nix for any component that was included in the plan.json file. Type : boolean Default : false No Example","title":"planned"},{"location":"reference/modules.html#postbuild","text":"This option has no description. Type : null or string Default : null No Example","title":"postBuild"},{"location":"reference/modules.html#postcheck","text":"This option has no description. Type : null or string Default : null No Example","title":"postCheck"},{"location":"reference/modules.html#postconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"postConfigure"},{"location":"reference/modules.html#posthaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"postHaddock"},{"location":"reference/modules.html#postinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"postInstall"},{"location":"reference/modules.html#postunpack","text":"This option has no description. Type : null or string Default : null No Example","title":"postUnpack"},{"location":"reference/modules.html#prebuild","text":"This option has no description. Type : null or string Default : null No Example","title":"preBuild"},{"location":"reference/modules.html#precheck","text":"This option has no description. Type : null or string Default : null No Example","title":"preCheck"},{"location":"reference/modules.html#preconfigure","text":"This option has no description. Type : null or string Default : null No Example","title":"preConfigure"},{"location":"reference/modules.html#prehaddock","text":"This option has no description. Type : null or string Default : null No Example","title":"preHaddock"},{"location":"reference/modules.html#preinstall","text":"This option has no description. Type : null or string Default : null No Example","title":"preInstall"},{"location":"reference/modules.html#preunpack","text":"This option has no description. Type : null or strings concatenated with \"\\n\" Default : null No Example","title":"preUnpack"},{"location":"reference/modules.html#profilingdetail","text":"This option has no description. Type : null or string Default : \"default\" No Example","title":"profilingDetail"},{"location":"reference/modules.html#reinstallablelibghc","text":"Is lib:ghc reinstallable? Type : boolean Default : true No Example","title":"reinstallableLibGhc"},{"location":"reference/modules.html#setup-depends","text":"pkgs to globally provide to Setup.hs builds Type : list of unspecifieds Default : [] No Example","title":"setup-depends"},{"location":"reference/modules.html#setupbuildflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"setupBuildFlags"},{"location":"reference/modules.html#setuphaddockflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"setupHaddockFlags"},{"location":"reference/modules.html#setupinstallflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"setupInstallFlags"},{"location":"reference/modules.html#shellhook","text":"Hook to run when entering a shell Type : unspecified Default : \"\" No Example","title":"shellHook"},{"location":"reference/modules.html#testflags","text":"This option has no description. Type : list of strings Default : [] No Example","title":"testFlags"},{"location":"reference/modules.html#testwrapper","text":"A command to run for executing tests in checkPhase, which takes the original test command as its arguments. Type : list of strings Default : [] Example : \"echo\"","title":"testWrapper"},{"location":"reference/modules.html#writehiefiles","text":"Write component .hie files in the store in a hie output Type : boolean Default : false No Example","title":"writeHieFiles"},{"location":"reference/supported-ghc-versions.html","text":"Supported GHC Versions \u00b6 The following GHC versions are defined in haskell.nix (there is a derivation for each, though not all are cached or tested by CI): - 8.4.4 - 8.6.{1,2,3,4,5} - 8.8.{1,2,3,4} - 8.10.{1,2,3,4,5} - 9.0.1 - 9.2.1 - 9.2.2 The following table shows the Nixpkgs/GHC versions which are built/cached, and which of those are further tested. If you use a combination of Nixpkgs version and GHC version which is in this table, you should hit our cache, saving considering time by not building GHC and a few additional tools. Note that if you try to use haskell.nix as an overlay over Nixpkgs from a standard Nixpkgs channel you will likely get a cache miss. To hit our cache you really should use an instance of Nixpkgs provided by haskell.nix itself. Nixpkgs version Nixpkgs pinning GHC version compiler-nix-name Tested in CI? 21.11 nixpkgs-2111 8.6.5 ghc865 No 21.11 nixpkgs-2111 8.10.7 ghc8107 Yes unstable nixpkgs-unstable 8.6.5 ghc865 No unstable nixpkgs-unstable 8.8.4 ghc884 No unstable nixpkgs-unstable 8.10.7 ghc8107 Yes unstable nixpkgs-unstable 9.0.2 ghc902 Yes unstable nixpkgs-unstable 9.2.4 ghc924 Yes See ci.nix for the source of truth about what is built and tested (in the off chance this document is out-of-sync with your checkout). See the getting started guide for instructions on how to set up Nix to take advantage of our cache when building. This guide also covers where to use the Nixpkgs pinning and compiler-nix-name settings from the table above. For further information, see the instructions for how to pin Nixpkgs . See overlays/bootstrap.nix for a full list of all the valid compiler-nix-name s beyond what's cached/tested in CI. You're free to use these, but be ready for longer build times. Lastly, see instructions on adding new GHC versions in the event that what's in haskell.nix doesn't suit your needs.","title":"Supported GHC versions"},{"location":"reference/supported-ghc-versions.html#supported-ghc-versions","text":"The following GHC versions are defined in haskell.nix (there is a derivation for each, though not all are cached or tested by CI): - 8.4.4 - 8.6.{1,2,3,4,5} - 8.8.{1,2,3,4} - 8.10.{1,2,3,4,5} - 9.0.1 - 9.2.1 - 9.2.2 The following table shows the Nixpkgs/GHC versions which are built/cached, and which of those are further tested. If you use a combination of Nixpkgs version and GHC version which is in this table, you should hit our cache, saving considering time by not building GHC and a few additional tools. Note that if you try to use haskell.nix as an overlay over Nixpkgs from a standard Nixpkgs channel you will likely get a cache miss. To hit our cache you really should use an instance of Nixpkgs provided by haskell.nix itself. Nixpkgs version Nixpkgs pinning GHC version compiler-nix-name Tested in CI? 21.11 nixpkgs-2111 8.6.5 ghc865 No 21.11 nixpkgs-2111 8.10.7 ghc8107 Yes unstable nixpkgs-unstable 8.6.5 ghc865 No unstable nixpkgs-unstable 8.8.4 ghc884 No unstable nixpkgs-unstable 8.10.7 ghc8107 Yes unstable nixpkgs-unstable 9.0.2 ghc902 Yes unstable nixpkgs-unstable 9.2.4 ghc924 Yes See ci.nix for the source of truth about what is built and tested (in the off chance this document is out-of-sync with your checkout). See the getting started guide for instructions on how to set up Nix to take advantage of our cache when building. This guide also covers where to use the Nixpkgs pinning and compiler-nix-name settings from the table above. For further information, see the instructions for how to pin Nixpkgs . See overlays/bootstrap.nix for a full list of all the valid compiler-nix-name s beyond what's cached/tested in CI. You're free to use these, but be ready for longer build times. Lastly, see instructions on adding new GHC versions in the event that what's in haskell.nix doesn't suit your needs.","title":"Supported GHC Versions"},{"location":"tutorials/building-package-from-stackage-hackage.html","text":"Build a specific package from Hackage or Stackage \u00b6 From a Stackage snapshot \u00b6 To build a package, say lens , from a Stackage snapshot, say lts-13.28 , you could run: nix build '(with import <nixpkgs> (import (builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz\") {}).nixpkgsArgs; haskell-nix.snapshots.\"lts-13.28\").lens.components.library' This would build the (public) library component of the lens package as fixed by the lts-13.28 stackage snapshot. Nightly snapshots like nightly-2020-06-21 are also available. A specific version from Hackage \u00b6 To build any package from hackage, say lens , at any version, say 4.17.1, you could run: nix build '(with import <nixpkgs> (import (builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz\") {}).nixpkgsArgs; (haskell-nix.hackage-package { name = \"lens\"; version = \"4.17.1\"; compiler-nix-name = \"ghc8102\"; })).components.library' This would build the (public) library component of the lens-4.17.1 package from hackage. Pinning hackage index \u00b6 The dependencies would be resolved against the most recent hackage-index-state which comes with your haskell.nix checkout via the hackage.nix pin. A specific one can be specified as well: nix build '(with import <nixpkgs> (import (builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz\") {}).nixpkgsArgs; (haskell-nix.hackage-package { name = \"lens\"; version = \"4.17.1\"; compiler-nix-name = \"ghc8102\"; index-state = \"2019-07-14T00:00:00Z\"; })).components.library' This would use the hackage index as of 2019-07-14T00:00:00Z to produce a build plan for the lens-4.17.1 package.","title":"Build a specific package from Hackage or Stackage"},{"location":"tutorials/building-package-from-stackage-hackage.html#build-a-specific-package-from-hackage-or-stackage","text":"","title":"Build a specific package from Hackage or Stackage"},{"location":"tutorials/building-package-from-stackage-hackage.html#from-a-stackage-snapshot","text":"To build a package, say lens , from a Stackage snapshot, say lts-13.28 , you could run: nix build '(with import <nixpkgs> (import (builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz\") {}).nixpkgsArgs; haskell-nix.snapshots.\"lts-13.28\").lens.components.library' This would build the (public) library component of the lens package as fixed by the lts-13.28 stackage snapshot. Nightly snapshots like nightly-2020-06-21 are also available.","title":"From a Stackage snapshot"},{"location":"tutorials/building-package-from-stackage-hackage.html#a-specific-version-from-hackage","text":"To build any package from hackage, say lens , at any version, say 4.17.1, you could run: nix build '(with import <nixpkgs> (import (builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz\") {}).nixpkgsArgs; (haskell-nix.hackage-package { name = \"lens\"; version = \"4.17.1\"; compiler-nix-name = \"ghc8102\"; })).components.library' This would build the (public) library component of the lens-4.17.1 package from hackage.","title":"A specific version from Hackage"},{"location":"tutorials/building-package-from-stackage-hackage.html#pinning-hackage-index","text":"The dependencies would be resolved against the most recent hackage-index-state which comes with your haskell.nix checkout via the hackage.nix pin. A specific one can be specified as well: nix build '(with import <nixpkgs> (import (builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz\") {}).nixpkgsArgs; (haskell-nix.hackage-package { name = \"lens\"; version = \"4.17.1\"; compiler-nix-name = \"ghc8102\"; index-state = \"2019-07-14T00:00:00Z\"; })).components.library' This would use the hackage index as of 2019-07-14T00:00:00Z to produce a build plan for the lens-4.17.1 package.","title":"Pinning hackage index"},{"location":"tutorials/ca-derivations.html","text":"Content addressed derivations \u00b6 Introduction \u00b6 Floating content addressed derivations (from now CA derivations ) is an experimental feature which substantially change how the hashes in the store paths are calculated. Indeed, normally derivations are input addressed i.e. the outputs store paths depends only on the derivation inputs, instead with CA derivations they depend on the content of the outputs. This has two main advantages: The so-called \"early cutoff\", namely the ability of Nix to stop a build if the build outputs would be something already built. For example suppose you add a comment in an Haskell source, at this point Nix will rebuild the component depending on this source but since the output will be the same (adding a comment is an \"output-invariant\" change for ghc ) every other component that depends on that will not be rebuilt. Users of the same Nix store does not need to trust each other when using substituters. You can find more information in the ca-derivations page on the wiki (and in the other resources linked there). Usage \u00b6 Enable CA derivations in your system \u00b6 First of all your Nix installation must support the ca-derivations experimental feature, this can done by adding the following in your nix.conf : experimental-features = ca-derivations Or if you use NixOS: nix.extraOptions = '' experimental-features = ca-derivations ''; Enable CA derivations in your project \u00b6 At this point you can pass a new module to project' that tells haskell.nix to build every component in the project as CA derivation. haskell-nix.project' { # ... modules = [{ contentAddressed = true; # packages.project-name.components.exes.executable.contentAddressed = true; }]; }; Optionally you can also specify which components you don't want to be content addressed. Known problems \u00b6 Limitation of the current CA derivations implementation \u00b6 As explained in the RFC 62 The current implementation has a naive approach that just forbids fetching a path if the local system has a different realisation for the same drv output. This approach is simple and correct, but it's possible that it might not be good-enough in practice as it can result in a totally useless binary cache in some pathological cases. For example, suppose that your machine builds a derivation A producing an output A.out in your store and that after that a CI machine builds the same derivation A but producing a different output A.out' and populating a cache with this output. At this point, if you need to build a derivation B that depends on A , since you already have the realisation A.out in your local store and you can't get B.out from the cache and you will end up building B even if one of its realisation is in the cache. This means that, in some cases, enabling CA derivations would lead to more rebuilds than not having it. Hydra \u00b6 Hydra currently doesn't support CA derivations, efforts are being made in this direction. GHC is not deterministic \u00b6 Currently ghc is determinstic only disabling the parallel building i.e. passing -j1 . Here the upstream issue. Having a deterministic ghc would be a dream since it will automatically fix all the pathological cases about substituters discussed above and would allow haskell.nix to parallel build even when using CA derivations.","title":"Content addressed derivations"},{"location":"tutorials/ca-derivations.html#content-addressed-derivations","text":"","title":"Content addressed derivations"},{"location":"tutorials/ca-derivations.html#introduction","text":"Floating content addressed derivations (from now CA derivations ) is an experimental feature which substantially change how the hashes in the store paths are calculated. Indeed, normally derivations are input addressed i.e. the outputs store paths depends only on the derivation inputs, instead with CA derivations they depend on the content of the outputs. This has two main advantages: The so-called \"early cutoff\", namely the ability of Nix to stop a build if the build outputs would be something already built. For example suppose you add a comment in an Haskell source, at this point Nix will rebuild the component depending on this source but since the output will be the same (adding a comment is an \"output-invariant\" change for ghc ) every other component that depends on that will not be rebuilt. Users of the same Nix store does not need to trust each other when using substituters. You can find more information in the ca-derivations page on the wiki (and in the other resources linked there).","title":"Introduction"},{"location":"tutorials/ca-derivations.html#usage","text":"","title":"Usage"},{"location":"tutorials/ca-derivations.html#enable-ca-derivations-in-your-system","text":"First of all your Nix installation must support the ca-derivations experimental feature, this can done by adding the following in your nix.conf : experimental-features = ca-derivations Or if you use NixOS: nix.extraOptions = '' experimental-features = ca-derivations '';","title":"Enable CA derivations in your system"},{"location":"tutorials/ca-derivations.html#enable-ca-derivations-in-your-project","text":"At this point you can pass a new module to project' that tells haskell.nix to build every component in the project as CA derivation. haskell-nix.project' { # ... modules = [{ contentAddressed = true; # packages.project-name.components.exes.executable.contentAddressed = true; }]; }; Optionally you can also specify which components you don't want to be content addressed.","title":"Enable CA derivations in your project"},{"location":"tutorials/ca-derivations.html#known-problems","text":"","title":"Known problems"},{"location":"tutorials/ca-derivations.html#limitation-of-the-current-ca-derivations-implementation","text":"As explained in the RFC 62 The current implementation has a naive approach that just forbids fetching a path if the local system has a different realisation for the same drv output. This approach is simple and correct, but it's possible that it might not be good-enough in practice as it can result in a totally useless binary cache in some pathological cases. For example, suppose that your machine builds a derivation A producing an output A.out in your store and that after that a CI machine builds the same derivation A but producing a different output A.out' and populating a cache with this output. At this point, if you need to build a derivation B that depends on A , since you already have the realisation A.out in your local store and you can't get B.out from the cache and you will end up building B even if one of its realisation is in the cache. This means that, in some cases, enabling CA derivations would lead to more rebuilds than not having it.","title":"Limitation of the current CA derivations implementation"},{"location":"tutorials/ca-derivations.html#hydra","text":"Hydra currently doesn't support CA derivations, efforts are being made in this direction.","title":"Hydra"},{"location":"tutorials/ca-derivations.html#ghc-is-not-deterministic","text":"Currently ghc is determinstic only disabling the parallel building i.e. passing -j1 . Here the upstream issue. Having a deterministic ghc would be a dream since it will automatically fix all the pathological cases about substituters discussed above and would allow haskell.nix to parallel build even when using CA derivations.","title":"GHC is not deterministic"},{"location":"tutorials/clean-git.html","text":"cleanGit \u00b6 To filter out just the files in your git index use haskell-nix.haskellLib.cleanGit { src = ./.; } where ./. is the root of your git repo (or a git work tree). First it filters just the files needed to run git index , then it uses the results of that to filter your directory. It does not need to parse the .gitignore files at all, but we do need to git add our files before they will be included. cleanGit source . In addition haskell.nix (including cleanGit ) uses a version of cleanSourceWith with a subdir argument to filter out just the package it is building. Then it uses the info from the cabal file to filter just the source dirs for the component it is building. That way if we modify a test in a package nix will not rebuild the library in that package (or anything that depends on that package's library). There is a downside to this though. If we have a test that depends on something outside the scope of what is described in its entry in the in the .cabal file it will not see it. For instance perhaps it needs to run hlint or doctest on the library source. There are ways to fix this with a module: Use extraSrcFiles to add dirs the test needs (this will not result in a change to the .cabal file the test will still be built the same). components.tests.test.extraSrcFiles = [ \"subdir-needed-by-test\" ]; Or alternatively, override the source with a suitable filter function. components.tests.test.src = haskell-nix.haskellLib.cleanSourceWith { inherit src; subdir = \"path-to-package\"; filter = ... }; Multiple Git Repositories with cleanGits \u00b6 Some times it is handy to temporarily use a relative path between git repos. If the repos are individually cleaned this is not possible (since the cleaned version of one repo will never include the files of the other). There are 3 options: We could symlinkJoin the cleaned directories together, but the result could not be cleaned and any change would to either repo would result in a rebuild of everything. We could add one repo to the other as a submodule, but adding and then removing a submodule is a pain and it does not work well if you have more than one repo that needs to share the submodule. We could add a source-repository-package but then we would have to commit each change before testing. cleanGits allows us to specify a root directory and any number of sub directories containing git repos. For example if repoA and repoB are two git repos with cabal packages and want to use the repoB package when building repoA . First we can add ../repoB to repoA/cabal.project : packages: ./. ../repoB Then in repoA/default.nix we can use: haskell-nix.project { src = haskell-nix.haskellLib.cleanSourceWith { src = haskell-nix.haskellLib.cleanGits { name = \"root\"; src = ../.; # Parent dir that contains repoA and repoB gitDirs = [ \"repoA\" \"repoB\" ]; }; subDir = \"repoA\"; # Where to look for the `cabal.project` includeSiblings = true; # Tells it not to exclude `repoB` dir }; }","title":"Sourcing files only part of git repository using cleanGit"},{"location":"tutorials/clean-git.html#cleangit","text":"To filter out just the files in your git index use haskell-nix.haskellLib.cleanGit { src = ./.; } where ./. is the root of your git repo (or a git work tree). First it filters just the files needed to run git index , then it uses the results of that to filter your directory. It does not need to parse the .gitignore files at all, but we do need to git add our files before they will be included. cleanGit source . In addition haskell.nix (including cleanGit ) uses a version of cleanSourceWith with a subdir argument to filter out just the package it is building. Then it uses the info from the cabal file to filter just the source dirs for the component it is building. That way if we modify a test in a package nix will not rebuild the library in that package (or anything that depends on that package's library). There is a downside to this though. If we have a test that depends on something outside the scope of what is described in its entry in the in the .cabal file it will not see it. For instance perhaps it needs to run hlint or doctest on the library source. There are ways to fix this with a module: Use extraSrcFiles to add dirs the test needs (this will not result in a change to the .cabal file the test will still be built the same). components.tests.test.extraSrcFiles = [ \"subdir-needed-by-test\" ]; Or alternatively, override the source with a suitable filter function. components.tests.test.src = haskell-nix.haskellLib.cleanSourceWith { inherit src; subdir = \"path-to-package\"; filter = ... };","title":"cleanGit"},{"location":"tutorials/clean-git.html#multiple-git-repositories-with-cleangits","text":"Some times it is handy to temporarily use a relative path between git repos. If the repos are individually cleaned this is not possible (since the cleaned version of one repo will never include the files of the other). There are 3 options: We could symlinkJoin the cleaned directories together, but the result could not be cleaned and any change would to either repo would result in a rebuild of everything. We could add one repo to the other as a submodule, but adding and then removing a submodule is a pain and it does not work well if you have more than one repo that needs to share the submodule. We could add a source-repository-package but then we would have to commit each change before testing. cleanGits allows us to specify a root directory and any number of sub directories containing git repos. For example if repoA and repoB are two git repos with cabal packages and want to use the repoB package when building repoA . First we can add ../repoB to repoA/cabal.project : packages: ./. ../repoB Then in repoA/default.nix we can use: haskell-nix.project { src = haskell-nix.haskellLib.cleanSourceWith { src = haskell-nix.haskellLib.cleanGits { name = \"root\"; src = ../.; # Parent dir that contains repoA and repoB gitDirs = [ \"repoA\" \"repoB\" ]; }; subDir = \"repoA\"; # Where to look for the `cabal.project` includeSiblings = true; # Tells it not to exclude `repoB` dir }; }","title":"Multiple Git Repositories with cleanGits"},{"location":"tutorials/coverage.html","text":"Coverage \u00b6 haskell.nix can generate coverage information for your package or project using Cabal's inbuilt hpc support. Prerequisites \u00b6 To get a sensible coverage report, you need to enable coverage on each of the packages of your project: pkgs.haskell-nix.project { src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; compiler-nix-name = \"ghc884\"; modules = [{ packages.$pkg.components.library.doCoverage = true; }]; } If you would like to make coverage optional, add an argument to your nix expression: { withCoverage ? false }: pkgs.haskell-nix.project { src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; compiler-nix-name = \"ghc884\"; modules = pkgs.lib.optional withCoverage [{ packages.$pkg.components.library.doCoverage = true; }]; } Per-package \u00b6 nix-build default.nix -A \"projectWithCoverage.$pkg.coverageReport\" This will generate a coverage report for the package you requested. All tests that are enabled (configured with doCheck == true ) are included in the coverage report. See the developer coverage docs for more information. Project-wide \u00b6 nix-build default.nix -A \"projectWithCoverage.projectCoverageReport\" This will generate a coverage report for all the local packages in your project. See the developer coverage docs for more information. Custom \u00b6 By default, the behaviour of the coverageReport attribute is to generate a coverage report that describes how that package affects the coverage of all local packages (including itself) in the project. The default behaviour of projectCoverageReport is to sum the default coverage reports (produced by the above process) of all local packages in the project. You can modify this behaviour by using the coverageReport and projectCoverageReport functions found in the haskell.nix library: let inherit (pkgs.haskell-nix) haskellLib; project = haskellLib.project { src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; compiler-nix-name = \"ghc884\"; modules = [{ packages.$pkgA.components.library.doCoverage = true; packages.$pkgB.components.library.doCoverage = true; }]; }; # Generate a coverage report for $pkgA that only includes the # unit-test check and only shows coverage information for $pkgA, not # $pkgB. custom$pkgACoverageReport = haskellLib.coverageReport rec { name = \"$pkgA-unit-tests-only\" inherit (project.$pkgA.components) library; checks = [project.$pkgA.components.checks.unit-test]; # Note that this is the default value of the \"mixLibraries\" # argument and so this line isn't really necessary. mixLibraries = [project.$pkgA.components.library]; }; custom$pkgBCoverageReport = haskellLib.coverageReport rec { name = \"$pkgB-unit-tests-only\" inherit (project.$pkgB.components) library; checks = [project.$pkgB.components.checks.unit-test]; mixLibraries = [project.$pkgB.components.library]; }; # Generate a project coverage report that only includes the unit # tests of the project, and only shows how each unit test effects # the coverage of it's package, and not other packages in the # project. allUnitTestsProjectReport = haskellLib.projectCoverageReport [custom$pkgACoverageReport custom$pkgBCoverageReport]; in { inherit project custom$pkgACoverageReport custom$pkgBCoverageReport allUnitTestsProjectCoverageReport; }","title":"Generating coverage information"},{"location":"tutorials/coverage.html#coverage","text":"haskell.nix can generate coverage information for your package or project using Cabal's inbuilt hpc support.","title":"Coverage"},{"location":"tutorials/coverage.html#prerequisites","text":"To get a sensible coverage report, you need to enable coverage on each of the packages of your project: pkgs.haskell-nix.project { src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; compiler-nix-name = \"ghc884\"; modules = [{ packages.$pkg.components.library.doCoverage = true; }]; } If you would like to make coverage optional, add an argument to your nix expression: { withCoverage ? false }: pkgs.haskell-nix.project { src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; compiler-nix-name = \"ghc884\"; modules = pkgs.lib.optional withCoverage [{ packages.$pkg.components.library.doCoverage = true; }]; }","title":"Prerequisites"},{"location":"tutorials/coverage.html#per-package","text":"nix-build default.nix -A \"projectWithCoverage.$pkg.coverageReport\" This will generate a coverage report for the package you requested. All tests that are enabled (configured with doCheck == true ) are included in the coverage report. See the developer coverage docs for more information.","title":"Per-package"},{"location":"tutorials/coverage.html#project-wide","text":"nix-build default.nix -A \"projectWithCoverage.projectCoverageReport\" This will generate a coverage report for all the local packages in your project. See the developer coverage docs for more information.","title":"Project-wide"},{"location":"tutorials/coverage.html#custom","text":"By default, the behaviour of the coverageReport attribute is to generate a coverage report that describes how that package affects the coverage of all local packages (including itself) in the project. The default behaviour of projectCoverageReport is to sum the default coverage reports (produced by the above process) of all local packages in the project. You can modify this behaviour by using the coverageReport and projectCoverageReport functions found in the haskell.nix library: let inherit (pkgs.haskell-nix) haskellLib; project = haskellLib.project { src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; compiler-nix-name = \"ghc884\"; modules = [{ packages.$pkgA.components.library.doCoverage = true; packages.$pkgB.components.library.doCoverage = true; }]; }; # Generate a coverage report for $pkgA that only includes the # unit-test check and only shows coverage information for $pkgA, not # $pkgB. custom$pkgACoverageReport = haskellLib.coverageReport rec { name = \"$pkgA-unit-tests-only\" inherit (project.$pkgA.components) library; checks = [project.$pkgA.components.checks.unit-test]; # Note that this is the default value of the \"mixLibraries\" # argument and so this line isn't really necessary. mixLibraries = [project.$pkgA.components.library]; }; custom$pkgBCoverageReport = haskellLib.coverageReport rec { name = \"$pkgB-unit-tests-only\" inherit (project.$pkgB.components) library; checks = [project.$pkgB.components.checks.unit-test]; mixLibraries = [project.$pkgB.components.library]; }; # Generate a project coverage report that only includes the unit # tests of the project, and only shows how each unit test effects # the coverage of it's package, and not other packages in the # project. allUnitTestsProjectReport = haskellLib.projectCoverageReport [custom$pkgACoverageReport custom$pkgBCoverageReport]; in { inherit project custom$pkgACoverageReport custom$pkgBCoverageReport allUnitTestsProjectCoverageReport; }","title":"Custom"},{"location":"tutorials/cross-compilation.html","text":"Cross compilation of Haskell projects involves building a version of GHC that outputs code for the target platform, and providing builds of all library dependencies for that platform. First, understand how to cross-compile a normal package from Nixpkgs. Matthew Bauer's Beginners' guide to cross compilation in Nixpkgs is a useful resource. Using an example from the guide, this builds GNU Hello for a Raspberry Pi: nix build -f '<nixpkgs>' pkgsCross.raspberryPi.hello We will use the same principle in Haskell.nix \u2014 replacing the normal package set pkgs with a cross-compiling package set pkgsCross.raspberryPi . Raspberry Pi example \u00b6 This is an example of using Haskell.nix to build the Bench command-line utility, which is a Haskell program. { pkgs ? import <nixpkgs> {} }: let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz); native = haskellNix { inherit pkgs; }; in native.haskellPackages.bench.components.exes.bench Now switch the package set as in the previous example: { pkgs ? import <nixpkgs> {} }: let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz); raspberryPi = haskellNix { pkgs = pkgs.pkgsCross.raspberryPi; }; in raspberryPi.haskellPackages.bench.components.exes.bench You should be prepared for a long wait because it first needs to build GHC, before building all the Haskell dependencies of Bench . If all of these dependencies compiled successfully, I would be very surprised! Hint The above example won't build, but you can try and see, if you like. It will fail on clock-0.7.2 , which needs a patch to build. To fix the build problems, you must add extra configuration to the package set. Your project will have a mkStackPkgSet or mkCabalProjectPkgSet . It is there where you must add module options for setting compiler flags, adding patches, and so on. Note Note that haskell.nix will automatically use qemu to emulate the target when necessary to run Template Haskell splices. Static executables with Musl libc \u00b6 Another application of cross-compiling is to produce fully static binaries for Linux. For information about how to do that with the Nixpkgs Haskell infrastructure (not Haskell.nix ), see nh2/static\u2011haskell\u2011nix . Vaibhav Sagar's linked blog post is also very informative. { pkgs ? import <nixpkgs> {} }: let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz); musl64 = haskellNix { pkgs = pkgs.pkgsCross.musl64; }; in musl64.haskellPackages.bench.components.exes.bench This example will build Bench linked against Musl libc. However the executable will still be dynamically linked. To get fully static executables you must add package overrides to: Disable dynamic linking Provide static versions of system libraries. (For more details, see Vaibhav's article ). { packages.bench.components.exes.bench.configureFlags = lib.optionals stdenv.hostPlatform.isMusl [ \"--disable-executable-dynamic\" \"--disable-shared\" \"--ghc-option=-optl=-pthread\" \"--ghc-option=-optl=-static\" \"--ghc-option=-optl=-L${gmp6.override { withStatic = true; }}/lib\" \"--ghc-option=-optl=-L${zlib.static}/lib\" ]; } Licensing Note that if copyleft licensing your program is a problem for you, then you need to statically link with integer-simple rather than integer-gmp . However, at present, Haskell.nix does not provide an option for this. How to cross-compile your project \u00b6 Set up your project Haskell package set. # default.nix { pkgs ? import <nixpkgs> {} let # Import the Haskell.nix library, haskell = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) { inherit pkgs; }; # Instantiate a package set using the generated file. pkgSet = haskell.mkCabalProjectPkgSet { plan-pkgs = import ./pkgs.nix; pkg-def-extras = []; modules = [ { # You will need to put build fixes here. } ]; }; in pkgSet.config.hsPkgs Apply that package set to the Nixpkgs cross package sets that you are interested in. We are going to expand the pkgs.pkgsCross shortcut to be more explicit. let pkgs = import <nixpkgs> {} in { shortcut = pkgs.pkgsCross.SYSTEM; actual = import <nixpkgs> { crossSystem = pkgs.lib.systems.examples.SYSTEM; }; } In the above example, for any SYSTEM , shortcut and actual are the same package set. # release.nix let myProject = import ./default.nix; pkgsNative = import <nixpkgs> {}; pkgsRaspberryPi = import <nixpkgs> { crossSystem = pkgsNative.lib.systems.examples.raspberryPi; }; native = myProject { pkgs = pkgsNative; }; crossRaspberryPi = myProject { pkgs = pkgsRaspberryPi; }; in { my-project-native = native.my-project.components.exes.my-project; my-project-raspberry-pi = crossRaspberryPi.my-project.components.exes.my-project; } Try to build it, and apply fixes to the modules list, until there are no errors left.","title":"Cross-compiling your project"},{"location":"tutorials/cross-compilation.html#raspberry-pi-example","text":"This is an example of using Haskell.nix to build the Bench command-line utility, which is a Haskell program. { pkgs ? import <nixpkgs> {} }: let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz); native = haskellNix { inherit pkgs; }; in native.haskellPackages.bench.components.exes.bench Now switch the package set as in the previous example: { pkgs ? import <nixpkgs> {} }: let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz); raspberryPi = haskellNix { pkgs = pkgs.pkgsCross.raspberryPi; }; in raspberryPi.haskellPackages.bench.components.exes.bench You should be prepared for a long wait because it first needs to build GHC, before building all the Haskell dependencies of Bench . If all of these dependencies compiled successfully, I would be very surprised! Hint The above example won't build, but you can try and see, if you like. It will fail on clock-0.7.2 , which needs a patch to build. To fix the build problems, you must add extra configuration to the package set. Your project will have a mkStackPkgSet or mkCabalProjectPkgSet . It is there where you must add module options for setting compiler flags, adding patches, and so on. Note Note that haskell.nix will automatically use qemu to emulate the target when necessary to run Template Haskell splices.","title":"Raspberry Pi example"},{"location":"tutorials/cross-compilation.html#static-executables-with-musl-libc","text":"Another application of cross-compiling is to produce fully static binaries for Linux. For information about how to do that with the Nixpkgs Haskell infrastructure (not Haskell.nix ), see nh2/static\u2011haskell\u2011nix . Vaibhav Sagar's linked blog post is also very informative. { pkgs ? import <nixpkgs> {} }: let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz); musl64 = haskellNix { pkgs = pkgs.pkgsCross.musl64; }; in musl64.haskellPackages.bench.components.exes.bench This example will build Bench linked against Musl libc. However the executable will still be dynamically linked. To get fully static executables you must add package overrides to: Disable dynamic linking Provide static versions of system libraries. (For more details, see Vaibhav's article ). { packages.bench.components.exes.bench.configureFlags = lib.optionals stdenv.hostPlatform.isMusl [ \"--disable-executable-dynamic\" \"--disable-shared\" \"--ghc-option=-optl=-pthread\" \"--ghc-option=-optl=-static\" \"--ghc-option=-optl=-L${gmp6.override { withStatic = true; }}/lib\" \"--ghc-option=-optl=-L${zlib.static}/lib\" ]; } Licensing Note that if copyleft licensing your program is a problem for you, then you need to statically link with integer-simple rather than integer-gmp . However, at present, Haskell.nix does not provide an option for this.","title":"Static executables with Musl libc"},{"location":"tutorials/cross-compilation.html#how-to-cross-compile-your-project","text":"Set up your project Haskell package set. # default.nix { pkgs ? import <nixpkgs> {} let # Import the Haskell.nix library, haskell = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) { inherit pkgs; }; # Instantiate a package set using the generated file. pkgSet = haskell.mkCabalProjectPkgSet { plan-pkgs = import ./pkgs.nix; pkg-def-extras = []; modules = [ { # You will need to put build fixes here. } ]; }; in pkgSet.config.hsPkgs Apply that package set to the Nixpkgs cross package sets that you are interested in. We are going to expand the pkgs.pkgsCross shortcut to be more explicit. let pkgs = import <nixpkgs> {} in { shortcut = pkgs.pkgsCross.SYSTEM; actual = import <nixpkgs> { crossSystem = pkgs.lib.systems.examples.SYSTEM; }; } In the above example, for any SYSTEM , shortcut and actual are the same package set. # release.nix let myProject = import ./default.nix; pkgsNative = import <nixpkgs> {}; pkgsRaspberryPi = import <nixpkgs> { crossSystem = pkgsNative.lib.systems.examples.raspberryPi; }; native = myProject { pkgs = pkgsNative; }; crossRaspberryPi = myProject { pkgs = pkgsRaspberryPi; }; in { my-project-native = native.my-project.components.exes.my-project; my-project-raspberry-pi = crossRaspberryPi.my-project.components.exes.my-project; } Try to build it, and apply fixes to the modules list, until there are no errors left.","title":"How to cross-compile your project"},{"location":"tutorials/development.html","text":"Haskell.nix also provides reproducible development environments for your Haskell projects. These environments can contain not only GHC and your Haskell package dependencies, but also the required system libraries and build tools. Inside the development shell, you can run commands such as ghc , ghci , or cabal new\u2011build ( cabal build on Cabal 3.0), and they will have all dependencies available. Every dependency will be cached in your Nix store. If you have set up Hydra CI, then your team can share pre-built dependencies. These examples assume that you have created your package set as described in Creating Nix builds for your projects and it exists in a file called default.nix . Note Old-style cabal build and stack builds are not (yet) supported. For example, stack will (by design) download and rebuild all dependencies, even though they are available in the shell. However, if you have a Stack project, you can generate the package set with Haskell.nix, then use cabal new\u2011build to work on it. Starting Cabal 3.0 cabal build will work out of the box, as new style builds are the default. How to get a development shell \u00b6 If you have a Cabal or Stack project with one or more packages (i.e. multiple .cabal files, not a single package with multiple components), then you will need a development environment that contains the dependencies of your packages, but not the packages themselves. This is what the shellFor function does. # shell.nix let project = import ./default.nix; in project.shellFor { # ALL of these arguments are optional. # List of packages from the project you want to work on in # the shell (default is all the projects local packages). packages = ps: with ps; [ pkga pkgb ]; # Builds a Hoogle documentation index of all dependencies, # and provides a \"hoogle\" command to search the index. withHoogle = true; # Some common tools can be added with the `tools` argument tools = { cabal = \"3.2.0.0\"; hlint = \"latest\"; # Selects the latest version in the hackage.nix snapshot haskell-language-server = \"latest\"; }; # See overlays/tools.nix for more details # Some you may need to get some other way. buildInputs = [ (import <nixpkgs> {}).git ]; # Sellect cross compilers to include. crossPlatforms = ps: with ps; [ ghcjs # Adds support for `js-unknown-ghcjs-cabal build` in the shell # mingwW64 # Adds support for `x86_64-W64-mingw32-cabal build` in the shell ]; # Prevents cabal from choosing alternate plans, so that # *all* dependencies are provided by Nix. exactDeps = true; } See also: Haskell.nix Library Reference: shellFor How to get a local Hoogle index \u00b6 If you need a local Hoogle for all the dependencies of your project create this file # shell-hoogle.nix let project = import ./default.nix {}; in project.shellFor { packages = ps: [ps.my-package]; withHoogle = true; } and run nix-shell shell-hoogle.nix --run \"hoogle server --local\" . This will open a local Hoogle server at http://127.0.0.1:8080 . How to get an ad-hoc development shell including certain packages \u00b6 This creates a development environment with the given packages registered in the package database. The ghcWithPackages function operates on a Haskell.nix package set, and accepts an argument that selects packages from the larger package set. # shell.nix let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) {}; nixpkgs = import haskellNix.sources.nixpkgs haskellNix.nixpkgsArgs; haskell = nixpkgs.haskell-nix; in haskell.haskellPackages.ghcWithPackages (ps: with ps; [ lens conduit conduit-extra ]) If you need a Hoogle documentation index, use ghcWithHoogle in place of ghcWithPackages . How to get packages from a certain Stackage snapshot \u00b6 Haskell.nix knows about every released Stackage snapshot. You can use it to build packages from a given snapshot, without setting up a full project. let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) {}; nixpkgs = import haskellNix.sources.nixpkgs haskellNix.nixpkgsArgs; haskell = nixpkgs.haskell-nix; in haskell.snapshots.\"lts-13.18\".alex.components.exes.alex There are Haskell.nix package sets for every Stackage snaphot under haskell.snapshots . The alias haskell.haskellPackages corresponds to the package set for a recent LTS Haskell version. You can use ghcWithPackages on any of these package sets to quickly get a shell with some packages. Warning The build will not work if your Nixpkgs does not contain the version of GHC specified in the snapshot. Nixpkgs only carries the latest version of each recent release series, so many snapshots can't be built. Emacs IDE support \u00b6 Once you have a development shell, then you can begin configuring Emacs to use it. The way I do it is: Run lorri watch to continuously build the shell environment and maintain GC roots. Use emacs\u2011direnv to push the development environment into Emacs. Use Dante for highlighting errors and auto-completion. You must customize Dante to prevent it from automatically using nix\u2011shell or stack . Trim dante\u2011methods to just new\u2011build and bare\u2011ghci . You can also use .dir\u2011locals.el for this. If your project has multiple targets, set dante\u2011target per-directory. For haskell\u2011mode interactive Haskell, set haskell\u2011process\u2011type to cabal\u2011new\u2011repl . Using nix repl \u00b6 It's sometimes useful to load Haskell.nix in the REPL to explore attrsets and try examples. # example.nix { nixpkgs ? <nixpkgs> }: rec { haskell = import nixpkgs (import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) {}).nixpkgsArgs; pkgNames = haskell.pkgs.lib.attrNames haskell.haskell-nix.snapshots.\"lts-13.18\"; } Load the example file: $ nix repl '<nixpkgs>' example.nix Welcome to Nix version 2.3pre6631_e58a7144. Type :? for help. Loading '<nixpkgs>'... Added 10403 variables. Loading 'example.nix'... Added 2 variables. nix-repl> lib.take 5 pkgNames [ \"ALUT\" \"ANum\" \"Allure\" \"Boolean\" \"BoundedChan\" ] nix-repl> Now that you have nix-tools and are able to import Haskell.nix , you can continue to the next chapter.","title":"Creating a development environment"},{"location":"tutorials/development.html#how-to-get-a-development-shell","text":"If you have a Cabal or Stack project with one or more packages (i.e. multiple .cabal files, not a single package with multiple components), then you will need a development environment that contains the dependencies of your packages, but not the packages themselves. This is what the shellFor function does. # shell.nix let project = import ./default.nix; in project.shellFor { # ALL of these arguments are optional. # List of packages from the project you want to work on in # the shell (default is all the projects local packages). packages = ps: with ps; [ pkga pkgb ]; # Builds a Hoogle documentation index of all dependencies, # and provides a \"hoogle\" command to search the index. withHoogle = true; # Some common tools can be added with the `tools` argument tools = { cabal = \"3.2.0.0\"; hlint = \"latest\"; # Selects the latest version in the hackage.nix snapshot haskell-language-server = \"latest\"; }; # See overlays/tools.nix for more details # Some you may need to get some other way. buildInputs = [ (import <nixpkgs> {}).git ]; # Sellect cross compilers to include. crossPlatforms = ps: with ps; [ ghcjs # Adds support for `js-unknown-ghcjs-cabal build` in the shell # mingwW64 # Adds support for `x86_64-W64-mingw32-cabal build` in the shell ]; # Prevents cabal from choosing alternate plans, so that # *all* dependencies are provided by Nix. exactDeps = true; } See also: Haskell.nix Library Reference: shellFor","title":"How to get a development shell"},{"location":"tutorials/development.html#how-to-get-a-local-hoogle-index","text":"If you need a local Hoogle for all the dependencies of your project create this file # shell-hoogle.nix let project = import ./default.nix {}; in project.shellFor { packages = ps: [ps.my-package]; withHoogle = true; } and run nix-shell shell-hoogle.nix --run \"hoogle server --local\" . This will open a local Hoogle server at http://127.0.0.1:8080 .","title":"How to get a local Hoogle index"},{"location":"tutorials/development.html#how-to-get-an-ad-hoc-development-shell-including-certain-packages","text":"This creates a development environment with the given packages registered in the package database. The ghcWithPackages function operates on a Haskell.nix package set, and accepts an argument that selects packages from the larger package set. # shell.nix let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) {}; nixpkgs = import haskellNix.sources.nixpkgs haskellNix.nixpkgsArgs; haskell = nixpkgs.haskell-nix; in haskell.haskellPackages.ghcWithPackages (ps: with ps; [ lens conduit conduit-extra ]) If you need a Hoogle documentation index, use ghcWithHoogle in place of ghcWithPackages .","title":"How to get an ad-hoc development shell including certain packages"},{"location":"tutorials/development.html#how-to-get-packages-from-a-certain-stackage-snapshot","text":"Haskell.nix knows about every released Stackage snapshot. You can use it to build packages from a given snapshot, without setting up a full project. let haskellNix = import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) {}; nixpkgs = import haskellNix.sources.nixpkgs haskellNix.nixpkgsArgs; haskell = nixpkgs.haskell-nix; in haskell.snapshots.\"lts-13.18\".alex.components.exes.alex There are Haskell.nix package sets for every Stackage snaphot under haskell.snapshots . The alias haskell.haskellPackages corresponds to the package set for a recent LTS Haskell version. You can use ghcWithPackages on any of these package sets to quickly get a shell with some packages. Warning The build will not work if your Nixpkgs does not contain the version of GHC specified in the snapshot. Nixpkgs only carries the latest version of each recent release series, so many snapshots can't be built.","title":"How to get packages from a certain Stackage snapshot"},{"location":"tutorials/development.html#emacs-ide-support","text":"Once you have a development shell, then you can begin configuring Emacs to use it. The way I do it is: Run lorri watch to continuously build the shell environment and maintain GC roots. Use emacs\u2011direnv to push the development environment into Emacs. Use Dante for highlighting errors and auto-completion. You must customize Dante to prevent it from automatically using nix\u2011shell or stack . Trim dante\u2011methods to just new\u2011build and bare\u2011ghci . You can also use .dir\u2011locals.el for this. If your project has multiple targets, set dante\u2011target per-directory. For haskell\u2011mode interactive Haskell, set haskell\u2011process\u2011type to cabal\u2011new\u2011repl .","title":"Emacs IDE support"},{"location":"tutorials/development.html#using-nix-repl","text":"It's sometimes useful to load Haskell.nix in the REPL to explore attrsets and try examples. # example.nix { nixpkgs ? <nixpkgs> }: rec { haskell = import nixpkgs (import (builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz) {}).nixpkgsArgs; pkgNames = haskell.pkgs.lib.attrNames haskell.haskell-nix.snapshots.\"lts-13.18\"; } Load the example file: $ nix repl '<nixpkgs>' example.nix Welcome to Nix version 2.3pre6631_e58a7144. Type :? for help. Loading '<nixpkgs>'... Added 10403 variables. Loading 'example.nix'... Added 2 variables. nix-repl> lib.take 5 pkgNames [ \"ALUT\" \"ANum\" \"Allure\" \"Boolean\" \"BoundedChan\" ] nix-repl> Now that you have nix-tools and are able to import Haskell.nix , you can continue to the next chapter.","title":"Using nix repl"},{"location":"tutorials/getting-started-flakes.html","text":"Getting started with flakes \u00b6 This version of the getting started guide is for users who are using Nix Flakes . The non flakes version of the guide is here . haskell.nix can automatically translate your Cabal or Stack project and its dependencies into Nix code. Assuming you have Nix installed, you can start setting up your project. Setting up the binary cache \u00b6 IMPORTANT: you must do this or you will build several copies of GHC! You can configure Nix to use our binary cache, which is pushed to by CI, so should contain the artifacts that you need. You need to add the following sections to /etc/nix/nix.conf or, if you are a trusted user, ~/.config/nix/nix.conf (if you don't know what a \"trusted user\" is, you probably want to do the former). trusted-public-keys = [...] hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= [...] substituters = [...] https://cache.iog.io [...] If you're running NixOS, you need to add/update the following in your /etc/nixos/configuration.nix files instead. # Binary Cache for Haskell.nix nix.settings.trusted-public-keys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.settings.substituters = [ \"https://cache.iog.io\" ]; NixOS-21.11 and older use slightly different settings. # Binary Cache for Haskell.nix nix.binaryCachePublicKeys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.binaryCaches = [ \"https://cache.iog.io\" ]; This can be tricky to get setup properly. If you're still having trouble getting cache hits, consult the corresponding troubleshooting section . Scaffolding \u00b6 The following work with stack.yaml and cabal.project based projects. Add flake.nix : { description = \"A very basic flake\"; inputs.haskellNix.url = \"github:input-output-hk/haskell.nix\"; inputs.nixpkgs.follows = \"haskellNix/nixpkgs-unstable\"; inputs.flake-utils.url = \"github:numtide/flake-utils\"; outputs = { self, nixpkgs, flake-utils, haskellNix }: flake-utils.lib.eachSystem [ \"x86_64-linux\" \"x86_64-darwin\" ] (system: let overlays = [ haskellNix.overlay (final: prev: { # This overlay adds our project to pkgs helloProject = final.haskell-nix.project' { src = ./.; compiler-nix-name = \"ghc8104\"; # This is used by `nix develop .` to open a shell for use with # `cabal`, `hlint` and `haskell-language-server` shell.tools = { cabal = {}; hlint = {}; haskell-language-server = {}; }; # Non-Haskell shell tools go here shell.buildInputs = with pkgs; [ nixpkgs-fmt ]; # This adds `js-unknown-ghcjs-cabal` to the shell. # shell.crossPlatforms = p: [p.ghcjs]; }; }) ]; pkgs = import nixpkgs { inherit system overlays; inherit (haskellNix) config; }; flake = pkgs.helloProject.flake { # This adds support for `nix build .#js-unknown-ghcjs-cabal:hello:exe:hello` # crossPlatforms = p: [p.ghcjs]; }; in flake // { # Built by `nix build .` defaultPackage = flake.packages.\"hello:exe:hello\"; }); } git dependencies If you have git dependencies in your project, you'll need to calculate sha256 hashes for them . Working with a project \u00b6 Top-level attributes are Haskell packages (incl. dependencies) part of your project. To build the library component of a package in the project run: nix build .#your-package-name:lib:your-package-name There are also other components such as exe , test and benchmark . To build an executable: nix build .#your-package-name:exe:your-exe-name To use the devShell provided by the flake run: nix develop . cabal repl your-package-name:lib:your-package-name cabal build your-package-name To open a shell for use with stack see the following issue . Going forward \u00b6 Read through project function reference to see how the API works. There are a number of things to explore further in the tutorials section.","title":"Getting started with Flakes"},{"location":"tutorials/getting-started-flakes.html#getting-started-with-flakes","text":"This version of the getting started guide is for users who are using Nix Flakes . The non flakes version of the guide is here . haskell.nix can automatically translate your Cabal or Stack project and its dependencies into Nix code. Assuming you have Nix installed, you can start setting up your project.","title":"Getting started with flakes"},{"location":"tutorials/getting-started-flakes.html#setting-up-the-binary-cache","text":"IMPORTANT: you must do this or you will build several copies of GHC! You can configure Nix to use our binary cache, which is pushed to by CI, so should contain the artifacts that you need. You need to add the following sections to /etc/nix/nix.conf or, if you are a trusted user, ~/.config/nix/nix.conf (if you don't know what a \"trusted user\" is, you probably want to do the former). trusted-public-keys = [...] hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= [...] substituters = [...] https://cache.iog.io [...] If you're running NixOS, you need to add/update the following in your /etc/nixos/configuration.nix files instead. # Binary Cache for Haskell.nix nix.settings.trusted-public-keys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.settings.substituters = [ \"https://cache.iog.io\" ]; NixOS-21.11 and older use slightly different settings. # Binary Cache for Haskell.nix nix.binaryCachePublicKeys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.binaryCaches = [ \"https://cache.iog.io\" ]; This can be tricky to get setup properly. If you're still having trouble getting cache hits, consult the corresponding troubleshooting section .","title":"Setting up the binary cache"},{"location":"tutorials/getting-started-flakes.html#scaffolding","text":"The following work with stack.yaml and cabal.project based projects. Add flake.nix : { description = \"A very basic flake\"; inputs.haskellNix.url = \"github:input-output-hk/haskell.nix\"; inputs.nixpkgs.follows = \"haskellNix/nixpkgs-unstable\"; inputs.flake-utils.url = \"github:numtide/flake-utils\"; outputs = { self, nixpkgs, flake-utils, haskellNix }: flake-utils.lib.eachSystem [ \"x86_64-linux\" \"x86_64-darwin\" ] (system: let overlays = [ haskellNix.overlay (final: prev: { # This overlay adds our project to pkgs helloProject = final.haskell-nix.project' { src = ./.; compiler-nix-name = \"ghc8104\"; # This is used by `nix develop .` to open a shell for use with # `cabal`, `hlint` and `haskell-language-server` shell.tools = { cabal = {}; hlint = {}; haskell-language-server = {}; }; # Non-Haskell shell tools go here shell.buildInputs = with pkgs; [ nixpkgs-fmt ]; # This adds `js-unknown-ghcjs-cabal` to the shell. # shell.crossPlatforms = p: [p.ghcjs]; }; }) ]; pkgs = import nixpkgs { inherit system overlays; inherit (haskellNix) config; }; flake = pkgs.helloProject.flake { # This adds support for `nix build .#js-unknown-ghcjs-cabal:hello:exe:hello` # crossPlatforms = p: [p.ghcjs]; }; in flake // { # Built by `nix build .` defaultPackage = flake.packages.\"hello:exe:hello\"; }); } git dependencies If you have git dependencies in your project, you'll need to calculate sha256 hashes for them .","title":"Scaffolding"},{"location":"tutorials/getting-started-flakes.html#working-with-a-project","text":"Top-level attributes are Haskell packages (incl. dependencies) part of your project. To build the library component of a package in the project run: nix build .#your-package-name:lib:your-package-name There are also other components such as exe , test and benchmark . To build an executable: nix build .#your-package-name:exe:your-exe-name To use the devShell provided by the flake run: nix develop . cabal repl your-package-name:lib:your-package-name cabal build your-package-name To open a shell for use with stack see the following issue .","title":"Working with a project"},{"location":"tutorials/getting-started-flakes.html#going-forward","text":"Read through project function reference to see how the API works. There are a number of things to explore further in the tutorials section.","title":"Going forward"},{"location":"tutorials/getting-started-hix.html","text":"Getting started with Hix \u00b6 The hix tools are wrappers for the various nix tools that use haskell.nix without the need to add any .nix files. This is useful for: A quick way to try out haskell.nix for new users. Using haskell.nix to work on projects that do not have .nix files. Testing to see if haskell.nix can build a project. Making flake and non flake configurations to check haskell.nix treats them the same. Installing Nix \u00b6 To use Hix you will need to install Nix . Setting up the binary cache \u00b6 IMPORTANT: you must do this or you will build several copies of GHC! You can configure Nix to use our binary cache, which is pushed to by CI, so should contain the artifacts that you need. You need to add the following sections to /etc/nix/nix.conf or, if you are a trusted user, ~/.config/nix/nix.conf (if you don't know what a \"trusted user\" is, you probably want to do the former). trusted-public-keys = [...] hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= [...] substituters = [...] https://cache.iog.io [...] If you're running NixOS, you need to add/update the following in your /etc/nixos/configuration.nix files instead. # Binary Cache for Haskell.nix nix.settings.trusted-public-keys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.settings.substituters = [ \"https://cache.iog.io\" ]; NixOS-21.11 and older use slightly different settings. # Binary Cache for Haskell.nix nix.binaryCachePublicKeys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.binaryCaches = [ \"https://cache.iog.io\" ]; This can be tricky to get setup properly. If you're still having trouble getting cache hits, consult the corresponding troubleshooting section . Installing Hix \u00b6 nix-env -iA hix -f https://github.com/input-output-hk/haskell.nix/tarball/master Updating Hix (also updates hackage) \u00b6 hix update This is also necessary to make the latest nightly snapshot of hackage avaiable to nix. Building with Hix \u00b6 To run cabal build in a nix-shell with all the dependencies required: cabal unpack hello cd hello-1.0.0.2 hix-shell --run 'cabal build' Build with nix: hix-build -A hsPkgs.hello.components.exes.hello Cross compile to JavaScript: hix-build -A projectCross.ghcjs.hsPkgs.hello.components.exes.hello Configuring Hix \u00b6 The configuration arguments for Hix can be (from highest precedence to lowest): Passed on the command line with --arg (or --argstr for string args). Placed in nix/hix.nix file in the project dir. Placed in ~/.config/hix/hix.conf For example to build with GHC 8.10.7: hix-shell --argstr compiler-nix-name ghc8107 --run 'cabal build' or add a nix/hix.nix or ~/.config/hix/hix.conf file: { compiler-nix-name = \"ghc8107\"; } Here are just a few of the other configuration arguments you could use in the files or on the command line (they are all optional): { name = \"hello\"; # for better error messages and derivation names nixpkgsPin = \"nixpkgs-unstable\"; # or nixpkgs-2111 or nixpkgs-2105 nixpkgs = <nixpkgs>; # use this instead of nixpkgsPin subDir = \"some/sub/dir\"; # sub dir containing the haskell project projectFileName = \"stack.yaml\"; # use this project file tools.haskell-language-server = \"latest\"; tools.hlint = \"latest\"; # Include the latest hls and hlint in the shell index-state = \"2021-02-22T00:00:00Z\"; # It is normally best to put this in `cabal.project` (not here) # PLUS MANY MORE! Almost any argument you can pass to the project functions # or to `shellFor` can be used in as a Hix configuration argument. } Adding Nix Support with Niv \u00b6 If you have a nix/hix.nix file with suitable configuration that you want to make available to users with Nix (without having to install Hix). Niv is a command line tool for keeping track of Nix project dependencies. After installing niv you can initialize niv and pin the latest haskell.nix commit by running the following in the root directory of the project: niv init niv add input-output-hk/haskell.nix -n haskellNix Add default.nix : (import (import nix/sources.nix).haskellNix {}).hix.project { src = ./.; } If you want to also pin nixpkgs with Niv use: let sources = import nix/sources.nix; in (import sources.haskellNix {}).hix.project { inherit (sources) nixpkgs; src = ./.; } Add shell.nix : (import ./.).shell When you want to update to the latest version of haskell.nix use: niv update haskellNix Adding Nix Flake Support \u00b6 To add flake support that uses the nix/hix.nix configuration in your follow the Getting started with flakes guide, but use haskell-nix.hix.project instead of haskell-nix.project' The nixpkgs used will need to be selected as a flake input (any selection made in nix/hix.nix will be ignored). Example flake.nix file: { description = \"A very basic flake\"; inputs.haskellNix.url = \"github:input-output-hk/haskell.nix\"; inputs.nixpkgs.follows = \"haskellNix/nixpkgs-unstable\"; inputs.flake-utils.url = \"github:numtide/flake-utils\"; outputs = { self, nixpkgs, flake-utils, haskellNix }: flake-utils.lib.eachSystem [ \"x86_64-linux\" \"x86_64-darwin\" ] (system: let overlays = [ haskellNix.overlay (final: prev: { # This overlay adds our project to pkgs helloProject = final.haskell-nix.hix.project { src = ./.; # Other project options can be put in `nix/hix.nix` }; }) ]; pkgs = import nixpkgs { inherit system overlays; inherit (haskellNix) config; }; flake = pkgs.helloProject.flake { # This adds support for `nix build .#js-unknown-ghcjs:hello:exe:hello` crossPlatforms = p: [p.ghcjs]; }; in flake // { # Built by `nix build .` defaultPackage = flake.packages.\"hello:exe:hello\"; }); }","title":"Getting started with Hix"},{"location":"tutorials/getting-started-hix.html#getting-started-with-hix","text":"The hix tools are wrappers for the various nix tools that use haskell.nix without the need to add any .nix files. This is useful for: A quick way to try out haskell.nix for new users. Using haskell.nix to work on projects that do not have .nix files. Testing to see if haskell.nix can build a project. Making flake and non flake configurations to check haskell.nix treats them the same.","title":"Getting started with Hix"},{"location":"tutorials/getting-started-hix.html#installing-nix","text":"To use Hix you will need to install Nix .","title":"Installing Nix"},{"location":"tutorials/getting-started-hix.html#setting-up-the-binary-cache","text":"IMPORTANT: you must do this or you will build several copies of GHC! You can configure Nix to use our binary cache, which is pushed to by CI, so should contain the artifacts that you need. You need to add the following sections to /etc/nix/nix.conf or, if you are a trusted user, ~/.config/nix/nix.conf (if you don't know what a \"trusted user\" is, you probably want to do the former). trusted-public-keys = [...] hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= [...] substituters = [...] https://cache.iog.io [...] If you're running NixOS, you need to add/update the following in your /etc/nixos/configuration.nix files instead. # Binary Cache for Haskell.nix nix.settings.trusted-public-keys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.settings.substituters = [ \"https://cache.iog.io\" ]; NixOS-21.11 and older use slightly different settings. # Binary Cache for Haskell.nix nix.binaryCachePublicKeys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.binaryCaches = [ \"https://cache.iog.io\" ]; This can be tricky to get setup properly. If you're still having trouble getting cache hits, consult the corresponding troubleshooting section .","title":"Setting up the binary cache"},{"location":"tutorials/getting-started-hix.html#installing-hix","text":"nix-env -iA hix -f https://github.com/input-output-hk/haskell.nix/tarball/master","title":"Installing Hix"},{"location":"tutorials/getting-started-hix.html#updating-hix-also-updates-hackage","text":"hix update This is also necessary to make the latest nightly snapshot of hackage avaiable to nix.","title":"Updating Hix (also updates hackage)"},{"location":"tutorials/getting-started-hix.html#building-with-hix","text":"To run cabal build in a nix-shell with all the dependencies required: cabal unpack hello cd hello-1.0.0.2 hix-shell --run 'cabal build' Build with nix: hix-build -A hsPkgs.hello.components.exes.hello Cross compile to JavaScript: hix-build -A projectCross.ghcjs.hsPkgs.hello.components.exes.hello","title":"Building with Hix"},{"location":"tutorials/getting-started-hix.html#configuring-hix","text":"The configuration arguments for Hix can be (from highest precedence to lowest): Passed on the command line with --arg (or --argstr for string args). Placed in nix/hix.nix file in the project dir. Placed in ~/.config/hix/hix.conf For example to build with GHC 8.10.7: hix-shell --argstr compiler-nix-name ghc8107 --run 'cabal build' or add a nix/hix.nix or ~/.config/hix/hix.conf file: { compiler-nix-name = \"ghc8107\"; } Here are just a few of the other configuration arguments you could use in the files or on the command line (they are all optional): { name = \"hello\"; # for better error messages and derivation names nixpkgsPin = \"nixpkgs-unstable\"; # or nixpkgs-2111 or nixpkgs-2105 nixpkgs = <nixpkgs>; # use this instead of nixpkgsPin subDir = \"some/sub/dir\"; # sub dir containing the haskell project projectFileName = \"stack.yaml\"; # use this project file tools.haskell-language-server = \"latest\"; tools.hlint = \"latest\"; # Include the latest hls and hlint in the shell index-state = \"2021-02-22T00:00:00Z\"; # It is normally best to put this in `cabal.project` (not here) # PLUS MANY MORE! Almost any argument you can pass to the project functions # or to `shellFor` can be used in as a Hix configuration argument. }","title":"Configuring Hix"},{"location":"tutorials/getting-started-hix.html#adding-nix-support-with-niv","text":"If you have a nix/hix.nix file with suitable configuration that you want to make available to users with Nix (without having to install Hix). Niv is a command line tool for keeping track of Nix project dependencies. After installing niv you can initialize niv and pin the latest haskell.nix commit by running the following in the root directory of the project: niv init niv add input-output-hk/haskell.nix -n haskellNix Add default.nix : (import (import nix/sources.nix).haskellNix {}).hix.project { src = ./.; } If you want to also pin nixpkgs with Niv use: let sources = import nix/sources.nix; in (import sources.haskellNix {}).hix.project { inherit (sources) nixpkgs; src = ./.; } Add shell.nix : (import ./.).shell When you want to update to the latest version of haskell.nix use: niv update haskellNix","title":"Adding Nix Support with Niv"},{"location":"tutorials/getting-started-hix.html#adding-nix-flake-support","text":"To add flake support that uses the nix/hix.nix configuration in your follow the Getting started with flakes guide, but use haskell-nix.hix.project instead of haskell-nix.project' The nixpkgs used will need to be selected as a flake input (any selection made in nix/hix.nix will be ignored). Example flake.nix file: { description = \"A very basic flake\"; inputs.haskellNix.url = \"github:input-output-hk/haskell.nix\"; inputs.nixpkgs.follows = \"haskellNix/nixpkgs-unstable\"; inputs.flake-utils.url = \"github:numtide/flake-utils\"; outputs = { self, nixpkgs, flake-utils, haskellNix }: flake-utils.lib.eachSystem [ \"x86_64-linux\" \"x86_64-darwin\" ] (system: let overlays = [ haskellNix.overlay (final: prev: { # This overlay adds our project to pkgs helloProject = final.haskell-nix.hix.project { src = ./.; # Other project options can be put in `nix/hix.nix` }; }) ]; pkgs = import nixpkgs { inherit system overlays; inherit (haskellNix) config; }; flake = pkgs.helloProject.flake { # This adds support for `nix build .#js-unknown-ghcjs:hello:exe:hello` crossPlatforms = p: [p.ghcjs]; }; in flake // { # Built by `nix build .` defaultPackage = flake.packages.\"hello:exe:hello\"; }); }","title":"Adding Nix Flake Support"},{"location":"tutorials/getting-started.html","text":"Getting started \u00b6 haskell.nix can automatically translate your Cabal or Stack project and its dependencies into Nix code. Assuming you have Nix installed, you can start setting up your project. Setting up the binary cache \u00b6 IMPORTANT: you must do this or you will build several copies of GHC! You can configure Nix to use our binary cache, which is pushed to by CI, so should contain the artifacts that you need. You need to add the following sections to /etc/nix/nix.conf or, if you are a trusted user, ~/.config/nix/nix.conf (if you don't know what a \"trusted user\" is, you probably want to do the former). trusted-public-keys = [...] hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= [...] substituters = [...] https://cache.iog.io [...] If you're running NixOS, you need to add/update the following in your /etc/nixos/configuration.nix files instead. # Binary Cache for Haskell.nix nix.settings.trusted-public-keys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.settings.substituters = [ \"https://cache.iog.io\" ]; NixOS-21.11 and older use slightly different settings. # Binary Cache for Haskell.nix nix.binaryCachePublicKeys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.binaryCaches = [ \"https://cache.iog.io\" ]; This can be tricky to get setup properly. If you're still having trouble getting cache hits, consult the corresponding troubleshooting section . Niv \u00b6 Niv is a command line tool for keeping track of Nix project dependencies. This guide assumes that the sources.haskellNix will be set to point a pinned copy of the haskell.nix github repo. One easy way to do this is to use Niv. If you prefer not to use Niv another option is described in the in the \"Using haskell.nix without niv\" section of this document. If you want to use Nix Flakes to pin your dependencies then you should consider following the Getting started with flakes document instead of this one. After installing niv you can initialize niv and pin the latest haskell.nix commit by running the following in the root directory of the project: niv init niv add input-output-hk/haskell.nix -n haskellNix Then when you want to update to the latest version of haskellNix use: niv update haskellNix Scaffolding \u00b6 The following work with stack.yaml and cabal.project based projects. Add default.nix : let # Read in the Niv sources sources = import ./nix/sources.nix {}; # If ./nix/sources.nix file is not found run: # niv init # niv add input-output-hk/haskell.nix -n haskellNix # Fetch the haskell.nix commit we have pinned with Niv haskellNix = import sources.haskellNix {}; # If haskellNix is not found run: # niv add input-output-hk/haskell.nix -n haskellNix # Import nixpkgs and pass the haskell.nix provided nixpkgsArgs pkgs = import # haskell.nix provides access to the nixpkgs pins which are used by our CI, # hence you will be more likely to get cache hits when using these. # But you can also just use your own, e.g. '<nixpkgs>'. haskellNix.sources.nixpkgs-unstable # These arguments passed to nixpkgs, include some patches and also # the haskell.nix functionality itself as an overlay. haskellNix.nixpkgsArgs; in pkgs.haskell-nix.project { # 'cleanGit' cleans a source directory based on the files known by git src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; # Specify the GHC version to use. compiler-nix-name = \"ghc8102\"; # Not required for `stack.yaml` based projects. } git dependencies If you have git dependencies in your project, you'll need to calculate sha256 hashes for them . Working with a project \u00b6 Top-level attributes are Haskell packages (incl. dependencies) part of your project. To build the library component of a package in the project run: nix-build -A your-package-name.components.library There are also other components such as exes , tests , benchmarks and all . To build an executable: nix-build -A your-package-name.components.exes.your-exe-name To cross compile use the projectCross attribute: nix-build -A projectCross.ghcjs.hsPkgs.your-package-name.components.exes.your-exe-name nix-build -A projectCross.mingwW64.hsPkgs.your-package-name.components.exes.your-exe-name To open a shell for use with cabal , hlint and haskell-language-server add shell.nix : (import ./default.nix).shellFor { tools = { cabal = \"3.2.0.0\"; hlint = \"latest\"; haskell-language-server = \"latest\"; }; } Then run: nix-shell cabal new-repl your-package-name:library:your-package-name cabal new-build your-package-name To open a shell for use with stack see the following issue . Using haskell.nix without Niv \u00b6 If you would prefer not to use niv you can replace sources = import ./nix/sources.nix {}; in the examples with: let sources = { haskellNix = builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz\"; }; The fetchTarball call above will always get the latest version, and is similar to an auto-updating Nix channel. However, in your own project, you may wish to pin haskell.nix (as you would pin Nixpkgs). This will make your builds reproducible, more predictable, and faster (because the fixed version is cached). Straightforward way of doing this is to change the branch name to a revision. let sources = { haskellNix = builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/f1a94a4c82a2ab999a67c3b84269da78d89f0075.tar.gz\"; }; There are other possible schemes for pinning. See Bumping Hackage and Stackage snapshots and Nix tutorial on reproducibility using pinning . Going forward \u00b6 Read through project function reference to see how the API works. There are a number of things to explore further in the tutorials section.","title":"Getting Started"},{"location":"tutorials/getting-started.html#getting-started","text":"haskell.nix can automatically translate your Cabal or Stack project and its dependencies into Nix code. Assuming you have Nix installed, you can start setting up your project.","title":"Getting started"},{"location":"tutorials/getting-started.html#setting-up-the-binary-cache","text":"IMPORTANT: you must do this or you will build several copies of GHC! You can configure Nix to use our binary cache, which is pushed to by CI, so should contain the artifacts that you need. You need to add the following sections to /etc/nix/nix.conf or, if you are a trusted user, ~/.config/nix/nix.conf (if you don't know what a \"trusted user\" is, you probably want to do the former). trusted-public-keys = [...] hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= [...] substituters = [...] https://cache.iog.io [...] If you're running NixOS, you need to add/update the following in your /etc/nixos/configuration.nix files instead. # Binary Cache for Haskell.nix nix.settings.trusted-public-keys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.settings.substituters = [ \"https://cache.iog.io\" ]; NixOS-21.11 and older use slightly different settings. # Binary Cache for Haskell.nix nix.binaryCachePublicKeys = [ \"hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\" ]; nix.binaryCaches = [ \"https://cache.iog.io\" ]; This can be tricky to get setup properly. If you're still having trouble getting cache hits, consult the corresponding troubleshooting section .","title":"Setting up the binary cache"},{"location":"tutorials/getting-started.html#niv","text":"Niv is a command line tool for keeping track of Nix project dependencies. This guide assumes that the sources.haskellNix will be set to point a pinned copy of the haskell.nix github repo. One easy way to do this is to use Niv. If you prefer not to use Niv another option is described in the in the \"Using haskell.nix without niv\" section of this document. If you want to use Nix Flakes to pin your dependencies then you should consider following the Getting started with flakes document instead of this one. After installing niv you can initialize niv and pin the latest haskell.nix commit by running the following in the root directory of the project: niv init niv add input-output-hk/haskell.nix -n haskellNix Then when you want to update to the latest version of haskellNix use: niv update haskellNix","title":"Niv"},{"location":"tutorials/getting-started.html#scaffolding","text":"The following work with stack.yaml and cabal.project based projects. Add default.nix : let # Read in the Niv sources sources = import ./nix/sources.nix {}; # If ./nix/sources.nix file is not found run: # niv init # niv add input-output-hk/haskell.nix -n haskellNix # Fetch the haskell.nix commit we have pinned with Niv haskellNix = import sources.haskellNix {}; # If haskellNix is not found run: # niv add input-output-hk/haskell.nix -n haskellNix # Import nixpkgs and pass the haskell.nix provided nixpkgsArgs pkgs = import # haskell.nix provides access to the nixpkgs pins which are used by our CI, # hence you will be more likely to get cache hits when using these. # But you can also just use your own, e.g. '<nixpkgs>'. haskellNix.sources.nixpkgs-unstable # These arguments passed to nixpkgs, include some patches and also # the haskell.nix functionality itself as an overlay. haskellNix.nixpkgsArgs; in pkgs.haskell-nix.project { # 'cleanGit' cleans a source directory based on the files known by git src = pkgs.haskell-nix.haskellLib.cleanGit { name = \"haskell-nix-project\"; src = ./.; }; # Specify the GHC version to use. compiler-nix-name = \"ghc8102\"; # Not required for `stack.yaml` based projects. } git dependencies If you have git dependencies in your project, you'll need to calculate sha256 hashes for them .","title":"Scaffolding"},{"location":"tutorials/getting-started.html#working-with-a-project","text":"Top-level attributes are Haskell packages (incl. dependencies) part of your project. To build the library component of a package in the project run: nix-build -A your-package-name.components.library There are also other components such as exes , tests , benchmarks and all . To build an executable: nix-build -A your-package-name.components.exes.your-exe-name To cross compile use the projectCross attribute: nix-build -A projectCross.ghcjs.hsPkgs.your-package-name.components.exes.your-exe-name nix-build -A projectCross.mingwW64.hsPkgs.your-package-name.components.exes.your-exe-name To open a shell for use with cabal , hlint and haskell-language-server add shell.nix : (import ./default.nix).shellFor { tools = { cabal = \"3.2.0.0\"; hlint = \"latest\"; haskell-language-server = \"latest\"; }; } Then run: nix-shell cabal new-repl your-package-name:library:your-package-name cabal new-build your-package-name To open a shell for use with stack see the following issue .","title":"Working with a project"},{"location":"tutorials/getting-started.html#using-haskellnix-without-niv","text":"If you would prefer not to use niv you can replace sources = import ./nix/sources.nix {}; in the examples with: let sources = { haskellNix = builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz\"; }; The fetchTarball call above will always get the latest version, and is similar to an auto-updating Nix channel. However, in your own project, you may wish to pin haskell.nix (as you would pin Nixpkgs). This will make your builds reproducible, more predictable, and faster (because the fixed version is cached). Straightforward way of doing this is to change the branch name to a revision. let sources = { haskellNix = builtins.fetchTarball \"https://github.com/input-output-hk/haskell.nix/archive/f1a94a4c82a2ab999a67c3b84269da78d89f0075.tar.gz\"; }; There are other possible schemes for pinning. See Bumping Hackage and Stackage snapshots and Nix tutorial on reproducibility using pinning .","title":"Using haskell.nix without Niv"},{"location":"tutorials/getting-started.html#going-forward","text":"Read through project function reference to see how the API works. There are a number of things to explore further in the tutorials section.","title":"Going forward"},{"location":"tutorials/hackage-stackage.html","text":"Bumping Hackage and Stackage snapshots \u00b6 haskell.nix relies on some generated data providing information about packages in Hackage and Stackage snapshots. These are kept in hackage.nix and stackage.nix respectively. If your project depends on a Hackage package, then the hackage.nix revision used must be new enough to contain that, and likewise for Stackage snaphots and stackage.nix . Updating and pinning hackage.nix and stackage.nix \u00b6 haskell.nix pins particular revisions of these repositories internally, both for our own usage in testing, and so that users have a sensible default when getting started. These revisions are updated nightly, so you can get newer revisions of hackage.nix and stackage.nix by updating your revision of haskell.nix itself. However, this exposes you to changes in haskell.nix which you may not want, such as changes that force compiler rebuilds, or the occasional bug. Instead, you can pin hackage.nix and stackage.nix independently. For example: let # You can use a tool like `niv` to manage this boilerplate hackageSrc = builtins.fetchTarball https://github.com/input-output-hk/hackage.nix/archive/master.tar.gz; stackageSrc = builtins.fetchTarball https://github.com/input-output-hk/stackage.nix/archive/master.tar.gz; haskellSrc = builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz; haskellNix = import haskellSrc { # This allows you to override the pins used by `haskell.nix` internally sourcesOverride = { hackage = hackageSrc; stackage = stackageSrc; }; }; in ... This way you can change the revisions of hackage.nix and stackage.nix without changing haskell.nix . However, bear in mind that Stackage refers to Hackage, so your Stackage pin should never be newer than your Hackage pin.","title":"Bumping Hackage and Stackage snapshots"},{"location":"tutorials/hackage-stackage.html#bumping-hackage-and-stackage-snapshots","text":"haskell.nix relies on some generated data providing information about packages in Hackage and Stackage snapshots. These are kept in hackage.nix and stackage.nix respectively. If your project depends on a Hackage package, then the hackage.nix revision used must be new enough to contain that, and likewise for Stackage snaphots and stackage.nix .","title":"Bumping Hackage and Stackage snapshots"},{"location":"tutorials/hackage-stackage.html#updating-and-pinning-hackagenix-and-stackagenix","text":"haskell.nix pins particular revisions of these repositories internally, both for our own usage in testing, and so that users have a sensible default when getting started. These revisions are updated nightly, so you can get newer revisions of hackage.nix and stackage.nix by updating your revision of haskell.nix itself. However, this exposes you to changes in haskell.nix which you may not want, such as changes that force compiler rebuilds, or the occasional bug. Instead, you can pin hackage.nix and stackage.nix independently. For example: let # You can use a tool like `niv` to manage this boilerplate hackageSrc = builtins.fetchTarball https://github.com/input-output-hk/hackage.nix/archive/master.tar.gz; stackageSrc = builtins.fetchTarball https://github.com/input-output-hk/stackage.nix/archive/master.tar.gz; haskellSrc = builtins.fetchTarball https://github.com/input-output-hk/haskell.nix/archive/master.tar.gz; haskellNix = import haskellSrc { # This allows you to override the pins used by `haskell.nix` internally sourcesOverride = { hackage = hackageSrc; stackage = stackageSrc; }; }; in ... This way you can change the revisions of hackage.nix and stackage.nix without changing haskell.nix . However, bear in mind that Stackage refers to Hackage, so your Stackage pin should never be newer than your Hackage pin.","title":"Updating and pinning hackage.nix and stackage.nix"},{"location":"tutorials/materialization.html","text":"Materialization \u00b6 What is materialization? \u00b6 Capturing and storing the Nix files for a project so that they do not need to be built (or checked). This allows us to cache the input of an IFD (import from derivation). Why use materialization? \u00b6 Using functions like project , cabalProject , stackProject and hackage-package results in a lot of dependencies (all the dependencies of nix-tools for instance). They can be slow to calculate (even if no work needs to be done it is not unusual for it to take 5 seconds per project). They can be slow to build (or download) on machines that do not yet have them in the Nix store. Hydra does not show progress because it does not provide feedback until it has a list of jobs and the list of jobs cannot depend on the Nix expressions being present (although this is often blamed on IFD it would be the same if it wrote out JSON files and read them in) When is it OK to materialize? \u00b6 The Nix expressions are unlikely to change frequently (and when it does you are happy to manually update it). You are happy to script something to update the materialized Nix files automatically. You are certain that the IFD you materialize is not system -dependent. If it was you'd obtain different Nix expressions depending on which system the IFD was evaluated. How can we materialize the Nix files? \u00b6 Lets say we want to build hlint . We might start with an hlint.nix file that looks like this: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; }; in hlint Building this may result in a lot of output, but if you build it again it should give just: $ nix-build hlint.nix -A components.exes.hlint trace: No index state specified for hlint, using the latest index state that we know about (2021-01-04T00:00:00Z)! /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 To materialize the Nix files we need to take care to pin down the inputs. Stack projects have their inputs pinned through specifying the snapshot. For cabal projects this means we must specify the index-state of hackage we want to use: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; index-state = \"2021-01-04T00:00:00Z\"; }; in hlint Now if we build again we get a hint telling use how to calculate a suitable sha256 hash to turn the derivation containing the Nix files into a fixed-output derivation: $ nix-build hlint.nix -A components.exes.hlint trace: To make project.plan-nix for hlint a fixed-output derivation but not materialized, set `plan-sha256` to the output of the 'calculateMaterializedSha' script in 'passthru'. trace: To materialize project.plan-nix for hlint entirely, pass a writable path as the `materialized` argument and run the 'updateMaterialized' script in 'passthru'. /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 $ nix-build hlint.nix -A project.plan-nix.passthru.calculateMaterializedSha | bash trace: To make project.plan-nix for hlint a fixed-output derivation but not materialized, set `plan-sha256` to the output of the 'calculateMaterializedSha' script in 'passthru'. trace: To materialize project.plan-nix for hlint entirely, pass a writable path as the `materialized` argument and run the 'updateMaterialized' script in 'passthru'. 04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7 For a Stack project all occurences of plan-nix and plan-sha256 are replaced by stack-nix and stack-sha256 , respectively. We can add the hash as plan-sha256 : let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; index-state = \"2021-01-04T00:00:00Z\"; plan-sha256 = \"04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7\"; }; in hlint Just adding the hash might help reuse of the cached Nix expressions, but Nix will still calculate all the dependencies (which can add seconds to nix-build and nix-shell commands when no other work is needed) and users who do not yet have the dependencies in their store will have to wait while they are built or downloaded. Running nix-build again gives us a hint on what we can do next: $ nix-build hlint.nix -A components.exes.hlint trace: To materialize project.plan-nix for hlint entirely, pass a writable path as the `materialized` argument and run the 'updateMaterialized' script in 'passthru'. /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 To capture the Nix expressions we can do something like: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; index-state = \"2021-01-04T00:00:00Z\"; plan-sha256 = \"04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7\"; materialized = ./hlint.materialized; }; in hlint Now we can copy the Nix files needed and build with: $ nix-build hlint.nix 2>&1 | grep -om1 '/nix/store/.*-updateMaterialized' | bash $ nix-build hlint.nix -A components.exes.hlint building '/nix/store/wpxsgzl1z4jnhfqzmzg3xxv3ljpmzr5h-hlint-plan-to-nix-pkgs.drv'... /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 How can we check sha256 and materialized are up to date? \u00b6 Let's pretend we had to go back to hlint version 2.2.10 . We can tell haskell.nix to check the materialization either by: Removing the materialization files with rm -rf hlint.materialized Temporarily adding checkMaterialization = true; If we choose to add the checkMaterialization flag you would have: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.10\"; index-state = \"2021-01-04T00:00:00Z\"; plan-sha256 = \"04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7\"; materialized = ./hlint.materialized; checkMaterialization = true; }; in hlint This will fail and report the details of what is wrong and how to fix it: $ nix-build hlint.nix -A components.exes.hlint ... Calculated hash for hlint-plan-to-nix-pkgs was not 04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7. New hash is : plan-sha256 = \"0jsgdmii0a6b35sd42cpbc83s4sp4fbx8slphzvamq8n9x49i5b6\"; Materialized nix used for hlint-plan-to-nix-pkgs incorrect. To fix run: /nix/store/6wp0zzal40ls874f5ddpaac7qmii9y4z-updateMaterialized builder for '/nix/store/61a0vginv76w4p9ycyd628pjanav06pl-hlint-plan-to-nix-pkgs.drv' failed with exit code 1 error: build of '/nix/store/61a0vginv76w4p9ycyd628pjanav06pl-hlint-plan-to-nix-pkgs.drv' failed (use '--show-trace' to show detailed location information) Checking the materialization requires Nix to do all the work that materialization avoids. So while it might be tempting to leave checkMaterialization = true all the time, we would be better off just removing materialized and plan-sha256 . How can we update the Nix files with a script? \u00b6 We can simply put the commands we used earlier in a script: #!/bin/sh # Output new plan-sha256 nix-build hlint.nix -A project.plan-nix.passthru.calculateMaterializedSha | bash # Update materialized Nix expressions nix-build hlint.nix 2>&1 | grep -om1 '/nix/store/.*-updateMaterialized' | bash Can we skip making a copy and use materialized = /nix/store/... ? \u00b6 Yes and it gives us the same speed improvement, however: It does not help at all in restricted-eval mode (Hydra). Users will still wind up building or downloading the dependencies needed to build the Nix files (if they do not have them). For those reasons it might be best to make a copy instead of using the /nix/store/... path directly. If you really want to use the /nix/store/... path directly you should guard against the path not existing as passing in a non-existing path is now an error: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlintPlan = /nix/store/63k3f8bvsnag7v36vb3149208jyx61rk-hlint-plan-to-nix-pkgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; index-state = \"2021-01-04T00:00:00Z\"; plan-sha256 = \"04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7\"; materialized = if __pathExists hlintPlan then hlintPlan else null; }; in hlint Running when no building is needed is still slow in restricted evaluation mode. $ time nix-build --option restrict-eval true -I . --option allowed-uris \"https://github.com/NixOS https://github.com/input-output-hk\" hlint.nix -A components.exes.hlint --show-trace /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 real 0m4.463s user 0m4.440s sys 0m0.461s $ time nix-build hlint.nix -A components.exes.hlint /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 real 0m2.206s user 0m1.665s sys 0m0.332s","title":"Materialization: Speeding up Nix evaluation"},{"location":"tutorials/materialization.html#materialization","text":"","title":"Materialization"},{"location":"tutorials/materialization.html#what-is-materialization","text":"Capturing and storing the Nix files for a project so that they do not need to be built (or checked). This allows us to cache the input of an IFD (import from derivation).","title":"What is materialization?"},{"location":"tutorials/materialization.html#why-use-materialization","text":"Using functions like project , cabalProject , stackProject and hackage-package results in a lot of dependencies (all the dependencies of nix-tools for instance). They can be slow to calculate (even if no work needs to be done it is not unusual for it to take 5 seconds per project). They can be slow to build (or download) on machines that do not yet have them in the Nix store. Hydra does not show progress because it does not provide feedback until it has a list of jobs and the list of jobs cannot depend on the Nix expressions being present (although this is often blamed on IFD it would be the same if it wrote out JSON files and read them in)","title":"Why use materialization?"},{"location":"tutorials/materialization.html#when-is-it-ok-to-materialize","text":"The Nix expressions are unlikely to change frequently (and when it does you are happy to manually update it). You are happy to script something to update the materialized Nix files automatically. You are certain that the IFD you materialize is not system -dependent. If it was you'd obtain different Nix expressions depending on which system the IFD was evaluated.","title":"When is it OK to materialize?"},{"location":"tutorials/materialization.html#how-can-we-materialize-the-nix-files","text":"Lets say we want to build hlint . We might start with an hlint.nix file that looks like this: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; }; in hlint Building this may result in a lot of output, but if you build it again it should give just: $ nix-build hlint.nix -A components.exes.hlint trace: No index state specified for hlint, using the latest index state that we know about (2021-01-04T00:00:00Z)! /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 To materialize the Nix files we need to take care to pin down the inputs. Stack projects have their inputs pinned through specifying the snapshot. For cabal projects this means we must specify the index-state of hackage we want to use: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; index-state = \"2021-01-04T00:00:00Z\"; }; in hlint Now if we build again we get a hint telling use how to calculate a suitable sha256 hash to turn the derivation containing the Nix files into a fixed-output derivation: $ nix-build hlint.nix -A components.exes.hlint trace: To make project.plan-nix for hlint a fixed-output derivation but not materialized, set `plan-sha256` to the output of the 'calculateMaterializedSha' script in 'passthru'. trace: To materialize project.plan-nix for hlint entirely, pass a writable path as the `materialized` argument and run the 'updateMaterialized' script in 'passthru'. /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 $ nix-build hlint.nix -A project.plan-nix.passthru.calculateMaterializedSha | bash trace: To make project.plan-nix for hlint a fixed-output derivation but not materialized, set `plan-sha256` to the output of the 'calculateMaterializedSha' script in 'passthru'. trace: To materialize project.plan-nix for hlint entirely, pass a writable path as the `materialized` argument and run the 'updateMaterialized' script in 'passthru'. 04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7 For a Stack project all occurences of plan-nix and plan-sha256 are replaced by stack-nix and stack-sha256 , respectively. We can add the hash as plan-sha256 : let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; index-state = \"2021-01-04T00:00:00Z\"; plan-sha256 = \"04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7\"; }; in hlint Just adding the hash might help reuse of the cached Nix expressions, but Nix will still calculate all the dependencies (which can add seconds to nix-build and nix-shell commands when no other work is needed) and users who do not yet have the dependencies in their store will have to wait while they are built or downloaded. Running nix-build again gives us a hint on what we can do next: $ nix-build hlint.nix -A components.exes.hlint trace: To materialize project.plan-nix for hlint entirely, pass a writable path as the `materialized` argument and run the 'updateMaterialized' script in 'passthru'. /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 To capture the Nix expressions we can do something like: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; index-state = \"2021-01-04T00:00:00Z\"; plan-sha256 = \"04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7\"; materialized = ./hlint.materialized; }; in hlint Now we can copy the Nix files needed and build with: $ nix-build hlint.nix 2>&1 | grep -om1 '/nix/store/.*-updateMaterialized' | bash $ nix-build hlint.nix -A components.exes.hlint building '/nix/store/wpxsgzl1z4jnhfqzmzg3xxv3ljpmzr5h-hlint-plan-to-nix-pkgs.drv'... /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11","title":"How can we materialize the Nix files?"},{"location":"tutorials/materialization.html#how-can-we-check-sha256-and-materialized-are-up-to-date","text":"Let's pretend we had to go back to hlint version 2.2.10 . We can tell haskell.nix to check the materialization either by: Removing the materialization files with rm -rf hlint.materialized Temporarily adding checkMaterialization = true; If we choose to add the checkMaterialization flag you would have: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.10\"; index-state = \"2021-01-04T00:00:00Z\"; plan-sha256 = \"04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7\"; materialized = ./hlint.materialized; checkMaterialization = true; }; in hlint This will fail and report the details of what is wrong and how to fix it: $ nix-build hlint.nix -A components.exes.hlint ... Calculated hash for hlint-plan-to-nix-pkgs was not 04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7. New hash is : plan-sha256 = \"0jsgdmii0a6b35sd42cpbc83s4sp4fbx8slphzvamq8n9x49i5b6\"; Materialized nix used for hlint-plan-to-nix-pkgs incorrect. To fix run: /nix/store/6wp0zzal40ls874f5ddpaac7qmii9y4z-updateMaterialized builder for '/nix/store/61a0vginv76w4p9ycyd628pjanav06pl-hlint-plan-to-nix-pkgs.drv' failed with exit code 1 error: build of '/nix/store/61a0vginv76w4p9ycyd628pjanav06pl-hlint-plan-to-nix-pkgs.drv' failed (use '--show-trace' to show detailed location information) Checking the materialization requires Nix to do all the work that materialization avoids. So while it might be tempting to leave checkMaterialization = true all the time, we would be better off just removing materialized and plan-sha256 .","title":"How can we check sha256 and materialized are up to date?"},{"location":"tutorials/materialization.html#how-can-we-update-the-nix-files-with-a-script","text":"We can simply put the commands we used earlier in a script: #!/bin/sh # Output new plan-sha256 nix-build hlint.nix -A project.plan-nix.passthru.calculateMaterializedSha | bash # Update materialized Nix expressions nix-build hlint.nix 2>&1 | grep -om1 '/nix/store/.*-updateMaterialized' | bash","title":"How can we update the Nix files with a script?"},{"location":"tutorials/materialization.html#can-we-skip-making-a-copy-and-use-materialized-nixstore","text":"Yes and it gives us the same speed improvement, however: It does not help at all in restricted-eval mode (Hydra). Users will still wind up building or downloading the dependencies needed to build the Nix files (if they do not have them). For those reasons it might be best to make a copy instead of using the /nix/store/... path directly. If you really want to use the /nix/store/... path directly you should guard against the path not existing as passing in a non-existing path is now an error: let inherit (import ./. {}) sources nixpkgsArgs; pkgs = import sources.nixpkgs nixpkgsArgs; hlintPlan = /nix/store/63k3f8bvsnag7v36vb3149208jyx61rk-hlint-plan-to-nix-pkgs; hlint = pkgs.haskell-nix.hackage-package { compiler-nix-name = \"ghc8102\"; name = \"hlint\"; version = \"2.2.11\"; index-state = \"2021-01-04T00:00:00Z\"; plan-sha256 = \"04hdgqwpaswmyb0ili7fwi6czzihd6x0jlvivw52d1i7wv4gaqy7\"; materialized = if __pathExists hlintPlan then hlintPlan else null; }; in hlint Running when no building is needed is still slow in restricted evaluation mode. $ time nix-build --option restrict-eval true -I . --option allowed-uris \"https://github.com/NixOS https://github.com/input-output-hk\" hlint.nix -A components.exes.hlint --show-trace /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 real 0m4.463s user 0m4.440s sys 0m0.461s $ time nix-build hlint.nix -A components.exes.hlint /nix/store/2ybrfmcp79gg75ad4pr1cbxjak70yg8b-hlint-exe-hlint-2.2.11 real 0m2.206s user 0m1.665s sys 0m0.332s","title":"Can we skip making a copy and use materialized = /nix/store/...?"},{"location":"tutorials/pkg-map.html","text":"Mapping non-Haskell dependencies to Nixpkgs \u00b6 Cabal files may contain dependencies to external non-Haskell dependencies via: build-tool-depends pkgconfig-depends frameworks extra-libraries If there is a pkgs attribute in Nixpkgs that matches the name given in the Cabal file, then it will be added as a dependency (see the output of cabal-to-nix ). Otherwise, there needs to be a mapping from Cabal file names (decided by the package author) to Nix package identifiers. Nixpkgs overlay \u00b6 The user may solve it by themself by overriding Nixpkgs and adding a package alias. For example: nixpkgs.overlays = [ (self: super: { icuuc = self.icu; icui18n = self.icu; icudata = self.icu; }) ]; Replace libraries of components \u00b6 If a component is missing a dependency it can be added via modules. For example: project = pkgs.haskell-nix.project' { src = self; compiler-nix-name = \"ghc8102\"; modules = [{ # Replace `extra-libraries` dependencies packages.X11.components.library.libs = pkgs.lib.mkForce (with pkgs.xorg; [ libX11 libXrandr libXext libXScrnSaver libXinerama ]); }]; }; Mapping in Haskell.nix \u00b6 Alternatively, if the name is commonly used, an alias can be added to the Haskell.nix sources, so that it's solved for all users. lib/pkgconf-nixpkgs-map.nix \u2014 for pkgconfig-depends . Each mapping entry is a list of packages. lib/system-nixpkgs-map.nix \u2014 for build-tool-depends , frameworks , extra-libraries , etc. Each name can be mapped to: 1. A single package from nixkpgs. 2. null \u2014 eliminates the dependency 3. A list of packages \u2014 sometimes needed for dependencies such as X11 . Open a PR Please go ahead and open a pull request to improve the package mappings.","title":"Mapping non-Haskell dependencies to Nixpkgs"},{"location":"tutorials/pkg-map.html#mapping-non-haskell-dependencies-to-nixpkgs","text":"Cabal files may contain dependencies to external non-Haskell dependencies via: build-tool-depends pkgconfig-depends frameworks extra-libraries If there is a pkgs attribute in Nixpkgs that matches the name given in the Cabal file, then it will be added as a dependency (see the output of cabal-to-nix ). Otherwise, there needs to be a mapping from Cabal file names (decided by the package author) to Nix package identifiers.","title":"Mapping non-Haskell dependencies to Nixpkgs"},{"location":"tutorials/pkg-map.html#nixpkgs-overlay","text":"The user may solve it by themself by overriding Nixpkgs and adding a package alias. For example: nixpkgs.overlays = [ (self: super: { icuuc = self.icu; icui18n = self.icu; icudata = self.icu; }) ];","title":"Nixpkgs overlay"},{"location":"tutorials/pkg-map.html#replace-libraries-of-components","text":"If a component is missing a dependency it can be added via modules. For example: project = pkgs.haskell-nix.project' { src = self; compiler-nix-name = \"ghc8102\"; modules = [{ # Replace `extra-libraries` dependencies packages.X11.components.library.libs = pkgs.lib.mkForce (with pkgs.xorg; [ libX11 libXrandr libXext libXScrnSaver libXinerama ]); }]; };","title":"Replace libraries of components"},{"location":"tutorials/pkg-map.html#mapping-in-haskellnix","text":"Alternatively, if the name is commonly used, an alias can be added to the Haskell.nix sources, so that it's solved for all users. lib/pkgconf-nixpkgs-map.nix \u2014 for pkgconfig-depends . Each mapping entry is a list of packages. lib/system-nixpkgs-map.nix \u2014 for build-tool-depends , frameworks , extra-libraries , etc. Each name can be mapped to: 1. A single package from nixkpgs. 2. null \u2014 eliminates the dependency 3. A list of packages \u2014 sometimes needed for dependencies such as X11 . Open a PR Please go ahead and open a pull request to improve the package mappings.","title":"Mapping in Haskell.nix"},{"location":"tutorials/source-repository-hashes.html","text":"Handling git repositories in projects \u00b6 Both stack.yaml and cabal.project files can contain references to git repositories containing the version of a particular package that we wish to use. This is mostly handled automatically by nix-tools and haskell.nix however when we want to use a nix system that is configured to use restricted mode (typically hydra) it will need additional hashes for the referenced repositories. When using project , cabalProject or stackProject functions you can include the hash needed in a comment. To calculate the hash use nix-prefetch-git : $ nix-prefetch-git https://github.com/input-output-hk/haskell.nix.git bc01ebc05a8105035c9449943046b46c8364b932 ... { \"url\": \"https://github.com/input-output-hk/haskell.nix.git\", \"rev\": \"bc01ebc05a8105035c9449943046b46c8364b932\", \"date\": \"2019-05-30T13:13:18+08:00\", \"sha256\": \"003lm3pm024vhbfmii7xcdd9v2rczpflxf7gdl2pyxia7p014i8z\", \"fetchSubmodules\": false } Cabal.project \u00b6 Add a --sha256 comment to the cabal.project file: source-repository-package type: git location: https://github.com/input-output-hk/haskell.nix.git tag: bc01ebc05a8105035c9449943046b46c8364b932 subdir: test/cabal-simple --sha256: 003lm3pm024vhbfmii7xcdd9v2rczpflxf7gdl2pyxia7p014i8z Stack \u00b6 Add a # nix-sha256 comment to the stack.yaml file: extra-deps: - git: https://github.com/input-output-hk/haskell.nix.git commit: bc01ebc05a8105035c9449943046b46c8364b932 subdirs: - test/cabal-simple # nix-sha256: 003lm3pm024vhbfmii7xcdd9v2rczpflxf7gdl2pyxia7p014i8z Avoiding modifying cabal.project and stack.yaml \u00b6 In some cases we cannot modify the cabal.project or stack.yaml file to add sha256 comments. As an alternative we can pass in a sha256map . For instance, pandoc includes a cabal.project file on hackage which includes a source-repository-package stanza for pandoc-citeproc : { haskell-nix, testSrc } : let pandoc = haskell-nix.hackage-package { name = \"pandoc\"; version = \"2.9.2.1\"; index-state = \"2020-04-15T00:00:00Z\"; # Function that returns a sha256 string by looking up the location # and tag in a nested attrset sha256map = { \"https://github.com/jgm/pandoc-citeproc\".\"0.17\" = \"0dxx8cp2xndpw3jwiawch2dkrkp15mil7pyx7dvd810pwc22pm2q\"; }; }; in pandoc.components.exes.pandoc","title":"Handling git repositories in projects"},{"location":"tutorials/source-repository-hashes.html#handling-git-repositories-in-projects","text":"Both stack.yaml and cabal.project files can contain references to git repositories containing the version of a particular package that we wish to use. This is mostly handled automatically by nix-tools and haskell.nix however when we want to use a nix system that is configured to use restricted mode (typically hydra) it will need additional hashes for the referenced repositories. When using project , cabalProject or stackProject functions you can include the hash needed in a comment. To calculate the hash use nix-prefetch-git : $ nix-prefetch-git https://github.com/input-output-hk/haskell.nix.git bc01ebc05a8105035c9449943046b46c8364b932 ... { \"url\": \"https://github.com/input-output-hk/haskell.nix.git\", \"rev\": \"bc01ebc05a8105035c9449943046b46c8364b932\", \"date\": \"2019-05-30T13:13:18+08:00\", \"sha256\": \"003lm3pm024vhbfmii7xcdd9v2rczpflxf7gdl2pyxia7p014i8z\", \"fetchSubmodules\": false }","title":"Handling git repositories in projects"},{"location":"tutorials/source-repository-hashes.html#cabalproject","text":"Add a --sha256 comment to the cabal.project file: source-repository-package type: git location: https://github.com/input-output-hk/haskell.nix.git tag: bc01ebc05a8105035c9449943046b46c8364b932 subdir: test/cabal-simple --sha256: 003lm3pm024vhbfmii7xcdd9v2rczpflxf7gdl2pyxia7p014i8z","title":"Cabal.project"},{"location":"tutorials/source-repository-hashes.html#stack","text":"Add a # nix-sha256 comment to the stack.yaml file: extra-deps: - git: https://github.com/input-output-hk/haskell.nix.git commit: bc01ebc05a8105035c9449943046b46c8364b932 subdirs: - test/cabal-simple # nix-sha256: 003lm3pm024vhbfmii7xcdd9v2rczpflxf7gdl2pyxia7p014i8z","title":"Stack"},{"location":"tutorials/source-repository-hashes.html#avoiding-modifying-cabalproject-and-stackyaml","text":"In some cases we cannot modify the cabal.project or stack.yaml file to add sha256 comments. As an alternative we can pass in a sha256map . For instance, pandoc includes a cabal.project file on hackage which includes a source-repository-package stanza for pandoc-citeproc : { haskell-nix, testSrc } : let pandoc = haskell-nix.hackage-package { name = \"pandoc\"; version = \"2.9.2.1\"; index-state = \"2020-04-15T00:00:00Z\"; # Function that returns a sha256 string by looking up the location # and tag in a nested attrset sha256map = { \"https://github.com/jgm/pandoc-citeproc\".\"0.17\" = \"0dxx8cp2xndpw3jwiawch2dkrkp15mil7pyx7dvd810pwc22pm2q\"; }; }; in pandoc.components.exes.pandoc","title":"Avoiding modifying cabal.project and stack.yaml"}]}